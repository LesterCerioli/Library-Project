// Generated from SQLiteParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SQLiteParserListener from './SQLiteParserListener.js';
const serializedATN = [4,1,192,2046,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,1,0,5,0,224,
8,0,10,0,12,0,227,9,0,1,0,1,0,1,1,5,1,232,8,1,10,1,12,1,235,9,1,1,1,1,1,
4,1,239,8,1,11,1,12,1,240,1,1,5,1,244,8,1,10,1,12,1,247,9,1,1,1,5,1,250,
8,1,10,1,12,1,253,9,1,1,2,1,2,1,2,3,2,258,8,2,3,2,260,8,2,1,2,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,1,2,3,2,286,8,2,1,3,1,3,1,3,1,3,1,3,3,3,293,8,3,1,3,1,3,1,3,1,3,1,
3,3,3,300,8,3,1,3,1,3,1,3,1,3,3,3,306,8,3,1,3,1,3,3,3,310,8,3,1,3,1,3,1,
3,3,3,315,8,3,1,3,3,3,318,8,3,1,4,1,4,1,4,1,4,1,4,3,4,325,8,4,1,4,3,4,328,
8,4,1,5,1,5,3,5,332,8,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,340,8,6,1,6,1,6,3,6,
344,8,6,3,6,346,8,6,1,7,1,7,3,7,350,8,7,1,8,1,8,3,8,354,8,8,1,8,1,8,3,8,
358,8,8,1,8,3,8,361,8,8,1,9,1,9,1,9,1,10,1,10,3,10,368,8,10,1,10,1,10,1,
11,1,11,3,11,374,8,11,1,11,1,11,1,11,1,11,3,11,380,8,11,1,11,1,11,1,11,3,
11,385,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,394,8,11,10,11,12,11,
397,9,11,1,11,1,11,1,11,3,11,402,8,11,1,12,1,12,3,12,406,8,12,1,12,1,12,
3,12,410,8,12,1,12,3,12,413,8,12,1,13,1,13,3,13,417,8,13,1,13,1,13,1,13,
1,13,3,13,423,8,13,1,13,1,13,1,13,3,13,428,8,13,1,13,1,13,1,13,1,13,1,13,
5,13,435,8,13,10,13,12,13,438,9,13,1,13,1,13,5,13,442,8,13,10,13,12,13,445,
9,13,1,13,1,13,1,13,3,13,450,8,13,1,13,1,13,3,13,454,8,13,1,14,1,14,3,14,
458,8,14,1,14,5,14,461,8,14,10,14,12,14,464,9,14,1,15,4,15,467,8,15,11,15,
12,15,468,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,481,8,15,
1,16,1,16,3,16,485,8,16,1,16,1,16,1,16,3,16,490,8,16,1,16,3,16,493,8,16,
1,16,3,16,496,8,16,1,16,1,16,1,16,3,16,501,8,16,1,16,3,16,504,8,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,518,8,16,1,16,
1,16,1,16,1,16,1,16,3,16,525,8,16,1,16,1,16,1,16,1,16,1,16,3,16,532,8,16,
3,16,534,8,16,1,17,3,17,537,8,17,1,17,1,17,1,18,1,18,3,18,543,8,18,1,18,
1,18,1,18,3,18,548,8,18,1,18,1,18,1,18,1,18,5,18,554,8,18,10,18,12,18,557,
9,18,1,18,1,18,3,18,561,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,5,18,574,8,18,10,18,12,18,577,9,18,1,18,1,18,1,18,3,18,582,8,18,
1,19,1,19,1,19,1,19,1,19,1,19,5,19,590,8,19,10,19,12,19,593,9,19,1,19,1,
19,3,19,597,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,607,8,19,1,
19,1,19,5,19,611,8,19,10,19,12,19,614,9,19,1,19,3,19,617,8,19,1,19,1,19,
1,19,3,19,622,8,19,3,19,624,8,19,1,20,1,20,1,20,1,20,1,21,1,21,3,21,632,
8,21,1,21,1,21,1,21,1,21,3,21,638,8,21,1,21,1,21,1,21,3,21,643,8,21,1,21,
1,21,1,21,1,21,1,21,3,21,650,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,
659,8,21,10,21,12,21,662,9,21,3,21,664,8,21,3,21,666,8,21,1,21,1,21,1,21,
1,21,1,21,3,21,673,8,21,1,21,1,21,3,21,677,8,21,1,21,1,21,1,21,1,21,1,21,
3,21,684,8,21,1,21,1,21,4,21,688,8,21,11,21,12,21,689,1,21,1,21,1,22,1,22,
3,22,696,8,22,1,22,1,22,1,22,1,22,3,22,702,8,22,1,22,1,22,1,22,3,22,707,
8,22,1,22,1,22,1,22,1,22,1,22,5,22,714,8,22,10,22,12,22,717,9,22,1,22,1,
22,3,22,721,8,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,732,8,
23,1,23,1,23,1,23,3,23,737,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,
746,8,23,10,23,12,23,749,9,23,1,23,1,23,3,23,753,8,23,1,24,1,24,3,24,757,
8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,771,
8,24,10,24,12,24,774,9,24,1,25,1,25,1,25,1,25,1,25,5,25,781,8,25,10,25,12,
25,784,9,25,1,25,1,25,3,25,788,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,796,
8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,806,8,27,10,27,12,27,809,
9,27,1,27,1,27,3,27,813,8,27,1,27,1,27,1,27,1,27,1,27,1,28,3,28,821,8,28,
1,28,1,28,1,28,1,28,1,28,3,28,828,8,28,1,29,3,29,831,8,29,1,29,1,29,1,29,
1,29,1,29,3,29,838,8,29,1,29,3,29,841,8,29,1,29,3,29,844,8,29,1,30,1,30,
3,30,848,8,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,856,8,31,1,31,1,31,1,31,
3,31,861,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,871,8,32,1,32,
1,32,1,32,3,32,876,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,885,8,32,
1,32,1,32,1,32,5,32,890,8,32,10,32,12,32,893,9,32,1,32,3,32,896,8,32,1,32,
1,32,3,32,900,8,32,1,32,3,32,903,8,32,1,32,1,32,1,32,1,32,5,32,909,8,32,
10,32,12,32,912,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
32,924,8,32,1,32,3,32,927,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,935,8,
32,1,32,1,32,1,32,1,32,1,32,4,32,942,8,32,11,32,12,32,943,1,32,1,32,3,32,
948,8,32,1,32,1,32,1,32,3,32,953,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,983,8,32,1,32,1,32,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,1,32,3,32,995,8,32,1,32,1,32,1,32,3,32,1000,8,32,1,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1012,8,32,1,32,1,32,1,
32,1,32,3,32,1018,8,32,1,32,1,32,1,32,1,32,1,32,3,32,1025,8,32,1,32,1,32,
3,32,1029,8,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1037,8,32,10,32,12,32,
1040,9,32,3,32,1042,8,32,1,32,1,32,1,32,1,32,3,32,1048,8,32,1,32,1,32,1,
32,1,32,3,32,1054,8,32,1,32,1,32,1,32,1,32,1,32,5,32,1061,8,32,10,32,12,
32,1064,9,32,3,32,1066,8,32,1,32,1,32,3,32,1070,8,32,5,32,1072,8,32,10,32,
12,32,1075,9,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1083,8,33,1,33,1,33,1,
34,1,34,1,35,3,35,1090,8,35,1,35,1,35,1,35,1,35,1,35,3,35,1097,8,35,1,35,
1,35,1,35,1,35,3,35,1103,8,35,1,35,1,35,1,35,3,35,1108,8,35,1,35,1,35,1,
35,1,35,5,35,1114,8,35,10,35,12,35,1117,9,35,1,35,1,35,3,35,1121,8,35,1,
35,1,35,1,35,1,35,1,35,5,35,1128,8,35,10,35,12,35,1131,9,35,1,35,1,35,1,
35,1,35,1,35,1,35,5,35,1139,8,35,10,35,12,35,1142,9,35,1,35,1,35,5,35,1146,
8,35,10,35,12,35,1149,9,35,1,35,3,35,1152,8,35,1,35,3,35,1155,8,35,1,35,
1,35,3,35,1159,8,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,1167,8,36,10,36,12,
36,1170,9,36,1,36,1,36,1,36,3,36,1175,8,36,3,36,1177,8,36,1,36,1,36,1,36,
1,36,1,36,1,36,3,36,1185,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1192,8,36,1,
36,1,36,1,36,5,36,1197,8,36,10,36,12,36,1200,9,36,1,36,1,36,3,36,1204,8,
36,3,36,1206,8,36,1,37,1,37,1,37,1,37,3,37,1212,8,37,1,37,1,37,1,37,1,37,
1,37,1,37,1,37,3,37,1221,8,37,1,38,1,38,1,38,3,38,1226,8,38,1,39,1,39,1,
39,1,39,1,39,3,39,1233,8,39,1,39,1,39,3,39,1237,8,39,3,39,1239,8,39,1,40,
3,40,1242,8,40,1,40,1,40,1,40,1,40,5,40,1248,8,40,10,40,12,40,1251,9,40,
1,40,3,40,1254,8,40,1,40,3,40,1257,8,40,1,41,1,41,1,41,1,41,3,41,1263,8,
41,5,41,1265,8,41,10,41,12,41,1268,9,41,1,42,1,42,3,42,1272,8,42,1,42,1,
42,1,42,5,42,1277,8,42,10,42,12,42,1280,9,42,1,42,1,42,1,42,1,42,5,42,1286,
8,42,10,42,12,42,1289,9,42,1,42,3,42,1292,8,42,3,42,1294,8,42,1,42,1,42,
3,42,1298,8,42,1,42,1,42,1,42,1,42,1,42,5,42,1305,8,42,10,42,12,42,1308,
9,42,1,42,1,42,3,42,1312,8,42,3,42,1314,8,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,42,1,42,1,42,5,42,1325,8,42,10,42,12,42,1328,9,42,3,42,1330,8,42,1,
42,1,42,1,42,1,42,1,42,5,42,1337,8,42,10,42,12,42,1340,9,42,1,42,1,42,1,
42,1,42,1,42,1,42,5,42,1348,8,42,10,42,12,42,1351,9,42,1,42,1,42,5,42,1355,
8,42,10,42,12,42,1358,9,42,3,42,1360,8,42,1,43,1,43,1,44,3,44,1365,8,44,
1,44,1,44,3,44,1369,8,44,1,44,3,44,1372,8,44,1,45,3,45,1375,8,45,1,45,1,
45,1,45,3,45,1380,8,45,1,45,1,45,3,45,1384,8,45,1,45,4,45,1387,8,45,11,45,
12,45,1388,1,45,3,45,1392,8,45,1,45,3,45,1395,8,45,1,46,1,46,1,46,3,46,1400,
8,46,1,46,1,46,3,46,1404,8,46,1,46,3,46,1407,8,46,1,46,1,46,1,46,1,46,1,
46,3,46,1414,8,46,1,46,1,46,1,46,3,46,1419,8,46,1,46,1,46,1,46,1,46,1,46,
5,46,1426,8,46,10,46,12,46,1429,9,46,1,46,1,46,3,46,1433,8,46,1,46,3,46,
1436,8,46,1,46,1,46,1,46,1,46,5,46,1442,8,46,10,46,12,46,1445,9,46,1,46,
3,46,1448,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1456,8,46,1,46,3,46,1459,
8,46,3,46,1461,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1470,8,47,1,
47,3,47,1473,8,47,3,47,1475,8,47,1,48,1,48,3,48,1479,8,48,1,48,1,48,3,48,
1483,8,48,1,48,1,48,3,48,1487,8,48,1,48,3,48,1490,8,48,1,49,1,49,1,49,1,
49,1,49,1,49,1,49,5,49,1499,8,49,10,49,12,49,1502,9,49,1,49,1,49,3,49,1506,
8,49,1,50,1,50,3,50,1510,8,50,1,50,1,50,3,50,1514,8,50,1,51,3,51,1517,8,
51,1,51,1,51,1,51,3,51,1522,8,51,1,51,1,51,1,51,1,51,3,51,1528,8,51,1,51,
1,51,1,51,1,51,1,51,3,51,1535,8,51,1,51,1,51,1,51,5,51,1540,8,51,10,51,12,
51,1543,9,51,1,51,1,51,3,51,1547,8,51,1,52,1,52,1,52,1,52,5,52,1553,8,52,
10,52,12,52,1556,9,52,1,52,1,52,1,53,3,53,1561,8,53,1,53,1,53,1,53,3,53,
1566,8,53,1,53,1,53,1,53,1,53,3,53,1572,8,53,1,53,1,53,1,53,1,53,1,53,3,
53,1579,8,53,1,53,1,53,1,53,5,53,1584,8,53,10,53,12,53,1587,9,53,1,53,1,
53,3,53,1591,8,53,1,53,3,53,1594,8,53,1,53,3,53,1597,8,53,1,54,1,54,1,54,
3,54,1602,8,54,1,54,1,54,1,54,3,54,1607,8,54,1,54,1,54,1,54,1,54,1,54,3,
54,1614,8,54,1,55,1,55,3,55,1618,8,55,1,55,1,55,3,55,1622,8,55,1,56,1,56,
1,56,1,56,1,56,1,56,1,57,1,57,3,57,1632,8,57,1,57,1,57,1,57,1,57,1,57,5,
57,1639,8,57,10,57,12,57,1642,9,57,3,57,1644,8,57,1,57,1,57,1,57,1,57,1,
57,5,57,1651,8,57,10,57,12,57,1654,9,57,1,57,3,57,1657,8,57,1,57,1,57,1,
58,1,58,1,58,1,58,3,58,1665,8,58,1,58,1,58,1,58,1,58,1,58,5,58,1672,8,58,
10,58,12,58,1675,9,58,3,58,1677,8,58,1,58,1,58,1,58,1,58,1,58,5,58,1684,
8,58,10,58,12,58,1687,9,58,3,58,1689,8,58,1,58,3,58,1692,8,58,1,58,3,58,
1695,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1705,8,59,1,60,1,
60,1,60,1,60,1,60,1,60,1,60,3,60,1714,8,60,1,61,1,61,1,61,1,61,1,61,5,61,
1721,8,61,10,61,12,61,1724,9,61,1,61,3,61,1727,8,61,1,61,1,61,1,62,1,62,
1,62,3,62,1734,8,62,1,62,1,62,1,62,5,62,1739,8,62,10,62,12,62,1742,9,62,
1,62,3,62,1745,8,62,1,62,1,62,3,62,1749,8,62,1,63,1,63,1,63,1,63,1,63,5,
63,1756,8,63,10,63,12,63,1759,9,63,1,63,3,63,1762,8,63,1,63,1,63,3,63,1766,
8,63,1,63,1,63,1,63,3,63,1771,8,63,1,64,1,64,3,64,1775,8,64,1,64,1,64,1,
64,5,64,1780,8,64,10,64,12,64,1783,9,64,1,65,1,65,1,65,1,65,1,65,5,65,1790,
8,65,10,65,12,65,1793,9,65,1,66,1,66,1,66,1,66,3,66,1799,8,66,1,67,1,67,
1,67,3,67,1804,8,67,1,67,3,67,1807,8,67,1,67,1,67,3,67,1811,8,67,1,68,1,
68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1825,8,69,1,70,
1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1837,8,70,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,3,71,1846,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
3,72,1855,8,72,1,72,1,72,3,72,1859,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,3,72,1869,8,72,1,72,3,72,1872,8,72,1,72,1,72,1,72,1,72,1,72,1,72,
1,72,3,72,1881,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1890,8,72,1,
72,3,72,1893,8,72,1,72,1,72,1,72,1,72,3,72,1899,8,72,1,72,1,72,1,72,1,72,
1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1913,8,72,1,72,1,72,3,72,1917,
8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1928,8,72,1,72,1,
72,1,72,3,72,1933,8,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,4,75,
1944,8,75,11,75,12,75,1945,1,76,1,76,1,76,4,76,1951,8,76,11,76,12,76,1952,
1,77,1,77,1,77,1,77,1,78,1,78,3,78,1961,8,78,1,78,1,78,1,78,3,78,1966,8,
78,5,78,1968,8,78,10,78,12,78,1971,9,78,1,79,1,79,1,80,1,80,1,81,1,81,1,
82,1,82,1,83,1,83,3,83,1983,8,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,
1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,
95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,
1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,
1,108,1,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,
2044,8,110,1,110,2,436,468,1,64,111,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,0,28,3,0,
58,58,69,69,82,82,2,0,47,47,66,66,1,0,132,133,2,0,145,145,170,170,1,0,8,
9,2,0,59,59,140,140,2,0,56,56,104,104,2,0,58,58,82,82,5,0,25,25,72,72,81,
81,122,122,125,125,4,0,84,84,131,131,137,137,144,144,2,0,7,7,12,13,1,0,14,
17,1,0,18,21,4,0,77,77,97,97,99,99,118,118,3,0,25,25,72,72,125,125,5,0,52,
54,104,104,171,172,185,185,187,188,2,0,29,29,62,62,3,0,127,127,153,153,178,
178,2,0,5,5,106,106,1,0,175,176,2,0,34,34,60,60,2,0,150,150,161,161,2,0,
158,158,165,165,2,0,159,159,166,167,2,0,160,160,162,162,2,0,8,10,102,102,
2,0,184,184,187,187,1,0,25,179,2324,0,225,1,0,0,0,2,233,1,0,0,0,4,259,1,
0,0,0,6,287,1,0,0,0,8,319,1,0,0,0,10,329,1,0,0,0,12,337,1,0,0,0,14,347,1,
0,0,0,16,351,1,0,0,0,18,362,1,0,0,0,20,365,1,0,0,0,22,371,1,0,0,0,24,405,
1,0,0,0,26,414,1,0,0,0,28,455,1,0,0,0,30,466,1,0,0,0,32,484,1,0,0,0,34,536,
1,0,0,0,36,542,1,0,0,0,38,583,1,0,0,0,40,625,1,0,0,0,42,629,1,0,0,0,44,693,
1,0,0,0,46,725,1,0,0,0,48,754,1,0,0,0,50,775,1,0,0,0,52,789,1,0,0,0,54,800,
1,0,0,0,56,820,1,0,0,0,58,830,1,0,0,0,60,845,1,0,0,0,62,851,1,0,0,0,64,952,
1,0,0,0,66,1076,1,0,0,0,68,1086,1,0,0,0,70,1158,1,0,0,0,72,1160,1,0,0,0,
74,1207,1,0,0,0,76,1225,1,0,0,0,78,1227,1,0,0,0,80,1241,1,0,0,0,82,1258,
1,0,0,0,84,1359,1,0,0,0,86,1361,1,0,0,0,88,1364,1,0,0,0,90,1374,1,0,0,0,
92,1460,1,0,0,0,94,1474,1,0,0,0,96,1489,1,0,0,0,98,1505,1,0,0,0,100,1513,
1,0,0,0,102,1516,1,0,0,0,104,1548,1,0,0,0,106,1560,1,0,0,0,108,1601,1,0,
0,0,110,1615,1,0,0,0,112,1623,1,0,0,0,114,1629,1,0,0,0,116,1660,1,0,0,0,
118,1696,1,0,0,0,120,1706,1,0,0,0,122,1715,1,0,0,0,124,1730,1,0,0,0,126,
1750,1,0,0,0,128,1772,1,0,0,0,130,1784,1,0,0,0,132,1794,1,0,0,0,134,1800,
1,0,0,0,136,1812,1,0,0,0,138,1824,1,0,0,0,140,1836,1,0,0,0,142,1845,1,0,
0,0,144,1932,1,0,0,0,146,1934,1,0,0,0,148,1937,1,0,0,0,150,1940,1,0,0,0,
152,1947,1,0,0,0,154,1954,1,0,0,0,156,1958,1,0,0,0,158,1972,1,0,0,0,160,
1974,1,0,0,0,162,1976,1,0,0,0,164,1978,1,0,0,0,166,1982,1,0,0,0,168,1984,
1,0,0,0,170,1986,1,0,0,0,172,1988,1,0,0,0,174,1990,1,0,0,0,176,1992,1,0,
0,0,178,1994,1,0,0,0,180,1996,1,0,0,0,182,1998,1,0,0,0,184,2000,1,0,0,0,
186,2002,1,0,0,0,188,2004,1,0,0,0,190,2006,1,0,0,0,192,2008,1,0,0,0,194,
2010,1,0,0,0,196,2012,1,0,0,0,198,2014,1,0,0,0,200,2016,1,0,0,0,202,2018,
1,0,0,0,204,2020,1,0,0,0,206,2022,1,0,0,0,208,2024,1,0,0,0,210,2026,1,0,
0,0,212,2028,1,0,0,0,214,2030,1,0,0,0,216,2032,1,0,0,0,218,2034,1,0,0,0,
220,2043,1,0,0,0,222,224,3,2,1,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,
1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,0,0,1,
229,1,1,0,0,0,230,232,5,1,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,
0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,245,3,4,2,0,237,
239,5,1,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,
0,0,241,242,1,0,0,0,242,244,3,4,2,0,243,238,1,0,0,0,244,247,1,0,0,0,245,
243,1,0,0,0,245,246,1,0,0,0,246,251,1,0,0,0,247,245,1,0,0,0,248,250,5,1,
0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,
3,1,0,0,0,253,251,1,0,0,0,254,257,5,71,0,0,255,256,5,114,0,0,256,258,5,111,
0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,254,1,0,0,0,259,
260,1,0,0,0,260,285,1,0,0,0,261,286,3,6,3,0,262,286,3,8,4,0,263,286,3,10,
5,0,264,286,3,12,6,0,265,286,3,14,7,0,266,286,3,22,11,0,267,286,3,26,13,
0,268,286,3,42,21,0,269,286,3,44,22,0,270,286,3,46,23,0,271,286,3,56,28,
0,272,286,3,58,29,0,273,286,3,60,30,0,274,286,3,62,31,0,275,286,3,70,35,
0,276,286,3,74,37,0,277,286,3,78,39,0,278,286,3,20,10,0,279,286,3,16,8,0,
280,286,3,18,9,0,281,286,3,80,40,0,282,286,3,102,51,0,283,286,3,106,53,0,
284,286,3,110,55,0,285,261,1,0,0,0,285,262,1,0,0,0,285,263,1,0,0,0,285,264,
1,0,0,0,285,265,1,0,0,0,285,266,1,0,0,0,285,267,1,0,0,0,285,268,1,0,0,0,
285,269,1,0,0,0,285,270,1,0,0,0,285,271,1,0,0,0,285,272,1,0,0,0,285,273,
1,0,0,0,285,274,1,0,0,0,285,275,1,0,0,0,285,276,1,0,0,0,285,277,1,0,0,0,
285,278,1,0,0,0,285,279,1,0,0,0,285,280,1,0,0,0,285,281,1,0,0,0,285,282,
1,0,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,5,1,0,0,0,287,288,5,30,0,0,288,
292,5,131,0,0,289,290,3,176,88,0,290,291,5,2,0,0,291,293,1,0,0,0,292,289,
1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,317,3,178,89,0,295,305,5,121,
0,0,296,297,5,135,0,0,297,306,3,182,91,0,298,300,5,46,0,0,299,298,1,0,0,
0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,3,184,92,0,302,303,5,135,0,0,303,
304,3,184,92,0,304,306,1,0,0,0,305,296,1,0,0,0,305,299,1,0,0,0,306,318,1,
0,0,0,307,309,5,27,0,0,308,310,5,46,0,0,309,308,1,0,0,0,309,310,1,0,0,0,
310,311,1,0,0,0,311,318,3,28,14,0,312,314,5,63,0,0,313,315,5,46,0,0,314,
313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,3,184,92,0,317,295,1,
0,0,0,317,307,1,0,0,0,317,312,1,0,0,0,318,7,1,0,0,0,319,327,5,31,0,0,320,
328,3,176,88,0,321,322,3,176,88,0,322,323,5,2,0,0,323,325,1,0,0,0,324,321,
1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,3,180,90,0,327,320,1,0,0,
0,327,324,1,0,0,0,327,328,1,0,0,0,328,9,1,0,0,0,329,331,5,35,0,0,330,332,
5,55,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,3,64,32,
0,334,335,5,33,0,0,335,336,3,176,88,0,336,11,1,0,0,0,337,339,5,38,0,0,338,
340,7,0,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,345,1,0,0,0,341,343,5,136,
0,0,342,344,3,204,102,0,343,342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,
345,341,1,0,0,0,345,346,1,0,0,0,346,13,1,0,0,0,347,349,7,1,0,0,348,350,5,
136,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,15,1,0,0,0,351,353,5,125,0,0,
352,354,5,136,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,360,1,0,0,0,355,357,
5,135,0,0,356,358,5,128,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,
0,0,359,361,3,200,100,0,360,355,1,0,0,0,360,361,1,0,0,0,361,17,1,0,0,0,362,
363,5,128,0,0,363,364,3,200,100,0,364,19,1,0,0,0,365,367,5,120,0,0,366,368,
5,128,0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,3,200,
100,0,370,21,1,0,0,0,371,373,5,50,0,0,372,374,5,139,0,0,373,372,1,0,0,0,
373,374,1,0,0,0,374,375,1,0,0,0,375,379,5,84,0,0,376,377,5,80,0,0,377,378,
5,102,0,0,378,380,5,70,0,0,379,376,1,0,0,0,379,380,1,0,0,0,380,384,1,0,0,
0,381,382,3,176,88,0,382,383,5,2,0,0,383,385,1,0,0,0,384,381,1,0,0,0,384,
385,1,0,0,0,385,386,1,0,0,0,386,387,3,190,95,0,387,388,5,107,0,0,388,389,
3,178,89,0,389,390,5,3,0,0,390,395,3,24,12,0,391,392,5,5,0,0,392,394,3,24,
12,0,393,391,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,
398,1,0,0,0,397,395,1,0,0,0,398,401,5,4,0,0,399,400,5,147,0,0,400,402,3,
64,32,0,401,399,1,0,0,0,401,402,1,0,0,0,402,23,1,0,0,0,403,406,3,184,92,
0,404,406,3,64,32,0,405,403,1,0,0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,
408,5,45,0,0,408,410,3,186,93,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,
1,0,0,0,411,413,3,136,68,0,412,411,1,0,0,0,412,413,1,0,0,0,413,25,1,0,0,
0,414,416,5,50,0,0,415,417,7,2,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,
1,0,0,0,418,422,5,131,0,0,419,420,5,80,0,0,420,421,5,102,0,0,421,423,5,70,
0,0,422,419,1,0,0,0,422,423,1,0,0,0,423,427,1,0,0,0,424,425,3,176,88,0,425,
426,5,2,0,0,426,428,1,0,0,0,427,424,1,0,0,0,427,428,1,0,0,0,428,429,1,0,
0,0,429,453,3,178,89,0,430,431,5,3,0,0,431,436,3,28,14,0,432,433,5,5,0,0,
433,435,3,28,14,0,434,432,1,0,0,0,435,438,1,0,0,0,436,437,1,0,0,0,436,434,
1,0,0,0,437,443,1,0,0,0,438,436,1,0,0,0,439,440,5,5,0,0,440,442,3,36,18,
0,441,439,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,446,
1,0,0,0,445,443,1,0,0,0,446,449,5,4,0,0,447,448,5,149,0,0,448,450,5,184,
0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,454,1,0,0,0,451,452,5,33,0,0,452,
454,3,80,40,0,453,430,1,0,0,0,453,451,1,0,0,0,454,27,1,0,0,0,455,457,3,184,
92,0,456,458,3,30,15,0,457,456,1,0,0,0,457,458,1,0,0,0,458,462,1,0,0,0,459,
461,3,32,16,0,460,459,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,
0,0,0,463,29,1,0,0,0,464,462,1,0,0,0,465,467,3,172,86,0,466,465,1,0,0,0,
467,468,1,0,0,0,468,469,1,0,0,0,468,466,1,0,0,0,469,480,1,0,0,0,470,471,
5,3,0,0,471,472,3,34,17,0,472,473,5,4,0,0,473,481,1,0,0,0,474,475,5,3,0,
0,475,476,3,34,17,0,476,477,5,5,0,0,477,478,3,34,17,0,478,479,5,4,0,0,479,
481,1,0,0,0,480,470,1,0,0,0,480,474,1,0,0,0,480,481,1,0,0,0,481,31,1,0,0,
0,482,483,5,49,0,0,483,485,3,172,86,0,484,482,1,0,0,0,484,485,1,0,0,0,485,
533,1,0,0,0,486,487,5,113,0,0,487,489,5,95,0,0,488,490,3,136,68,0,489,488,
1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,40,20,0,492,491,1,0,0,
0,492,493,1,0,0,0,493,495,1,0,0,0,494,496,5,36,0,0,495,494,1,0,0,0,495,496,
1,0,0,0,496,534,1,0,0,0,497,498,5,102,0,0,498,501,5,104,0,0,499,501,5,139,
0,0,500,497,1,0,0,0,500,499,1,0,0,0,501,503,1,0,0,0,502,504,3,40,20,0,503,
502,1,0,0,0,503,504,1,0,0,0,504,534,1,0,0,0,505,506,5,44,0,0,506,507,5,3,
0,0,507,508,3,64,32,0,508,509,5,4,0,0,509,534,1,0,0,0,510,517,5,56,0,0,511,
518,3,34,17,0,512,518,3,68,34,0,513,514,5,3,0,0,514,515,3,64,32,0,515,516,
5,4,0,0,516,518,1,0,0,0,517,511,1,0,0,0,517,512,1,0,0,0,517,513,1,0,0,0,
518,534,1,0,0,0,519,520,5,45,0,0,520,534,3,186,93,0,521,534,3,38,19,0,522,
523,5,168,0,0,523,525,5,169,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,526,
1,0,0,0,526,527,5,33,0,0,527,528,5,3,0,0,528,529,3,64,32,0,529,531,5,4,0,
0,530,532,7,3,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,486,
1,0,0,0,533,500,1,0,0,0,533,505,1,0,0,0,533,510,1,0,0,0,533,519,1,0,0,0,
533,521,1,0,0,0,533,524,1,0,0,0,534,33,1,0,0,0,535,537,7,4,0,0,536,535,1,
0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,5,185,0,0,539,35,1,0,0,0,540,
541,5,49,0,0,541,543,3,172,86,0,542,540,1,0,0,0,542,543,1,0,0,0,543,581,
1,0,0,0,544,545,5,113,0,0,545,548,5,95,0,0,546,548,5,139,0,0,547,544,1,0,
0,0,547,546,1,0,0,0,548,549,1,0,0,0,549,550,5,3,0,0,550,555,3,24,12,0,551,
552,5,5,0,0,552,554,3,24,12,0,553,551,1,0,0,0,554,557,1,0,0,0,555,553,1,
0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,555,1,0,0,0,558,560,5,4,0,0,559,
561,3,40,20,0,560,559,1,0,0,0,560,561,1,0,0,0,561,582,1,0,0,0,562,563,5,
44,0,0,563,564,5,3,0,0,564,565,3,64,32,0,565,566,5,4,0,0,566,582,1,0,0,0,
567,568,5,74,0,0,568,569,5,95,0,0,569,570,5,3,0,0,570,575,3,184,92,0,571,
572,5,5,0,0,572,574,3,184,92,0,573,571,1,0,0,0,574,577,1,0,0,0,575,573,1,
0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,4,0,0,579,
580,3,38,19,0,580,582,1,0,0,0,581,547,1,0,0,0,581,562,1,0,0,0,581,567,1,
0,0,0,582,37,1,0,0,0,583,584,5,117,0,0,584,596,3,188,94,0,585,586,5,3,0,
0,586,591,3,184,92,0,587,588,5,5,0,0,588,590,3,184,92,0,589,587,1,0,0,0,
590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,591,
1,0,0,0,594,595,5,4,0,0,595,597,1,0,0,0,596,585,1,0,0,0,596,597,1,0,0,0,
597,612,1,0,0,0,598,599,5,107,0,0,599,606,7,5,0,0,600,601,5,130,0,0,601,
607,7,6,0,0,602,607,5,41,0,0,603,607,5,123,0,0,604,605,5,101,0,0,605,607,
5,26,0,0,606,600,1,0,0,0,606,602,1,0,0,0,606,603,1,0,0,0,606,604,1,0,0,0,
607,611,1,0,0,0,608,609,5,99,0,0,609,611,3,172,86,0,610,598,1,0,0,0,610,
608,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,623,1,0,
0,0,614,612,1,0,0,0,615,617,5,102,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,
618,1,0,0,0,618,621,5,57,0,0,619,620,5,86,0,0,620,622,7,7,0,0,621,619,1,
0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,616,1,0,0,0,623,624,1,0,0,0,624,
39,1,0,0,0,625,626,5,107,0,0,626,627,5,48,0,0,627,628,7,8,0,0,628,41,1,0,
0,0,629,631,5,50,0,0,630,632,7,2,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,
633,1,0,0,0,633,637,5,137,0,0,634,635,5,80,0,0,635,636,5,102,0,0,636,638,
5,70,0,0,637,634,1,0,0,0,637,638,1,0,0,0,638,642,1,0,0,0,639,640,3,176,88,
0,640,641,5,2,0,0,641,643,1,0,0,0,642,639,1,0,0,0,642,643,1,0,0,0,643,644,
1,0,0,0,644,649,3,192,96,0,645,650,5,37,0,0,646,650,5,28,0,0,647,648,5,89,
0,0,648,650,5,105,0,0,649,645,1,0,0,0,649,646,1,0,0,0,649,647,1,0,0,0,649,
650,1,0,0,0,650,665,1,0,0,0,651,666,5,59,0,0,652,666,5,88,0,0,653,663,5,
140,0,0,654,655,5,105,0,0,655,660,3,184,92,0,656,657,5,5,0,0,657,659,3,184,
92,0,658,656,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,
664,1,0,0,0,662,660,1,0,0,0,663,654,1,0,0,0,663,664,1,0,0,0,664,666,1,0,
0,0,665,651,1,0,0,0,665,652,1,0,0,0,665,653,1,0,0,0,666,667,1,0,0,0,667,
668,5,107,0,0,668,672,3,178,89,0,669,670,5,73,0,0,670,671,5,64,0,0,671,673,
5,126,0,0,672,669,1,0,0,0,672,673,1,0,0,0,673,676,1,0,0,0,674,675,5,146,
0,0,675,677,3,64,32,0,676,674,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,
687,5,38,0,0,679,684,3,102,51,0,680,684,3,70,35,0,681,684,3,56,28,0,682,
684,3,80,40,0,683,679,1,0,0,0,683,680,1,0,0,0,683,681,1,0,0,0,683,682,1,
0,0,0,684,685,1,0,0,0,685,686,5,1,0,0,686,688,1,0,0,0,687,683,1,0,0,0,688,
689,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,66,
0,0,692,43,1,0,0,0,693,695,5,50,0,0,694,696,7,2,0,0,695,694,1,0,0,0,695,
696,1,0,0,0,696,697,1,0,0,0,697,701,5,144,0,0,698,699,5,80,0,0,699,700,5,
102,0,0,700,702,5,70,0,0,701,698,1,0,0,0,701,702,1,0,0,0,702,706,1,0,0,0,
703,704,3,176,88,0,704,705,5,2,0,0,705,707,1,0,0,0,706,703,1,0,0,0,706,707,
1,0,0,0,707,708,1,0,0,0,708,720,3,194,97,0,709,710,5,3,0,0,710,715,3,184,
92,0,711,712,5,5,0,0,712,714,3,184,92,0,713,711,1,0,0,0,714,717,1,0,0,0,
715,713,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,715,1,0,0,0,718,719,
5,4,0,0,719,721,1,0,0,0,720,709,1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,
722,723,5,33,0,0,723,724,3,80,40,0,724,45,1,0,0,0,725,726,5,50,0,0,726,727,
5,145,0,0,727,731,5,131,0,0,728,729,5,80,0,0,729,730,5,102,0,0,730,732,5,
70,0,0,731,728,1,0,0,0,731,732,1,0,0,0,732,736,1,0,0,0,733,734,3,176,88,
0,734,735,5,2,0,0,735,737,1,0,0,0,736,733,1,0,0,0,736,737,1,0,0,0,737,738,
1,0,0,0,738,739,3,178,89,0,739,740,5,141,0,0,740,752,3,196,98,0,741,742,
5,3,0,0,742,747,3,166,83,0,743,744,5,5,0,0,744,746,3,166,83,0,745,743,1,
0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,
747,1,0,0,0,750,751,5,4,0,0,751,753,1,0,0,0,752,741,1,0,0,0,752,753,1,0,
0,0,753,47,1,0,0,0,754,756,5,148,0,0,755,757,5,116,0,0,756,755,1,0,0,0,756,
757,1,0,0,0,757,758,1,0,0,0,758,759,3,50,25,0,759,760,5,33,0,0,760,761,5,
3,0,0,761,762,3,80,40,0,762,772,5,4,0,0,763,764,5,5,0,0,764,765,3,50,25,
0,765,766,5,33,0,0,766,767,5,3,0,0,767,768,3,80,40,0,768,769,5,4,0,0,769,
771,1,0,0,0,770,763,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,
0,0,773,49,1,0,0,0,774,772,1,0,0,0,775,787,3,178,89,0,776,777,5,3,0,0,777,
782,3,184,92,0,778,779,5,5,0,0,779,781,3,184,92,0,780,778,1,0,0,0,781,784,
1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,782,1,0,0,0,
785,786,5,4,0,0,786,788,1,0,0,0,787,776,1,0,0,0,787,788,1,0,0,0,788,51,1,
0,0,0,789,790,3,50,25,0,790,791,5,33,0,0,791,792,5,3,0,0,792,793,3,158,79,
0,793,795,5,138,0,0,794,796,5,29,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,
797,1,0,0,0,797,798,3,160,80,0,798,799,5,4,0,0,799,53,1,0,0,0,800,812,3,
178,89,0,801,802,5,3,0,0,802,807,3,184,92,0,803,804,5,5,0,0,804,806,3,184,
92,0,805,803,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,
810,1,0,0,0,809,807,1,0,0,0,810,811,5,4,0,0,811,813,1,0,0,0,812,801,1,0,
0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,5,33,0,0,815,816,5,3,0,0,816,
817,3,80,40,0,817,818,5,4,0,0,818,55,1,0,0,0,819,821,3,48,24,0,820,819,1,
0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,823,5,59,0,0,823,824,5,75,0,0,
824,827,3,108,54,0,825,826,5,147,0,0,826,828,3,64,32,0,827,825,1,0,0,0,827,
828,1,0,0,0,828,57,1,0,0,0,829,831,3,48,24,0,830,829,1,0,0,0,830,831,1,0,
0,0,831,832,1,0,0,0,832,833,5,59,0,0,833,834,5,75,0,0,834,837,3,108,54,0,
835,836,5,147,0,0,836,838,3,64,32,0,837,835,1,0,0,0,837,838,1,0,0,0,838,
843,1,0,0,0,839,841,3,130,65,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,
0,0,0,842,844,3,132,66,0,843,840,1,0,0,0,843,844,1,0,0,0,844,59,1,0,0,0,
845,847,5,61,0,0,846,848,5,55,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,
1,0,0,0,849,850,3,176,88,0,850,61,1,0,0,0,851,852,5,63,0,0,852,855,7,9,0,
0,853,854,5,80,0,0,854,856,5,70,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,
860,1,0,0,0,857,858,3,176,88,0,858,859,5,2,0,0,859,861,1,0,0,0,860,857,1,
0,0,0,860,861,1,0,0,0,861,862,1,0,0,0,862,863,3,220,110,0,863,63,1,0,0,0,
864,865,6,32,-1,0,865,953,3,68,34,0,866,953,5,186,0,0,867,868,3,176,88,0,
868,869,5,2,0,0,869,871,1,0,0,0,870,867,1,0,0,0,870,871,1,0,0,0,871,872,
1,0,0,0,872,873,3,178,89,0,873,874,5,2,0,0,874,876,1,0,0,0,875,870,1,0,0,
0,875,876,1,0,0,0,876,877,1,0,0,0,877,953,3,184,92,0,878,879,3,162,81,0,
879,880,3,64,32,21,880,953,1,0,0,0,881,882,3,174,87,0,882,895,5,3,0,0,883,
885,5,62,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,891,3,64,
32,0,887,888,5,5,0,0,888,890,3,64,32,0,889,887,1,0,0,0,890,893,1,0,0,0,891,
889,1,0,0,0,891,892,1,0,0,0,892,896,1,0,0,0,893,891,1,0,0,0,894,896,5,7,
0,0,895,884,1,0,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,
899,5,4,0,0,898,900,3,112,56,0,899,898,1,0,0,0,899,900,1,0,0,0,900,902,1,
0,0,0,901,903,3,116,58,0,902,901,1,0,0,0,902,903,1,0,0,0,903,953,1,0,0,0,
904,905,5,3,0,0,905,910,3,64,32,0,906,907,5,5,0,0,907,909,3,64,32,0,908,
906,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,913,1,0,
0,0,912,910,1,0,0,0,913,914,5,4,0,0,914,953,1,0,0,0,915,916,5,43,0,0,916,
917,5,3,0,0,917,918,3,64,32,0,918,919,5,33,0,0,919,920,3,30,15,0,920,921,
5,4,0,0,921,953,1,0,0,0,922,924,5,102,0,0,923,922,1,0,0,0,923,924,1,0,0,
0,924,925,1,0,0,0,925,927,5,70,0,0,926,923,1,0,0,0,926,927,1,0,0,0,927,928,
1,0,0,0,928,929,5,3,0,0,929,930,3,80,40,0,930,931,5,4,0,0,931,953,1,0,0,
0,932,934,5,42,0,0,933,935,3,64,32,0,934,933,1,0,0,0,934,935,1,0,0,0,935,
941,1,0,0,0,936,937,5,146,0,0,937,938,3,64,32,0,938,939,5,134,0,0,939,940,
3,64,32,0,940,942,1,0,0,0,941,936,1,0,0,0,942,943,1,0,0,0,943,941,1,0,0,
0,943,944,1,0,0,0,944,947,1,0,0,0,945,946,5,65,0,0,946,948,3,64,32,0,947,
945,1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,950,5,66,0,0,950,953,1,0,
0,0,951,953,3,66,33,0,952,864,1,0,0,0,952,866,1,0,0,0,952,875,1,0,0,0,952,
878,1,0,0,0,952,881,1,0,0,0,952,904,1,0,0,0,952,915,1,0,0,0,952,926,1,0,
0,0,952,932,1,0,0,0,952,951,1,0,0,0,953,1073,1,0,0,0,954,955,10,20,0,0,955,
956,5,11,0,0,956,1072,3,64,32,21,957,958,10,19,0,0,958,959,7,10,0,0,959,
1072,3,64,32,20,960,961,10,18,0,0,961,962,7,4,0,0,962,1072,3,64,32,19,963,
964,10,17,0,0,964,965,7,11,0,0,965,1072,3,64,32,18,966,967,10,16,0,0,967,
968,7,12,0,0,968,1072,3,64,32,17,969,982,10,15,0,0,970,983,5,6,0,0,971,983,
5,22,0,0,972,983,5,23,0,0,973,983,5,24,0,0,974,983,5,92,0,0,975,976,5,92,
0,0,976,983,5,102,0,0,977,983,5,83,0,0,978,983,5,97,0,0,979,983,5,77,0,0,
980,983,5,99,0,0,981,983,5,118,0,0,982,970,1,0,0,0,982,971,1,0,0,0,982,972,
1,0,0,0,982,973,1,0,0,0,982,974,1,0,0,0,982,975,1,0,0,0,982,977,1,0,0,0,
982,978,1,0,0,0,982,979,1,0,0,0,982,980,1,0,0,0,982,981,1,0,0,0,983,984,
1,0,0,0,984,1072,3,64,32,16,985,986,10,14,0,0,986,987,5,32,0,0,987,1072,
3,64,32,15,988,989,10,13,0,0,989,990,5,108,0,0,990,1072,3,64,32,14,991,992,
10,6,0,0,992,994,5,92,0,0,993,995,5,102,0,0,994,993,1,0,0,0,994,995,1,0,
0,0,995,996,1,0,0,0,996,1072,3,64,32,7,997,999,10,5,0,0,998,1000,5,102,0,
0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1002,5,39,0,0,
1002,1003,3,64,32,0,1003,1004,5,32,0,0,1004,1005,3,64,32,6,1005,1072,1,0,
0,0,1006,1007,10,9,0,0,1007,1008,5,45,0,0,1008,1072,3,186,93,0,1009,1011,
10,8,0,0,1010,1012,5,102,0,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,
1,0,0,0,1013,1014,7,13,0,0,1014,1017,3,64,32,0,1015,1016,5,67,0,0,1016,1018,
3,64,32,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1072,1,0,0,0,1019,1024,
10,7,0,0,1020,1025,5,93,0,0,1021,1025,5,103,0,0,1022,1023,5,102,0,0,1023,
1025,5,104,0,0,1024,1020,1,0,0,0,1024,1021,1,0,0,0,1024,1022,1,0,0,0,1025,
1072,1,0,0,0,1026,1028,10,4,0,0,1027,1029,5,102,0,0,1028,1027,1,0,0,0,1028,
1029,1,0,0,0,1029,1030,1,0,0,0,1030,1069,5,83,0,0,1031,1041,5,3,0,0,1032,
1042,3,80,40,0,1033,1038,3,64,32,0,1034,1035,5,5,0,0,1035,1037,3,64,32,0,
1036,1034,1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,
1039,1042,1,0,0,0,1040,1038,1,0,0,0,1041,1032,1,0,0,0,1041,1033,1,0,0,0,
1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1070,5,4,0,0,1044,1045,3,176,88,
0,1045,1046,5,2,0,0,1046,1048,1,0,0,0,1047,1044,1,0,0,0,1047,1048,1,0,0,
0,1048,1049,1,0,0,0,1049,1070,3,178,89,0,1050,1051,3,176,88,0,1051,1052,
5,2,0,0,1052,1054,1,0,0,0,1053,1050,1,0,0,0,1053,1054,1,0,0,0,1054,1055,
1,0,0,0,1055,1056,3,218,109,0,1056,1065,5,3,0,0,1057,1062,3,64,32,0,1058,
1059,5,5,0,0,1059,1061,3,64,32,0,1060,1058,1,0,0,0,1061,1064,1,0,0,0,1062,
1060,1,0,0,0,1062,1063,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,0,0,0,1065,
1057,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1068,5,4,0,0,1068,
1070,1,0,0,0,1069,1031,1,0,0,0,1069,1047,1,0,0,0,1069,1053,1,0,0,0,1070,
1072,1,0,0,0,1071,954,1,0,0,0,1071,957,1,0,0,0,1071,960,1,0,0,0,1071,963,
1,0,0,0,1071,966,1,0,0,0,1071,969,1,0,0,0,1071,985,1,0,0,0,1071,988,1,0,
0,0,1071,991,1,0,0,0,1071,997,1,0,0,0,1071,1006,1,0,0,0,1071,1009,1,0,0,
0,1071,1019,1,0,0,0,1071,1026,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,
0,1073,1074,1,0,0,0,1074,65,1,0,0,0,1075,1073,1,0,0,0,1076,1077,5,115,0,
0,1077,1082,5,3,0,0,1078,1083,5,81,0,0,1079,1080,7,14,0,0,1080,1081,5,5,
0,0,1081,1083,3,164,82,0,1082,1078,1,0,0,0,1082,1079,1,0,0,0,1083,1084,1,
0,0,0,1084,1085,5,4,0,0,1085,67,1,0,0,0,1086,1087,7,15,0,0,1087,69,1,0,0,
0,1088,1090,3,48,24,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1096,1,0,
0,0,1091,1097,5,88,0,0,1092,1097,5,122,0,0,1093,1094,5,88,0,0,1094,1095,
5,108,0,0,1095,1097,7,8,0,0,1096,1091,1,0,0,0,1096,1092,1,0,0,0,1096,1093,
1,0,0,0,1097,1098,1,0,0,0,1098,1102,5,91,0,0,1099,1100,3,176,88,0,1100,1101,
5,2,0,0,1101,1103,1,0,0,0,1102,1099,1,0,0,0,1102,1103,1,0,0,0,1103,1104,
1,0,0,0,1104,1107,3,178,89,0,1105,1106,5,33,0,0,1106,1108,3,202,101,0,1107,
1105,1,0,0,0,1107,1108,1,0,0,0,1108,1120,1,0,0,0,1109,1110,5,3,0,0,1110,
1115,3,184,92,0,1111,1112,5,5,0,0,1112,1114,3,184,92,0,1113,1111,1,0,0,0,
1114,1117,1,0,0,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1118,1,0,0,0,
1117,1115,1,0,0,0,1118,1119,5,4,0,0,1119,1121,1,0,0,0,1120,1109,1,0,0,0,
1120,1121,1,0,0,0,1121,1151,1,0,0,0,1122,1123,5,143,0,0,1123,1124,5,3,0,
0,1124,1129,3,64,32,0,1125,1126,5,5,0,0,1126,1128,3,64,32,0,1127,1125,1,
0,0,0,1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,
0,0,0,1131,1129,1,0,0,0,1132,1147,5,4,0,0,1133,1134,5,5,0,0,1134,1135,5,
3,0,0,1135,1140,3,64,32,0,1136,1137,5,5,0,0,1137,1139,3,64,32,0,1138,1136,
1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,1143,
1,0,0,0,1142,1140,1,0,0,0,1143,1144,5,4,0,0,1144,1146,1,0,0,0,1145,1133,
1,0,0,0,1146,1149,1,0,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,1152,
1,0,0,0,1149,1147,1,0,0,0,1150,1152,3,80,40,0,1151,1122,1,0,0,0,1151,1150,
1,0,0,0,1152,1154,1,0,0,0,1153,1155,3,72,36,0,1154,1153,1,0,0,0,1154,1155,
1,0,0,0,1155,1159,1,0,0,0,1156,1157,5,56,0,0,1157,1159,5,143,0,0,1158,1089,
1,0,0,0,1158,1156,1,0,0,0,1159,71,1,0,0,0,1160,1161,5,107,0,0,1161,1176,
5,48,0,0,1162,1163,5,3,0,0,1163,1168,3,24,12,0,1164,1165,5,5,0,0,1165,1167,
3,24,12,0,1166,1164,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,
1,0,0,0,1169,1171,1,0,0,0,1170,1168,1,0,0,0,1171,1174,5,4,0,0,1172,1173,
5,147,0,0,1173,1175,3,64,32,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1177,
1,0,0,0,1176,1162,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,1205,
5,182,0,0,1179,1206,5,183,0,0,1180,1181,5,140,0,0,1181,1184,5,130,0,0,1182,
1185,3,184,92,0,1183,1185,3,104,52,0,1184,1182,1,0,0,0,1184,1183,1,0,0,0,
1185,1186,1,0,0,0,1186,1187,5,22,0,0,1187,1198,3,64,32,0,1188,1191,5,5,0,
0,1189,1192,3,184,92,0,1190,1192,3,104,52,0,1191,1189,1,0,0,0,1191,1190,
1,0,0,0,1192,1193,1,0,0,0,1193,1194,5,22,0,0,1194,1195,3,64,32,0,1195,1197,
1,0,0,0,1196,1188,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,
1,0,0,0,1199,1203,1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,147,0,0,1202,1204,
3,64,32,0,1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1206,1,0,0,0,1205,1179,
1,0,0,0,1205,1180,1,0,0,0,1206,73,1,0,0,0,1207,1211,5,112,0,0,1208,1209,
3,176,88,0,1209,1210,5,2,0,0,1210,1212,1,0,0,0,1211,1208,1,0,0,0,1211,1212,
1,0,0,0,1212,1213,1,0,0,0,1213,1220,3,198,99,0,1214,1215,5,6,0,0,1215,1221,
3,76,38,0,1216,1217,5,3,0,0,1217,1218,3,76,38,0,1218,1219,5,4,0,0,1219,1221,
1,0,0,0,1220,1214,1,0,0,0,1220,1216,1,0,0,0,1220,1221,1,0,0,0,1221,75,1,
0,0,0,1222,1226,3,34,17,0,1223,1226,3,172,86,0,1224,1226,5,187,0,0,1225,
1222,1,0,0,0,1225,1223,1,0,0,0,1225,1224,1,0,0,0,1226,77,1,0,0,0,1227,1238,
5,119,0,0,1228,1239,3,186,93,0,1229,1230,3,176,88,0,1230,1231,5,2,0,0,1231,
1233,1,0,0,0,1232,1229,1,0,0,0,1232,1233,1,0,0,0,1233,1236,1,0,0,0,1234,
1237,3,178,89,0,1235,1237,3,190,95,0,1236,1234,1,0,0,0,1236,1235,1,0,0,0,
1237,1239,1,0,0,0,1238,1228,1,0,0,0,1238,1232,1,0,0,0,1238,1239,1,0,0,0,
1239,79,1,0,0,0,1240,1242,3,128,64,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,
1242,1243,1,0,0,0,1243,1249,3,84,42,0,1244,1245,3,100,50,0,1245,1246,3,84,
42,0,1246,1248,1,0,0,0,1247,1244,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,
0,0,1249,1250,1,0,0,0,1250,1253,1,0,0,0,1251,1249,1,0,0,0,1252,1254,3,130,
65,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1256,1,0,0,0,1255,1257,3,132,
66,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,81,1,0,0,0,1258,1266,3,92,
46,0,1259,1260,3,96,48,0,1260,1262,3,92,46,0,1261,1263,3,98,49,0,1262,1261,
1,0,0,0,1262,1263,1,0,0,0,1263,1265,1,0,0,0,1264,1259,1,0,0,0,1265,1268,
1,0,0,0,1266,1264,1,0,0,0,1266,1267,1,0,0,0,1267,83,1,0,0,0,1268,1266,1,
0,0,0,1269,1271,5,129,0,0,1270,1272,7,16,0,0,1271,1270,1,0,0,0,1271,1272,
1,0,0,0,1272,1273,1,0,0,0,1273,1278,3,94,47,0,1274,1275,5,5,0,0,1275,1277,
3,94,47,0,1276,1274,1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,0,0,0,1278,1279,
1,0,0,0,1279,1293,1,0,0,0,1280,1278,1,0,0,0,1281,1291,5,75,0,0,1282,1287,
3,92,46,0,1283,1284,5,5,0,0,1284,1286,3,92,46,0,1285,1283,1,0,0,0,1286,1289,
1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1292,1,0,0,0,1289,1287,
1,0,0,0,1290,1292,3,82,41,0,1291,1282,1,0,0,0,1291,1290,1,0,0,0,1292,1294,
1,0,0,0,1293,1281,1,0,0,0,1293,1294,1,0,0,0,1294,1297,1,0,0,0,1295,1296,
5,147,0,0,1296,1298,3,64,32,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,1313,
1,0,0,0,1299,1300,5,78,0,0,1300,1301,5,40,0,0,1301,1306,3,64,32,0,1302,1303,
5,5,0,0,1303,1305,3,64,32,0,1304,1302,1,0,0,0,1305,1308,1,0,0,0,1306,1304,
1,0,0,0,1306,1307,1,0,0,0,1307,1311,1,0,0,0,1308,1306,1,0,0,0,1309,1310,
5,79,0,0,1310,1312,3,64,32,0,1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1314,
1,0,0,0,1313,1299,1,0,0,0,1313,1314,1,0,0,0,1314,1329,1,0,0,0,1315,1316,
5,173,0,0,1316,1317,3,206,103,0,1317,1318,5,33,0,0,1318,1326,3,114,57,0,
1319,1320,5,5,0,0,1320,1321,3,206,103,0,1321,1322,5,33,0,0,1322,1323,3,114,
57,0,1323,1325,1,0,0,0,1324,1319,1,0,0,0,1325,1328,1,0,0,0,1326,1324,1,0,
0,0,1326,1327,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1329,1315,1,0,
0,0,1329,1330,1,0,0,0,1330,1360,1,0,0,0,1331,1332,5,143,0,0,1332,1333,5,
3,0,0,1333,1338,3,64,32,0,1334,1335,5,5,0,0,1335,1337,3,64,32,0,1336,1334,
1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,1341,
1,0,0,0,1340,1338,1,0,0,0,1341,1356,5,4,0,0,1342,1343,5,5,0,0,1343,1344,
5,3,0,0,1344,1349,3,64,32,0,1345,1346,5,5,0,0,1346,1348,3,64,32,0,1347,1345,
1,0,0,0,1348,1351,1,0,0,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1352,
1,0,0,0,1351,1349,1,0,0,0,1352,1353,5,4,0,0,1353,1355,1,0,0,0,1354,1342,
1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,1360,
1,0,0,0,1358,1356,1,0,0,0,1359,1269,1,0,0,0,1359,1331,1,0,0,0,1360,85,1,
0,0,0,1361,1362,3,80,40,0,1362,87,1,0,0,0,1363,1365,3,128,64,0,1364,1363,
1,0,0,0,1364,1365,1,0,0,0,1365,1366,1,0,0,0,1366,1368,3,84,42,0,1367,1369,
3,130,65,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1371,1,0,0,0,1370,1372,
3,132,66,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,89,1,0,0,0,1373,1375,
3,128,64,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1386,
3,84,42,0,1377,1379,5,138,0,0,1378,1380,5,29,0,0,1379,1378,1,0,0,0,1379,
1380,1,0,0,0,1380,1384,1,0,0,0,1381,1384,5,90,0,0,1382,1384,5,68,0,0,1383,
1377,1,0,0,0,1383,1381,1,0,0,0,1383,1382,1,0,0,0,1384,1385,1,0,0,0,1385,
1387,3,84,42,0,1386,1383,1,0,0,0,1387,1388,1,0,0,0,1388,1386,1,0,0,0,1388,
1389,1,0,0,0,1389,1391,1,0,0,0,1390,1392,3,130,65,0,1391,1390,1,0,0,0,1391,
1392,1,0,0,0,1392,1394,1,0,0,0,1393,1395,3,132,66,0,1394,1393,1,0,0,0,1394,
1395,1,0,0,0,1395,91,1,0,0,0,1396,1397,3,176,88,0,1397,1398,5,2,0,0,1398,
1400,1,0,0,0,1399,1396,1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,
1406,3,178,89,0,1402,1404,5,33,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,
1405,1,0,0,0,1405,1407,3,202,101,0,1406,1403,1,0,0,0,1406,1407,1,0,0,0,1407,
1413,1,0,0,0,1408,1409,5,85,0,0,1409,1410,5,40,0,0,1410,1414,3,190,95,0,
1411,1412,5,102,0,0,1412,1414,5,85,0,0,1413,1408,1,0,0,0,1413,1411,1,0,0,
0,1413,1414,1,0,0,0,1414,1461,1,0,0,0,1415,1416,3,176,88,0,1416,1417,5,2,
0,0,1417,1419,1,0,0,0,1418,1415,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,
0,0,1420,1421,3,218,109,0,1421,1422,5,3,0,0,1422,1427,3,64,32,0,1423,1424,
5,5,0,0,1424,1426,3,64,32,0,1425,1423,1,0,0,0,1426,1429,1,0,0,0,1427,1425,
1,0,0,0,1427,1428,1,0,0,0,1428,1430,1,0,0,0,1429,1427,1,0,0,0,1430,1435,
5,4,0,0,1431,1433,5,33,0,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,
1,0,0,0,1434,1436,3,202,101,0,1435,1432,1,0,0,0,1435,1436,1,0,0,0,1436,1461,
1,0,0,0,1437,1447,5,3,0,0,1438,1443,3,92,46,0,1439,1440,5,5,0,0,1440,1442,
3,92,46,0,1441,1439,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,0,0,0,1443,1444,
1,0,0,0,1444,1448,1,0,0,0,1445,1443,1,0,0,0,1446,1448,3,82,41,0,1447,1438,
1,0,0,0,1447,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1450,5,4,0,0,1450,1461,
1,0,0,0,1451,1452,5,3,0,0,1452,1453,3,80,40,0,1453,1458,5,4,0,0,1454,1456,
5,33,0,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,
3,202,101,0,1458,1455,1,0,0,0,1458,1459,1,0,0,0,1459,1461,1,0,0,0,1460,1399,
1,0,0,0,1460,1418,1,0,0,0,1460,1437,1,0,0,0,1460,1451,1,0,0,0,1461,93,1,
0,0,0,1462,1475,5,7,0,0,1463,1464,3,178,89,0,1464,1465,5,2,0,0,1465,1466,
5,7,0,0,1466,1475,1,0,0,0,1467,1472,3,64,32,0,1468,1470,5,33,0,0,1469,1468,
1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1473,3,168,84,0,1472,1469,
1,0,0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,1462,1,0,0,0,1474,1463,
1,0,0,0,1474,1467,1,0,0,0,1475,95,1,0,0,0,1476,1490,5,5,0,0,1477,1479,5,
100,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1486,1,0,0,0,1480,1482,
5,96,0,0,1481,1483,5,110,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1487,
1,0,0,0,1484,1487,5,87,0,0,1485,1487,5,51,0,0,1486,1480,1,0,0,0,1486,1484,
1,0,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1490,
5,94,0,0,1489,1476,1,0,0,0,1489,1478,1,0,0,0,1490,97,1,0,0,0,1491,1492,5,
107,0,0,1492,1506,3,64,32,0,1493,1494,5,141,0,0,1494,1495,5,3,0,0,1495,1500,
3,184,92,0,1496,1497,5,5,0,0,1497,1499,3,184,92,0,1498,1496,1,0,0,0,1499,
1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,
1500,1,0,0,0,1503,1504,5,4,0,0,1504,1506,1,0,0,0,1505,1491,1,0,0,0,1505,
1493,1,0,0,0,1506,99,1,0,0,0,1507,1509,5,138,0,0,1508,1510,5,29,0,0,1509,
1508,1,0,0,0,1509,1510,1,0,0,0,1510,1514,1,0,0,0,1511,1514,5,90,0,0,1512,
1514,5,68,0,0,1513,1507,1,0,0,0,1513,1511,1,0,0,0,1513,1512,1,0,0,0,1514,
101,1,0,0,0,1515,1517,3,48,24,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,
1518,1,0,0,0,1518,1521,5,140,0,0,1519,1520,5,108,0,0,1520,1522,7,8,0,0,1521,
1519,1,0,0,0,1521,1522,1,0,0,0,1522,1523,1,0,0,0,1523,1524,3,108,54,0,1524,
1527,5,130,0,0,1525,1528,3,184,92,0,1526,1528,3,104,52,0,1527,1525,1,0,0,
0,1527,1526,1,0,0,0,1528,1529,1,0,0,0,1529,1530,5,6,0,0,1530,1541,3,64,32,
0,1531,1534,5,5,0,0,1532,1535,3,184,92,0,1533,1535,3,104,52,0,1534,1532,
1,0,0,0,1534,1533,1,0,0,0,1535,1536,1,0,0,0,1536,1537,5,6,0,0,1537,1538,
3,64,32,0,1538,1540,1,0,0,0,1539,1531,1,0,0,0,1540,1543,1,0,0,0,1541,1539,
1,0,0,0,1541,1542,1,0,0,0,1542,1546,1,0,0,0,1543,1541,1,0,0,0,1544,1545,
5,147,0,0,1545,1547,3,64,32,0,1546,1544,1,0,0,0,1546,1547,1,0,0,0,1547,103,
1,0,0,0,1548,1549,5,3,0,0,1549,1554,3,184,92,0,1550,1551,5,5,0,0,1551,1553,
3,184,92,0,1552,1550,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,1555,
1,0,0,0,1555,1557,1,0,0,0,1556,1554,1,0,0,0,1557,1558,5,4,0,0,1558,105,1,
0,0,0,1559,1561,3,48,24,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,
1,0,0,0,1562,1565,5,140,0,0,1563,1564,5,108,0,0,1564,1566,7,8,0,0,1565,1563,
1,0,0,0,1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1568,3,108,54,0,1568,1571,
5,130,0,0,1569,1572,3,184,92,0,1570,1572,3,104,52,0,1571,1569,1,0,0,0,1571,
1570,1,0,0,0,1572,1573,1,0,0,0,1573,1574,5,6,0,0,1574,1585,3,64,32,0,1575,
1578,5,5,0,0,1576,1579,3,184,92,0,1577,1579,3,104,52,0,1578,1576,1,0,0,0,
1578,1577,1,0,0,0,1579,1580,1,0,0,0,1580,1581,5,6,0,0,1581,1582,3,64,32,
0,1582,1584,1,0,0,0,1583,1575,1,0,0,0,1584,1587,1,0,0,0,1585,1583,1,0,0,
0,1585,1586,1,0,0,0,1586,1590,1,0,0,0,1587,1585,1,0,0,0,1588,1589,5,147,
0,0,1589,1591,3,64,32,0,1590,1588,1,0,0,0,1590,1591,1,0,0,0,1591,1596,1,
0,0,0,1592,1594,3,130,65,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,
1,0,0,0,1595,1597,3,132,66,0,1596,1593,1,0,0,0,1596,1597,1,0,0,0,1597,107,
1,0,0,0,1598,1599,3,176,88,0,1599,1600,5,2,0,0,1600,1602,1,0,0,0,1601,1598,
1,0,0,0,1601,1602,1,0,0,0,1602,1603,1,0,0,0,1603,1606,3,178,89,0,1604,1605,
5,33,0,0,1605,1607,3,208,104,0,1606,1604,1,0,0,0,1606,1607,1,0,0,0,1607,
1613,1,0,0,0,1608,1609,5,85,0,0,1609,1610,5,40,0,0,1610,1614,3,190,95,0,
1611,1612,5,102,0,0,1612,1614,5,85,0,0,1613,1608,1,0,0,0,1613,1611,1,0,0,
0,1613,1614,1,0,0,0,1614,109,1,0,0,0,1615,1617,5,142,0,0,1616,1618,3,176,
88,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1621,1,0,0,0,1619,1620,5,91,
0,0,1620,1622,3,210,105,0,1621,1619,1,0,0,0,1621,1622,1,0,0,0,1622,111,1,
0,0,0,1623,1624,5,177,0,0,1624,1625,5,3,0,0,1625,1626,5,147,0,0,1626,1627,
3,64,32,0,1627,1628,5,4,0,0,1628,113,1,0,0,0,1629,1631,5,3,0,0,1630,1632,
3,212,106,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1643,1,0,0,0,1633,1634,
5,152,0,0,1634,1635,5,40,0,0,1635,1640,3,64,32,0,1636,1637,5,5,0,0,1637,
1639,3,64,32,0,1638,1636,1,0,0,0,1639,1642,1,0,0,0,1640,1638,1,0,0,0,1640,
1641,1,0,0,0,1641,1644,1,0,0,0,1642,1640,1,0,0,0,1643,1633,1,0,0,0,1643,
1644,1,0,0,0,1644,1645,1,0,0,0,1645,1646,5,109,0,0,1646,1647,5,40,0,0,1647,
1652,3,134,67,0,1648,1649,5,5,0,0,1649,1651,3,134,67,0,1650,1648,1,0,0,0,
1651,1654,1,0,0,0,1652,1650,1,0,0,0,1652,1653,1,0,0,0,1653,1656,1,0,0,0,
1654,1652,1,0,0,0,1655,1657,3,118,59,0,1656,1655,1,0,0,0,1656,1657,1,0,0,
0,1657,1658,1,0,0,0,1658,1659,5,4,0,0,1659,115,1,0,0,0,1660,1694,5,151,0,
0,1661,1695,3,206,103,0,1662,1664,5,3,0,0,1663,1665,3,212,106,0,1664,1663,
1,0,0,0,1664,1665,1,0,0,0,1665,1676,1,0,0,0,1666,1667,5,152,0,0,1667,1668,
5,40,0,0,1668,1673,3,64,32,0,1669,1670,5,5,0,0,1670,1672,3,64,32,0,1671,
1669,1,0,0,0,1672,1675,1,0,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,0,1674,
1677,1,0,0,0,1675,1673,1,0,0,0,1676,1666,1,0,0,0,1676,1677,1,0,0,0,1677,
1688,1,0,0,0,1678,1679,5,109,0,0,1679,1680,5,40,0,0,1680,1685,3,134,67,0,
1681,1682,5,5,0,0,1682,1684,3,134,67,0,1683,1681,1,0,0,0,1684,1687,1,0,0,
0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,1689,1,0,0,0,1687,1685,1,0,0,
0,1688,1678,1,0,0,0,1688,1689,1,0,0,0,1689,1691,1,0,0,0,1690,1692,3,118,
59,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,1695,5,4,
0,0,1694,1661,1,0,0,0,1694,1662,1,0,0,0,1695,117,1,0,0,0,1696,1704,3,120,
60,0,1697,1698,5,179,0,0,1698,1699,5,101,0,0,1699,1705,5,181,0,0,1700,1701,
5,156,0,0,1701,1705,5,126,0,0,1702,1705,5,78,0,0,1703,1705,5,180,0,0,1704,
1697,1,0,0,0,1704,1700,1,0,0,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1704,
1705,1,0,0,0,1705,119,1,0,0,0,1706,1713,7,17,0,0,1707,1714,3,142,71,0,1708,
1709,5,39,0,0,1709,1710,3,138,69,0,1710,1711,5,32,0,0,1711,1712,3,140,70,
0,1712,1714,1,0,0,0,1713,1707,1,0,0,0,1713,1708,1,0,0,0,1714,121,1,0,0,0,
1715,1716,3,214,107,0,1716,1726,5,3,0,0,1717,1722,3,64,32,0,1718,1719,5,
5,0,0,1719,1721,3,64,32,0,1720,1718,1,0,0,0,1721,1724,1,0,0,0,1722,1720,
1,0,0,0,1722,1723,1,0,0,0,1723,1727,1,0,0,0,1724,1722,1,0,0,0,1725,1727,
5,7,0,0,1726,1717,1,0,0,0,1726,1725,1,0,0,0,1727,1728,1,0,0,0,1728,1729,
5,4,0,0,1729,123,1,0,0,0,1730,1731,3,216,108,0,1731,1744,5,3,0,0,1732,1734,
5,62,0,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,0,1735,1740,
3,64,32,0,1736,1737,5,5,0,0,1737,1739,3,64,32,0,1738,1736,1,0,0,0,1739,1742,
1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1745,1,0,0,0,1742,1740,
1,0,0,0,1743,1745,5,7,0,0,1744,1733,1,0,0,0,1744,1743,1,0,0,0,1744,1745,
1,0,0,0,1745,1746,1,0,0,0,1746,1748,5,4,0,0,1747,1749,3,112,56,0,1748,1747,
1,0,0,0,1748,1749,1,0,0,0,1749,125,1,0,0,0,1750,1751,3,144,72,0,1751,1761,
5,3,0,0,1752,1757,3,64,32,0,1753,1754,5,5,0,0,1754,1756,3,64,32,0,1755,1753,
1,0,0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,1762,
1,0,0,0,1759,1757,1,0,0,0,1760,1762,5,7,0,0,1761,1752,1,0,0,0,1761,1760,
1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,0,0,1763,1765,5,4,0,0,1764,1766,
3,112,56,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,1767,1,0,0,0,1767,1770,
5,151,0,0,1768,1771,3,114,57,0,1769,1771,3,206,103,0,1770,1768,1,0,0,0,1770,
1769,1,0,0,0,1771,127,1,0,0,0,1772,1774,5,148,0,0,1773,1775,5,116,0,0,1774,
1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1781,3,54,27,0,1777,
1778,5,5,0,0,1778,1780,3,54,27,0,1779,1777,1,0,0,0,1780,1783,1,0,0,0,1781,
1779,1,0,0,0,1781,1782,1,0,0,0,1782,129,1,0,0,0,1783,1781,1,0,0,0,1784,1785,
5,109,0,0,1785,1786,5,40,0,0,1786,1791,3,134,67,0,1787,1788,5,5,0,0,1788,
1790,3,134,67,0,1789,1787,1,0,0,0,1790,1793,1,0,0,0,1791,1789,1,0,0,0,1791,
1792,1,0,0,0,1792,131,1,0,0,0,1793,1791,1,0,0,0,1794,1795,5,98,0,0,1795,
1798,3,64,32,0,1796,1797,7,18,0,0,1797,1799,3,64,32,0,1798,1796,1,0,0,0,
1798,1799,1,0,0,0,1799,133,1,0,0,0,1800,1803,3,64,32,0,1801,1802,5,45,0,
0,1802,1804,3,186,93,0,1803,1801,1,0,0,0,1803,1804,1,0,0,0,1804,1806,1,0,
0,0,1805,1807,3,136,68,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1810,1,
0,0,0,1808,1809,5,174,0,0,1809,1811,7,19,0,0,1810,1808,1,0,0,0,1810,1811,
1,0,0,0,1811,135,1,0,0,0,1812,1813,7,20,0,0,1813,137,1,0,0,0,1814,1815,3,
64,32,0,1815,1816,5,154,0,0,1816,1825,1,0,0,0,1817,1818,3,64,32,0,1818,1819,
5,157,0,0,1819,1825,1,0,0,0,1820,1821,5,156,0,0,1821,1825,5,126,0,0,1822,
1823,5,155,0,0,1823,1825,5,154,0,0,1824,1814,1,0,0,0,1824,1817,1,0,0,0,1824,
1820,1,0,0,0,1824,1822,1,0,0,0,1825,139,1,0,0,0,1826,1827,3,64,32,0,1827,
1828,5,154,0,0,1828,1837,1,0,0,0,1829,1830,3,64,32,0,1830,1831,5,157,0,0,
1831,1837,1,0,0,0,1832,1833,5,156,0,0,1833,1837,5,126,0,0,1834,1835,5,155,
0,0,1835,1837,5,157,0,0,1836,1826,1,0,0,0,1836,1829,1,0,0,0,1836,1832,1,
0,0,0,1836,1834,1,0,0,0,1837,141,1,0,0,0,1838,1839,3,64,32,0,1839,1840,5,
154,0,0,1840,1846,1,0,0,0,1841,1842,5,155,0,0,1842,1846,5,154,0,0,1843,1844,
5,156,0,0,1844,1846,5,126,0,0,1845,1838,1,0,0,0,1845,1841,1,0,0,0,1845,1843,
1,0,0,0,1846,143,1,0,0,0,1847,1848,7,21,0,0,1848,1849,5,3,0,0,1849,1850,
3,64,32,0,1850,1851,5,4,0,0,1851,1852,5,151,0,0,1852,1854,5,3,0,0,1853,1855,
3,150,75,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1858,
3,154,77,0,1857,1859,3,120,60,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,
1860,1,0,0,0,1860,1861,5,4,0,0,1861,1933,1,0,0,0,1862,1863,7,22,0,0,1863,
1864,5,3,0,0,1864,1865,5,4,0,0,1865,1866,5,151,0,0,1866,1868,5,3,0,0,1867,
1869,3,150,75,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,1871,1,0,0,0,1870,
1872,3,152,76,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1873,1,0,0,0,1873,
1933,5,4,0,0,1874,1875,7,23,0,0,1875,1876,5,3,0,0,1876,1877,5,4,0,0,1877,
1878,5,151,0,0,1878,1880,5,3,0,0,1879,1881,3,150,75,0,1880,1879,1,0,0,0,
1880,1881,1,0,0,0,1881,1882,1,0,0,0,1882,1883,3,154,77,0,1883,1884,5,4,0,
0,1884,1933,1,0,0,0,1885,1886,7,24,0,0,1886,1887,5,3,0,0,1887,1889,3,64,
32,0,1888,1890,3,146,73,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1892,
1,0,0,0,1891,1893,3,148,74,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,
1,0,0,0,1894,1895,5,4,0,0,1895,1896,5,151,0,0,1896,1898,5,3,0,0,1897,1899,
3,150,75,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,1901,
3,154,77,0,1901,1902,5,4,0,0,1902,1933,1,0,0,0,1903,1904,5,163,0,0,1904,
1905,5,3,0,0,1905,1906,3,64,32,0,1906,1907,5,5,0,0,1907,1908,3,34,17,0,1908,
1909,5,4,0,0,1909,1910,5,151,0,0,1910,1912,5,3,0,0,1911,1913,3,150,75,0,
1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1916,3,154,77,
0,1915,1917,3,120,60,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,
0,0,1918,1919,5,4,0,0,1919,1933,1,0,0,0,1920,1921,5,164,0,0,1921,1922,5,
3,0,0,1922,1923,3,64,32,0,1923,1924,5,4,0,0,1924,1925,5,151,0,0,1925,1927,
5,3,0,0,1926,1928,3,150,75,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,1929,
1,0,0,0,1929,1930,3,154,77,0,1930,1931,5,4,0,0,1931,1933,1,0,0,0,1932,1847,
1,0,0,0,1932,1862,1,0,0,0,1932,1874,1,0,0,0,1932,1885,1,0,0,0,1932,1903,
1,0,0,0,1932,1920,1,0,0,0,1933,145,1,0,0,0,1934,1935,5,5,0,0,1935,1936,3,
34,17,0,1936,147,1,0,0,0,1937,1938,5,5,0,0,1938,1939,3,34,17,0,1939,149,
1,0,0,0,1940,1941,5,152,0,0,1941,1943,5,40,0,0,1942,1944,3,64,32,0,1943,
1942,1,0,0,0,1944,1945,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,
151,1,0,0,0,1947,1948,5,109,0,0,1948,1950,5,40,0,0,1949,1951,3,64,32,0,1950,
1949,1,0,0,0,1951,1952,1,0,0,0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,
153,1,0,0,0,1954,1955,5,109,0,0,1955,1956,5,40,0,0,1956,1957,3,156,78,0,
1957,155,1,0,0,0,1958,1960,3,64,32,0,1959,1961,3,136,68,0,1960,1959,1,0,
0,0,1960,1961,1,0,0,0,1961,1969,1,0,0,0,1962,1963,5,5,0,0,1963,1965,3,64,
32,0,1964,1966,3,136,68,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1968,
1,0,0,0,1967,1962,1,0,0,0,1968,1971,1,0,0,0,1969,1967,1,0,0,0,1969,1970,
1,0,0,0,1970,157,1,0,0,0,1971,1969,1,0,0,0,1972,1973,3,80,40,0,1973,159,
1,0,0,0,1974,1975,3,80,40,0,1975,161,1,0,0,0,1976,1977,7,25,0,0,1977,163,
1,0,0,0,1978,1979,5,187,0,0,1979,165,1,0,0,0,1980,1983,3,64,32,0,1981,1983,
3,28,14,0,1982,1980,1,0,0,0,1982,1981,1,0,0,0,1983,167,1,0,0,0,1984,1985,
7,26,0,0,1985,169,1,0,0,0,1986,1987,7,27,0,0,1987,171,1,0,0,0,1988,1989,
3,220,110,0,1989,173,1,0,0,0,1990,1991,3,220,110,0,1991,175,1,0,0,0,1992,
1993,3,220,110,0,1993,177,1,0,0,0,1994,1995,3,220,110,0,1995,179,1,0,0,0,
1996,1997,3,220,110,0,1997,181,1,0,0,0,1998,1999,3,220,110,0,1999,183,1,
0,0,0,2000,2001,3,220,110,0,2001,185,1,0,0,0,2002,2003,3,220,110,0,2003,
187,1,0,0,0,2004,2005,3,220,110,0,2005,189,1,0,0,0,2006,2007,3,220,110,0,
2007,191,1,0,0,0,2008,2009,3,220,110,0,2009,193,1,0,0,0,2010,2011,3,220,
110,0,2011,195,1,0,0,0,2012,2013,3,220,110,0,2013,197,1,0,0,0,2014,2015,
3,220,110,0,2015,199,1,0,0,0,2016,2017,3,220,110,0,2017,201,1,0,0,0,2018,
2019,3,220,110,0,2019,203,1,0,0,0,2020,2021,3,220,110,0,2021,205,1,0,0,0,
2022,2023,3,220,110,0,2023,207,1,0,0,0,2024,2025,3,220,110,0,2025,209,1,
0,0,0,2026,2027,3,220,110,0,2027,211,1,0,0,0,2028,2029,3,220,110,0,2029,
213,1,0,0,0,2030,2031,3,220,110,0,2031,215,1,0,0,0,2032,2033,3,220,110,0,
2033,217,1,0,0,0,2034,2035,3,220,110,0,2035,219,1,0,0,0,2036,2044,5,184,
0,0,2037,2044,3,170,85,0,2038,2044,5,187,0,0,2039,2040,5,3,0,0,2040,2041,
3,220,110,0,2041,2042,5,4,0,0,2042,2044,1,0,0,0,2043,2036,1,0,0,0,2043,2037,
1,0,0,0,2043,2038,1,0,0,0,2043,2039,1,0,0,0,2044,221,1,0,0,0,289,225,233,
240,245,251,257,259,285,292,299,305,309,314,317,324,327,331,339,343,345,
349,353,357,360,367,373,379,384,395,401,405,409,412,416,422,427,436,443,
449,453,457,462,468,480,484,489,492,495,500,503,517,524,531,533,536,542,
547,555,560,575,581,591,596,606,610,612,616,621,623,631,637,642,649,660,
663,665,672,676,683,689,695,701,706,715,720,731,736,747,752,756,772,782,
787,795,807,812,820,827,830,837,840,843,847,855,860,870,875,884,891,895,
899,902,910,923,926,934,943,947,952,982,994,999,1011,1017,1024,1028,1038,
1041,1047,1053,1062,1065,1069,1071,1073,1082,1089,1096,1102,1107,1115,1120,
1129,1140,1147,1151,1154,1158,1168,1174,1176,1184,1191,1198,1203,1205,1211,
1220,1225,1232,1236,1238,1241,1249,1253,1256,1262,1266,1271,1278,1287,1291,
1293,1297,1306,1311,1313,1326,1329,1338,1349,1356,1359,1364,1368,1371,1374,
1379,1383,1388,1391,1394,1399,1403,1406,1413,1418,1427,1432,1435,1443,1447,
1455,1458,1460,1469,1472,1474,1478,1482,1486,1489,1500,1505,1509,1513,1516,
1521,1527,1534,1541,1546,1554,1560,1565,1571,1578,1585,1590,1593,1596,1601,
1606,1613,1617,1621,1631,1640,1643,1652,1656,1664,1673,1676,1685,1688,1691,
1694,1704,1713,1722,1726,1733,1740,1744,1748,1757,1761,1765,1770,1774,1781,
1791,1798,1803,1806,1810,1824,1836,1845,1854,1858,1868,1871,1880,1889,1892,
1898,1912,1916,1927,1932,1945,1952,1960,1965,1969,1982,2043];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export class SQLiteParser extends antlr4.Parser {

    static grammarFileName = "SQLiteParser.g4";
    static literalNames = [ null, "';'", "'.'", "'('", "')'", "','", "'='", 
                            "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", 
                            "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
                            "'>'", "'>='", "'=='", "'!='", "'<>'" ];
    static symbolicNames = [ null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                             "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", 
                             "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", 
                             "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", 
                             "EQ", "NOT_EQ1", "NOT_EQ2", "ABORT_", "ACTION_", 
                             "ADD_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_", 
                             "AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", 
                             "BEFORE_", "BEGIN_", "BETWEEN_", "BY_", "CASCADE_", 
                             "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
                             "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", 
                             "CROSS_", "CURRENT_DATE_", "CURRENT_TIME_", 
                             "CURRENT_TIMESTAMP_", "DATABASE_", "DEFAULT_", 
                             "DEFERRABLE_", "DEFERRED_", "DELETE_", "DESC_", 
                             "DETACH_", "DISTINCT_", "DROP_", "EACH_", "ELSE_", 
                             "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", 
                             "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", 
                             "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", 
                             "IF_", "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", 
                             "INDEXED_", "INITIALLY_", "INNER_", "INSERT_", 
                             "INSTEAD_", "INTERSECT_", "INTO_", "IS_", "ISNULL_", 
                             "JOIN_", "KEY_", "LEFT_", "LIKE_", "LIMIT_", 
                             "MATCH_", "NATURAL_", "NO_", "NOT_", "NOTNULL_", 
                             "NULL_", "OF_", "OFFSET_", "ON_", "OR_", "ORDER_", 
                             "OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", "QUERY_", 
                             "RAISE_", "RECURSIVE_", "REFERENCES_", "REGEXP_", 
                             "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", 
                             "RESTRICT_", "RIGHT_", "ROLLBACK_", "ROW_", 
                             "ROWS_", "SAVEPOINT_", "SELECT_", "SET_", "TABLE_", 
                             "TEMP_", "TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", 
                             "TRIGGER_", "UNION_", "UNIQUE_", "UPDATE_", 
                             "USING_", "VACUUM_", "VALUES_", "VIEW_", "VIRTUAL_", 
                             "WHEN_", "WHERE_", "WITH_", "WITHOUT_", "FIRST_VALUE_", 
                             "OVER_", "PARTITION_", "RANGE_", "PRECEDING_", 
                             "UNBOUNDED_", "CURRENT_", "FOLLOWING_", "CUME_DIST_", 
                             "DENSE_RANK_", "LAG_", "LAST_VALUE_", "LEAD_", 
                             "NTH_VALUE_", "NTILE_", "PERCENT_RANK_", "RANK_", 
                             "ROW_NUMBER_", "GENERATED_", "ALWAYS_", "STORED_", 
                             "TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", 
                             "LAST_", "FILTER_", "GROUPS_", "EXCLUDE_", 
                             "TIES_", "OTHERS_", "DO_", "NOTHING_", "IDENTIFIER", 
                             "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
                             "BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
                             "SPACES", "UNEXPECTED_CHAR" ];
    static ruleNames = [ "parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                         "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                         "rollback_stmt", "savepoint_stmt", "release_stmt", 
                         "create_index_stmt", "indexed_column", "create_table_stmt", 
                         "column_def", "type_name", "column_constraint", 
                         "signed_number", "table_constraint", "foreign_key_clause", 
                         "conflict_clause", "create_trigger_stmt", "create_view_stmt", 
                         "create_virtual_table_stmt", "with_clause", "cte_table_name", 
                         "recursive_cte", "common_table_expression", "delete_stmt", 
                         "delete_stmt_limited", "detach_stmt", "drop_stmt", 
                         "expr", "raise_function", "literal_value", "insert_stmt", 
                         "upsert_clause", "pragma_stmt", "pragma_value", 
                         "reindex_stmt", "select_stmt", "join_clause", "select_core", 
                         "factored_select_stmt", "simple_select_stmt", "compound_select_stmt", 
                         "table_or_subquery", "result_column", "join_operator", 
                         "join_constraint", "compound_operator", "update_stmt", 
                         "column_name_list", "update_stmt_limited", "qualified_table_name", 
                         "vacuum_stmt", "filter_clause", "window_defn", 
                         "over_clause", "frame_spec", "frame_clause", "simple_function_invocation", 
                         "aggregate_function_invocation", "window_function_invocation", 
                         "common_table_stmt", "order_by_stmt", "limit_stmt", 
                         "ordering_term", "asc_desc", "frame_left", "frame_right", 
                         "frame_single", "window_function", "of_OF_fset", 
                         "default_DEFAULT__value", "partition_by", "order_by_expr", 
                         "order_by_expr_asc_desc", "expr_asc_desc", "initial_select", 
                         "recursive__select", "unary_operator", "error_message", 
                         "module_argument", "column_alias", "keyword", "name", 
                         "function_name", "schema_name", "table_name", "table_or_index_name", 
                         "new_table_name", "column_name", "collation_name", 
                         "foreign_table", "index_name", "trigger_name", 
                         "view_name", "module_name", "pragma_name", "savepoint_name", 
                         "table_alias", "transaction_name", "window_name", 
                         "alias", "filename", "base_window_name", "simple_func", 
                         "aggregate_func", "table_function_name", "any_name" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SQLiteParser.ruleNames;
        this.literalNames = SQLiteParser.literalNames;
        this.symbolicNames = SQLiteParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 32:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 20);
    		case 1:
    			return this.precpred(this._ctx, 19);
    		case 2:
    			return this.precpred(this._ctx, 18);
    		case 3:
    			return this.precpred(this._ctx, 17);
    		case 4:
    			return this.precpred(this._ctx, 16);
    		case 5:
    			return this.precpred(this._ctx, 15);
    		case 6:
    			return this.precpred(this._ctx, 14);
    		case 7:
    			return this.precpred(this._ctx, 13);
    		case 8:
    			return this.precpred(this._ctx, 6);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 9);
    		case 11:
    			return this.precpred(this._ctx, 8);
    		case 12:
    			return this.precpred(this._ctx, 7);
    		case 13:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SQLiteParser.RULE_parse);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SQLiteParser.ATTACH_ - 35)) | (1 << (SQLiteParser.BEGIN_ - 35)) | (1 << (SQLiteParser.COMMIT_ - 35)) | (1 << (SQLiteParser.CREATE_ - 35)) | (1 << (SQLiteParser.DEFAULT_ - 35)) | (1 << (SQLiteParser.DELETE_ - 35)) | (1 << (SQLiteParser.DETACH_ - 35)) | (1 << (SQLiteParser.DROP_ - 35)) | (1 << (SQLiteParser.END_ - 35)))) !== 0) || _la===SQLiteParser.EXPLAIN_ || _la===SQLiteParser.INSERT_ || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (SQLiteParser.PRAGMA_ - 112)) | (1 << (SQLiteParser.REINDEX_ - 112)) | (1 << (SQLiteParser.RELEASE_ - 112)) | (1 << (SQLiteParser.REPLACE_ - 112)) | (1 << (SQLiteParser.ROLLBACK_ - 112)) | (1 << (SQLiteParser.SAVEPOINT_ - 112)) | (1 << (SQLiteParser.SELECT_ - 112)) | (1 << (SQLiteParser.UPDATE_ - 112)) | (1 << (SQLiteParser.VACUUM_ - 112)) | (1 << (SQLiteParser.VALUES_ - 112)))) !== 0) || _la===SQLiteParser.WITH_) {
	            this.state = 222;
	            this.sql_stmt_list();
	            this.state = 227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 228;
	        this.match(SQLiteParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_list() {
	    let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SQLiteParser.RULE_sql_stmt_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.SCOL) {
	            this.state = 230;
	            this.match(SQLiteParser.SCOL);
	            this.state = 235;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 236;
	        this.sql_stmt();
	        this.state = 245;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 238; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 237;
	                    this.match(SQLiteParser.SCOL);
	                    this.state = 240; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===SQLiteParser.SCOL);
	                this.state = 242;
	                this.sql_stmt(); 
	            }
	            this.state = 247;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	        this.state = 251;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 248;
	                this.match(SQLiteParser.SCOL); 
	            }
	            this.state = 253;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt() {
	    let localctx = new Sql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SQLiteParser.RULE_sql_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.EXPLAIN_) {
	            this.state = 254;
	            this.match(SQLiteParser.EXPLAIN_);
	            this.state = 257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.QUERY_) {
	                this.state = 255;
	                this.match(SQLiteParser.QUERY_);
	                this.state = 256;
	                this.match(SQLiteParser.PLAN_);
	            }

	        }

	        this.state = 285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 261;
	            this.alter_table_stmt();
	            break;

	        case 2:
	            this.state = 262;
	            this.analyze_stmt();
	            break;

	        case 3:
	            this.state = 263;
	            this.attach_stmt();
	            break;

	        case 4:
	            this.state = 264;
	            this.begin_stmt();
	            break;

	        case 5:
	            this.state = 265;
	            this.commit_stmt();
	            break;

	        case 6:
	            this.state = 266;
	            this.create_index_stmt();
	            break;

	        case 7:
	            this.state = 267;
	            this.create_table_stmt();
	            break;

	        case 8:
	            this.state = 268;
	            this.create_trigger_stmt();
	            break;

	        case 9:
	            this.state = 269;
	            this.create_view_stmt();
	            break;

	        case 10:
	            this.state = 270;
	            this.create_virtual_table_stmt();
	            break;

	        case 11:
	            this.state = 271;
	            this.delete_stmt();
	            break;

	        case 12:
	            this.state = 272;
	            this.delete_stmt_limited();
	            break;

	        case 13:
	            this.state = 273;
	            this.detach_stmt();
	            break;

	        case 14:
	            this.state = 274;
	            this.drop_stmt();
	            break;

	        case 15:
	            this.state = 275;
	            this.insert_stmt();
	            break;

	        case 16:
	            this.state = 276;
	            this.pragma_stmt();
	            break;

	        case 17:
	            this.state = 277;
	            this.reindex_stmt();
	            break;

	        case 18:
	            this.state = 278;
	            this.release_stmt();
	            break;

	        case 19:
	            this.state = 279;
	            this.rollback_stmt();
	            break;

	        case 20:
	            this.state = 280;
	            this.savepoint_stmt();
	            break;

	        case 21:
	            this.state = 281;
	            this.select_stmt();
	            break;

	        case 22:
	            this.state = 282;
	            this.update_stmt();
	            break;

	        case 23:
	            this.state = 283;
	            this.update_stmt_limited();
	            break;

	        case 24:
	            this.state = 284;
	            this.vacuum_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_stmt() {
	    let localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SQLiteParser.RULE_alter_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 287;
	        this.match(SQLiteParser.ALTER_);
	        this.state = 288;
	        this.match(SQLiteParser.TABLE_);
	        this.state = 292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 289;
	            this.schema_name();
	            this.state = 290;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 294;
	        this.table_name();
	        this.state = 317;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.RENAME_:
	            this.state = 295;
	            this.match(SQLiteParser.RENAME_);
	            this.state = 305;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 296;
	                this.match(SQLiteParser.TO_);
	                this.state = 297;
	                this.new_table_name();
	                break;

	            case 2:
	                this.state = 299;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	                if(la_===1) {
	                    this.state = 298;
	                    this.match(SQLiteParser.COLUMN_);

	                }
	                this.state = 301;
	                localctx.old_column_name = this.column_name();
	                this.state = 302;
	                this.match(SQLiteParser.TO_);
	                this.state = 303;
	                localctx.new_column_name = this.column_name();
	                break;

	            }
	            break;
	        case SQLiteParser.ADD_:
	            this.state = 307;
	            this.match(SQLiteParser.ADD_);
	            this.state = 309;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	            if(la_===1) {
	                this.state = 308;
	                this.match(SQLiteParser.COLUMN_);

	            }
	            this.state = 311;
	            this.column_def();
	            break;
	        case SQLiteParser.DROP_:
	            this.state = 312;
	            this.match(SQLiteParser.DROP_);
	            this.state = 314;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	            if(la_===1) {
	                this.state = 313;
	                this.match(SQLiteParser.COLUMN_);

	            }
	            this.state = 316;
	            this.column_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_stmt() {
	    let localctx = new Analyze_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SQLiteParser.RULE_analyze_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(SQLiteParser.ANALYZE_);
	        this.state = 327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        if(la_===1) {
	            this.state = 320;
	            this.schema_name();

	        } else if(la_===2) {
	            this.state = 324;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            if(la_===1) {
	                this.state = 321;
	                this.schema_name();
	                this.state = 322;
	                this.match(SQLiteParser.DOT);

	            }
	            this.state = 326;
	            this.table_or_index_name();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attach_stmt() {
	    let localctx = new Attach_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SQLiteParser.RULE_attach_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 329;
	        this.match(SQLiteParser.ATTACH_);
	        this.state = 331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 330;
	            this.match(SQLiteParser.DATABASE_);

	        }
	        this.state = 333;
	        this.expr(0);
	        this.state = 334;
	        this.match(SQLiteParser.AS_);
	        this.state = 335;
	        this.schema_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	begin_stmt() {
	    let localctx = new Begin_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SQLiteParser.RULE_begin_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this.match(SQLiteParser.BEGIN_);
	        this.state = 339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) !== 0)) {
	            this.state = 338;
	            _la = this._input.LA(1);
	            if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TRANSACTION_) {
	            this.state = 341;
	            this.match(SQLiteParser.TRANSACTION_);
	            this.state = 343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	            if(la_===1) {
	                this.state = 342;
	                this.transaction_name();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commit_stmt() {
	    let localctx = new Commit_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SQLiteParser.RULE_commit_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 347;
	        _la = this._input.LA(1);
	        if(!(_la===SQLiteParser.COMMIT_ || _la===SQLiteParser.END_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TRANSACTION_) {
	            this.state = 348;
	            this.match(SQLiteParser.TRANSACTION_);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollback_stmt() {
	    let localctx = new Rollback_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SQLiteParser.RULE_rollback_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this.match(SQLiteParser.ROLLBACK_);
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TRANSACTION_) {
	            this.state = 352;
	            this.match(SQLiteParser.TRANSACTION_);
	        }

	        this.state = 360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TO_) {
	            this.state = 355;
	            this.match(SQLiteParser.TO_);
	            this.state = 357;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 356;
	                this.match(SQLiteParser.SAVEPOINT_);

	            }
	            this.state = 359;
	            this.savepoint_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_stmt() {
	    let localctx = new Savepoint_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SQLiteParser.RULE_savepoint_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(SQLiteParser.SAVEPOINT_);
	        this.state = 363;
	        this.savepoint_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	release_stmt() {
	    let localctx = new Release_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SQLiteParser.RULE_release_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 365;
	        this.match(SQLiteParser.RELEASE_);
	        this.state = 367;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 366;
	            this.match(SQLiteParser.SAVEPOINT_);

	        }
	        this.state = 369;
	        this.savepoint_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_index_stmt() {
	    let localctx = new Create_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SQLiteParser.RULE_create_index_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        this.match(SQLiteParser.CREATE_);
	        this.state = 373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.UNIQUE_) {
	            this.state = 372;
	            this.match(SQLiteParser.UNIQUE_);
	        }

	        this.state = 375;
	        this.match(SQLiteParser.INDEX_);
	        this.state = 379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        if(la_===1) {
	            this.state = 376;
	            this.match(SQLiteParser.IF_);
	            this.state = 377;
	            this.match(SQLiteParser.NOT_);
	            this.state = 378;
	            this.match(SQLiteParser.EXISTS_);

	        }
	        this.state = 384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 381;
	            this.schema_name();
	            this.state = 382;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 386;
	        this.index_name();
	        this.state = 387;
	        this.match(SQLiteParser.ON_);
	        this.state = 388;
	        this.table_name();
	        this.state = 389;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 390;
	        this.indexed_column();
	        this.state = 395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 391;
	            this.match(SQLiteParser.COMMA);
	            this.state = 392;
	            this.indexed_column();
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 398;
	        this.match(SQLiteParser.CLOSE_PAR);
	        this.state = 401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WHERE_) {
	            this.state = 399;
	            this.match(SQLiteParser.WHERE_);
	            this.state = 400;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexed_column() {
	    let localctx = new Indexed_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SQLiteParser.RULE_indexed_column);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 405;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 403;
	            this.column_name();
	            break;

	        case 2:
	            this.state = 404;
	            this.expr(0);
	            break;

	        }
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.COLLATE_) {
	            this.state = 407;
	            this.match(SQLiteParser.COLLATE_);
	            this.state = 408;
	            this.collation_name();
	        }

	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ASC_ || _la===SQLiteParser.DESC_) {
	            this.state = 411;
	            this.asc_desc();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_stmt() {
	    let localctx = new Create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SQLiteParser.RULE_create_table_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.match(SQLiteParser.CREATE_);
	        this.state = 416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TEMP_ || _la===SQLiteParser.TEMPORARY_) {
	            this.state = 415;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.TEMP_ || _la===SQLiteParser.TEMPORARY_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 418;
	        this.match(SQLiteParser.TABLE_);
	        this.state = 422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 419;
	            this.match(SQLiteParser.IF_);
	            this.state = 420;
	            this.match(SQLiteParser.NOT_);
	            this.state = 421;
	            this.match(SQLiteParser.EXISTS_);

	        }
	        this.state = 427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 424;
	            this.schema_name();
	            this.state = 425;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 429;
	        this.table_name();
	        this.state = 453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.OPEN_PAR:
	            this.state = 430;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 431;
	            this.column_def();
	            this.state = 436;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 432;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 433;
	                    this.column_def(); 
	                }
	                this.state = 438;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	            }

	            this.state = 443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 439;
	                this.match(SQLiteParser.COMMA);
	                this.state = 440;
	                this.table_constraint();
	                this.state = 445;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 446;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.WITHOUT_) {
	                this.state = 447;
	                this.match(SQLiteParser.WITHOUT_);
	                this.state = 448;
	                localctx.row_ROW_ID = this.match(SQLiteParser.IDENTIFIER);
	            }

	            break;
	        case SQLiteParser.AS_:
	            this.state = 451;
	            this.match(SQLiteParser.AS_);
	            this.state = 452;
	            this.select_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_def() {
	    let localctx = new Column_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SQLiteParser.RULE_column_def);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.column_name();
	        this.state = 457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 456;
	            this.type_name();

	        }
	        this.state = 462;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 459;
	                this.column_constraint(); 
	            }
	            this.state = 464;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SQLiteParser.RULE_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466; 
	        this._errHandler.sync(this);
	        var _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 465;
	        		this.name();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 468; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,42, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 470;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 471;
	            this.signed_number();
	            this.state = 472;
	            this.match(SQLiteParser.CLOSE_PAR);

	        } else if(la_===2) {
	            this.state = 474;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 475;
	            this.signed_number();
	            this.state = 476;
	            this.match(SQLiteParser.COMMA);
	            this.state = 477;
	            this.signed_number();
	            this.state = 478;
	            this.match(SQLiteParser.CLOSE_PAR);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_constraint() {
	    let localctx = new Column_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SQLiteParser.RULE_column_constraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.CONSTRAINT_) {
	            this.state = 482;
	            this.match(SQLiteParser.CONSTRAINT_);
	            this.state = 483;
	            this.name();
	        }

	        this.state = 533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.PRIMARY_:
	            this.state = 486;
	            this.match(SQLiteParser.PRIMARY_);
	            this.state = 487;
	            this.match(SQLiteParser.KEY_);
	            this.state = 489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ASC_ || _la===SQLiteParser.DESC_) {
	                this.state = 488;
	                this.asc_desc();
	            }

	            this.state = 492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ON_) {
	                this.state = 491;
	                this.conflict_clause();
	            }

	            this.state = 495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.AUTOINCREMENT_) {
	                this.state = 494;
	                this.match(SQLiteParser.AUTOINCREMENT_);
	            }

	            break;
	        case SQLiteParser.NOT_:
	        case SQLiteParser.UNIQUE_:
	            this.state = 500;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SQLiteParser.NOT_:
	                this.state = 497;
	                this.match(SQLiteParser.NOT_);
	                this.state = 498;
	                this.match(SQLiteParser.NULL_);
	                break;
	            case SQLiteParser.UNIQUE_:
	                this.state = 499;
	                this.match(SQLiteParser.UNIQUE_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 503;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ON_) {
	                this.state = 502;
	                this.conflict_clause();
	            }

	            break;
	        case SQLiteParser.CHECK_:
	            this.state = 505;
	            this.match(SQLiteParser.CHECK_);
	            this.state = 506;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 507;
	            this.expr(0);
	            this.state = 508;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.DEFAULT_:
	            this.state = 510;
	            this.match(SQLiteParser.DEFAULT_);
	            this.state = 517;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 511;
	                this.signed_number();
	                break;

	            case 2:
	                this.state = 512;
	                this.literal_value();
	                break;

	            case 3:
	                this.state = 513;
	                this.match(SQLiteParser.OPEN_PAR);
	                this.state = 514;
	                this.expr(0);
	                this.state = 515;
	                this.match(SQLiteParser.CLOSE_PAR);
	                break;

	            }
	            break;
	        case SQLiteParser.COLLATE_:
	            this.state = 519;
	            this.match(SQLiteParser.COLLATE_);
	            this.state = 520;
	            this.collation_name();
	            break;
	        case SQLiteParser.REFERENCES_:
	            this.state = 521;
	            this.foreign_key_clause();
	            break;
	        case SQLiteParser.AS_:
	        case SQLiteParser.GENERATED_:
	            this.state = 524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.GENERATED_) {
	                this.state = 522;
	                this.match(SQLiteParser.GENERATED_);
	                this.state = 523;
	                this.match(SQLiteParser.ALWAYS_);
	            }

	            this.state = 526;
	            this.match(SQLiteParser.AS_);
	            this.state = 527;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 528;
	            this.expr(0);
	            this.state = 529;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.VIRTUAL_ || _la===SQLiteParser.STORED_) {
	                this.state = 530;
	                _la = this._input.LA(1);
	                if(!(_la===SQLiteParser.VIRTUAL_ || _la===SQLiteParser.STORED_)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SQLiteParser.RULE_signed_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.PLUS || _la===SQLiteParser.MINUS) {
	            this.state = 535;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.PLUS || _la===SQLiteParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 538;
	        this.match(SQLiteParser.NUMERIC_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_constraint() {
	    let localctx = new Table_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SQLiteParser.RULE_table_constraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.CONSTRAINT_) {
	            this.state = 540;
	            this.match(SQLiteParser.CONSTRAINT_);
	            this.state = 541;
	            this.name();
	        }

	        this.state = 581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.PRIMARY_:
	        case SQLiteParser.UNIQUE_:
	            this.state = 547;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SQLiteParser.PRIMARY_:
	                this.state = 544;
	                this.match(SQLiteParser.PRIMARY_);
	                this.state = 545;
	                this.match(SQLiteParser.KEY_);
	                break;
	            case SQLiteParser.UNIQUE_:
	                this.state = 546;
	                this.match(SQLiteParser.UNIQUE_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 549;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 550;
	            this.indexed_column();
	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 551;
	                this.match(SQLiteParser.COMMA);
	                this.state = 552;
	                this.indexed_column();
	                this.state = 557;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 558;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ON_) {
	                this.state = 559;
	                this.conflict_clause();
	            }

	            break;
	        case SQLiteParser.CHECK_:
	            this.state = 562;
	            this.match(SQLiteParser.CHECK_);
	            this.state = 563;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 564;
	            this.expr(0);
	            this.state = 565;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.FOREIGN_:
	            this.state = 567;
	            this.match(SQLiteParser.FOREIGN_);
	            this.state = 568;
	            this.match(SQLiteParser.KEY_);
	            this.state = 569;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 570;
	            this.column_name();
	            this.state = 575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 571;
	                this.match(SQLiteParser.COMMA);
	                this.state = 572;
	                this.column_name();
	                this.state = 577;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 578;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 579;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_key_clause() {
	    let localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SQLiteParser.RULE_foreign_key_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.match(SQLiteParser.REFERENCES_);
	        this.state = 584;
	        this.foreign_table();
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.OPEN_PAR) {
	            this.state = 585;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 586;
	            this.column_name();
	            this.state = 591;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 587;
	                this.match(SQLiteParser.COMMA);
	                this.state = 588;
	                this.column_name();
	                this.state = 593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 594;
	            this.match(SQLiteParser.CLOSE_PAR);
	        }

	        this.state = 612;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.MATCH_ || _la===SQLiteParser.ON_) {
	            this.state = 610;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SQLiteParser.ON_:
	                this.state = 598;
	                this.match(SQLiteParser.ON_);
	                this.state = 599;
	                _la = this._input.LA(1);
	                if(!(_la===SQLiteParser.DELETE_ || _la===SQLiteParser.UPDATE_)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 606;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SQLiteParser.SET_:
	                    this.state = 600;
	                    this.match(SQLiteParser.SET_);
	                    this.state = 601;
	                    _la = this._input.LA(1);
	                    if(!(_la===SQLiteParser.DEFAULT_ || _la===SQLiteParser.NULL_)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                case SQLiteParser.CASCADE_:
	                    this.state = 602;
	                    this.match(SQLiteParser.CASCADE_);
	                    break;
	                case SQLiteParser.RESTRICT_:
	                    this.state = 603;
	                    this.match(SQLiteParser.RESTRICT_);
	                    break;
	                case SQLiteParser.NO_:
	                    this.state = 604;
	                    this.match(SQLiteParser.NO_);
	                    this.state = 605;
	                    this.match(SQLiteParser.ACTION_);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case SQLiteParser.MATCH_:
	                this.state = 608;
	                this.match(SQLiteParser.MATCH_);
	                this.state = 609;
	                this.name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        if(la_===1) {
	            this.state = 616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.NOT_) {
	                this.state = 615;
	                this.match(SQLiteParser.NOT_);
	            }

	            this.state = 618;
	            this.match(SQLiteParser.DEFERRABLE_);
	            this.state = 621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.INITIALLY_) {
	                this.state = 619;
	                this.match(SQLiteParser.INITIALLY_);
	                this.state = 620;
	                _la = this._input.LA(1);
	                if(!(_la===SQLiteParser.DEFERRED_ || _la===SQLiteParser.IMMEDIATE_)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conflict_clause() {
	    let localctx = new Conflict_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SQLiteParser.RULE_conflict_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.match(SQLiteParser.ON_);
	        this.state = 626;
	        this.match(SQLiteParser.CONFLICT_);
	        this.state = 627;
	        _la = this._input.LA(1);
	        if(!(_la===SQLiteParser.ABORT_ || _la===SQLiteParser.FAIL_ || _la===SQLiteParser.IGNORE_ || _la===SQLiteParser.REPLACE_ || _la===SQLiteParser.ROLLBACK_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_trigger_stmt() {
	    let localctx = new Create_trigger_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SQLiteParser.RULE_create_trigger_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(SQLiteParser.CREATE_);
	        this.state = 631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TEMP_ || _la===SQLiteParser.TEMPORARY_) {
	            this.state = 630;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.TEMP_ || _la===SQLiteParser.TEMPORARY_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 633;
	        this.match(SQLiteParser.TRIGGER_);
	        this.state = 637;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 634;
	            this.match(SQLiteParser.IF_);
	            this.state = 635;
	            this.match(SQLiteParser.NOT_);
	            this.state = 636;
	            this.match(SQLiteParser.EXISTS_);

	        }
	        this.state = 642;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        if(la_===1) {
	            this.state = 639;
	            this.schema_name();
	            this.state = 640;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 644;
	        this.trigger_name();
	        this.state = 649;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case SQLiteParser.BEFORE_:
	        	this.state = 645;
	        	this.match(SQLiteParser.BEFORE_);
	        	break;
	        case SQLiteParser.AFTER_:
	        	this.state = 646;
	        	this.match(SQLiteParser.AFTER_);
	        	break;
	        case SQLiteParser.INSTEAD_:
	        	this.state = 647;
	        	this.match(SQLiteParser.INSTEAD_);
	        	this.state = 648;
	        	this.match(SQLiteParser.OF_);
	        	break;
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.UPDATE_:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.DELETE_:
	            this.state = 651;
	            this.match(SQLiteParser.DELETE_);
	            break;
	        case SQLiteParser.INSERT_:
	            this.state = 652;
	            this.match(SQLiteParser.INSERT_);
	            break;
	        case SQLiteParser.UPDATE_:
	            this.state = 653;
	            this.match(SQLiteParser.UPDATE_);
	            this.state = 663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.OF_) {
	                this.state = 654;
	                this.match(SQLiteParser.OF_);
	                this.state = 655;
	                this.column_name();
	                this.state = 660;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 656;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 657;
	                    this.column_name();
	                    this.state = 662;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 667;
	        this.match(SQLiteParser.ON_);
	        this.state = 668;
	        this.table_name();
	        this.state = 672;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.FOR_) {
	            this.state = 669;
	            this.match(SQLiteParser.FOR_);
	            this.state = 670;
	            this.match(SQLiteParser.EACH_);
	            this.state = 671;
	            this.match(SQLiteParser.ROW_);
	        }

	        this.state = 676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WHEN_) {
	            this.state = 674;
	            this.match(SQLiteParser.WHEN_);
	            this.state = 675;
	            this.expr(0);
	        }

	        this.state = 678;
	        this.match(SQLiteParser.BEGIN_);
	        this.state = 687; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 683;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 679;
	                this.update_stmt();
	                break;

	            case 2:
	                this.state = 680;
	                this.insert_stmt();
	                break;

	            case 3:
	                this.state = 681;
	                this.delete_stmt();
	                break;

	            case 4:
	                this.state = 682;
	                this.select_stmt();
	                break;

	            }
	            this.state = 685;
	            this.match(SQLiteParser.SCOL);
	            this.state = 689; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SQLiteParser.DEFAULT_ || _la===SQLiteParser.DELETE_ || _la===SQLiteParser.INSERT_ || ((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (SQLiteParser.REPLACE_ - 122)) | (1 << (SQLiteParser.SELECT_ - 122)) | (1 << (SQLiteParser.UPDATE_ - 122)) | (1 << (SQLiteParser.VALUES_ - 122)) | (1 << (SQLiteParser.WITH_ - 122)))) !== 0));
	        this.state = 691;
	        this.match(SQLiteParser.END_);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_view_stmt() {
	    let localctx = new Create_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SQLiteParser.RULE_create_view_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this.match(SQLiteParser.CREATE_);
	        this.state = 695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.TEMP_ || _la===SQLiteParser.TEMPORARY_) {
	            this.state = 694;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.TEMP_ || _la===SQLiteParser.TEMPORARY_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 697;
	        this.match(SQLiteParser.VIEW_);
	        this.state = 701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 698;
	            this.match(SQLiteParser.IF_);
	            this.state = 699;
	            this.match(SQLiteParser.NOT_);
	            this.state = 700;
	            this.match(SQLiteParser.EXISTS_);

	        }
	        this.state = 706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 703;
	            this.schema_name();
	            this.state = 704;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 708;
	        this.view_name();
	        this.state = 720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.OPEN_PAR) {
	            this.state = 709;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 710;
	            this.column_name();
	            this.state = 715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 711;
	                this.match(SQLiteParser.COMMA);
	                this.state = 712;
	                this.column_name();
	                this.state = 717;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 718;
	            this.match(SQLiteParser.CLOSE_PAR);
	        }

	        this.state = 722;
	        this.match(SQLiteParser.AS_);
	        this.state = 723;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_virtual_table_stmt() {
	    let localctx = new Create_virtual_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SQLiteParser.RULE_create_virtual_table_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 725;
	        this.match(SQLiteParser.CREATE_);
	        this.state = 726;
	        this.match(SQLiteParser.VIRTUAL_);
	        this.state = 727;
	        this.match(SQLiteParser.TABLE_);
	        this.state = 731;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 728;
	            this.match(SQLiteParser.IF_);
	            this.state = 729;
	            this.match(SQLiteParser.NOT_);
	            this.state = 730;
	            this.match(SQLiteParser.EXISTS_);

	        }
	        this.state = 736;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        if(la_===1) {
	            this.state = 733;
	            this.schema_name();
	            this.state = 734;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 738;
	        this.table_name();
	        this.state = 739;
	        this.match(SQLiteParser.USING_);
	        this.state = 740;
	        this.module_name();
	        this.state = 752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.OPEN_PAR) {
	            this.state = 741;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 742;
	            this.module_argument();
	            this.state = 747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 743;
	                this.match(SQLiteParser.COMMA);
	                this.state = 744;
	                this.module_argument();
	                this.state = 749;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 750;
	            this.match(SQLiteParser.CLOSE_PAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_clause() {
	    let localctx = new With_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SQLiteParser.RULE_with_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this.match(SQLiteParser.WITH_);
	        this.state = 756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 755;
	            this.match(SQLiteParser.RECURSIVE_);

	        }
	        this.state = 758;
	        this.cte_table_name();
	        this.state = 759;
	        this.match(SQLiteParser.AS_);
	        this.state = 760;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 761;
	        this.select_stmt();
	        this.state = 762;
	        this.match(SQLiteParser.CLOSE_PAR);
	        this.state = 772;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 763;
	            this.match(SQLiteParser.COMMA);
	            this.state = 764;
	            this.cte_table_name();
	            this.state = 765;
	            this.match(SQLiteParser.AS_);
	            this.state = 766;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 767;
	            this.select_stmt();
	            this.state = 768;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cte_table_name() {
	    let localctx = new Cte_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SQLiteParser.RULE_cte_table_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.table_name();
	        this.state = 787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.OPEN_PAR) {
	            this.state = 776;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 777;
	            this.column_name();
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 778;
	                this.match(SQLiteParser.COMMA);
	                this.state = 779;
	                this.column_name();
	                this.state = 784;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 785;
	            this.match(SQLiteParser.CLOSE_PAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recursive_cte() {
	    let localctx = new Recursive_cteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SQLiteParser.RULE_recursive_cte);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this.cte_table_name();
	        this.state = 790;
	        this.match(SQLiteParser.AS_);
	        this.state = 791;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 792;
	        this.initial_select();
	        this.state = 793;
	        this.match(SQLiteParser.UNION_);
	        this.state = 795;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ALL_) {
	            this.state = 794;
	            this.match(SQLiteParser.ALL_);
	        }

	        this.state = 797;
	        this.recursive__select();
	        this.state = 798;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_expression() {
	    let localctx = new Common_table_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SQLiteParser.RULE_common_table_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.table_name();
	        this.state = 812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.OPEN_PAR) {
	            this.state = 801;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 802;
	            this.column_name();
	            this.state = 807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 803;
	                this.match(SQLiteParser.COMMA);
	                this.state = 804;
	                this.column_name();
	                this.state = 809;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 810;
	            this.match(SQLiteParser.CLOSE_PAR);
	        }

	        this.state = 814;
	        this.match(SQLiteParser.AS_);
	        this.state = 815;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 816;
	        this.select_stmt();
	        this.state = 817;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt() {
	    let localctx = new Delete_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SQLiteParser.RULE_delete_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 819;
	            this.with_clause();
	        }

	        this.state = 822;
	        this.match(SQLiteParser.DELETE_);
	        this.state = 823;
	        this.match(SQLiteParser.FROM_);
	        this.state = 824;
	        this.qualified_table_name();
	        this.state = 827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WHERE_) {
	            this.state = 825;
	            this.match(SQLiteParser.WHERE_);
	            this.state = 826;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt_limited() {
	    let localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SQLiteParser.RULE_delete_stmt_limited);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 829;
	            this.with_clause();
	        }

	        this.state = 832;
	        this.match(SQLiteParser.DELETE_);
	        this.state = 833;
	        this.match(SQLiteParser.FROM_);
	        this.state = 834;
	        this.qualified_table_name();
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WHERE_) {
	            this.state = 835;
	            this.match(SQLiteParser.WHERE_);
	            this.state = 836;
	            this.expr(0);
	        }

	        this.state = 843;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.LIMIT_ || _la===SQLiteParser.ORDER_) {
	            this.state = 840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ORDER_) {
	                this.state = 839;
	                this.order_by_stmt();
	            }

	            this.state = 842;
	            this.limit_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	detach_stmt() {
	    let localctx = new Detach_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SQLiteParser.RULE_detach_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.match(SQLiteParser.DETACH_);
	        this.state = 847;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 846;
	            this.match(SQLiteParser.DATABASE_);

	        }
	        this.state = 849;
	        this.schema_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_stmt() {
	    let localctx = new Drop_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SQLiteParser.RULE_drop_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.match(SQLiteParser.DROP_);
	        this.state = 852;
	        localctx.object = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===SQLiteParser.INDEX_ || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (SQLiteParser.TABLE_ - 131)) | (1 << (SQLiteParser.TRIGGER_ - 131)) | (1 << (SQLiteParser.VIEW_ - 131)))) !== 0))) {
	            localctx.object = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 853;
	            this.match(SQLiteParser.IF_);
	            this.state = 854;
	            this.match(SQLiteParser.EXISTS_);

	        }
	        this.state = 860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        if(la_===1) {
	            this.state = 857;
	            this.schema_name();
	            this.state = 858;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 862;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 64;
	    this.enterRecursionRule(localctx, 64, SQLiteParser.RULE_expr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 865;
	            this.literal_value();
	            break;

	        case 2:
	            this.state = 866;
	            this.match(SQLiteParser.BIND_PARAMETER);
	            break;

	        case 3:
	            this.state = 875;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 870;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	                if(la_===1) {
	                    this.state = 867;
	                    this.schema_name();
	                    this.state = 868;
	                    this.match(SQLiteParser.DOT);

	                }
	                this.state = 872;
	                this.table_name();
	                this.state = 873;
	                this.match(SQLiteParser.DOT);

	            }
	            this.state = 877;
	            this.column_name();
	            break;

	        case 4:
	            this.state = 878;
	            this.unary_operator();
	            this.state = 879;
	            this.expr(21);
	            break;

	        case 5:
	            this.state = 881;
	            this.function_name();
	            this.state = 882;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 895;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case SQLiteParser.OPEN_PAR:
	            case SQLiteParser.PLUS:
	            case SQLiteParser.MINUS:
	            case SQLiteParser.TILDE:
	            case SQLiteParser.ABORT_:
	            case SQLiteParser.ACTION_:
	            case SQLiteParser.ADD_:
	            case SQLiteParser.AFTER_:
	            case SQLiteParser.ALL_:
	            case SQLiteParser.ALTER_:
	            case SQLiteParser.ANALYZE_:
	            case SQLiteParser.AND_:
	            case SQLiteParser.AS_:
	            case SQLiteParser.ASC_:
	            case SQLiteParser.ATTACH_:
	            case SQLiteParser.AUTOINCREMENT_:
	            case SQLiteParser.BEFORE_:
	            case SQLiteParser.BEGIN_:
	            case SQLiteParser.BETWEEN_:
	            case SQLiteParser.BY_:
	            case SQLiteParser.CASCADE_:
	            case SQLiteParser.CASE_:
	            case SQLiteParser.CAST_:
	            case SQLiteParser.CHECK_:
	            case SQLiteParser.COLLATE_:
	            case SQLiteParser.COLUMN_:
	            case SQLiteParser.COMMIT_:
	            case SQLiteParser.CONFLICT_:
	            case SQLiteParser.CONSTRAINT_:
	            case SQLiteParser.CREATE_:
	            case SQLiteParser.CROSS_:
	            case SQLiteParser.CURRENT_DATE_:
	            case SQLiteParser.CURRENT_TIME_:
	            case SQLiteParser.CURRENT_TIMESTAMP_:
	            case SQLiteParser.DATABASE_:
	            case SQLiteParser.DEFAULT_:
	            case SQLiteParser.DEFERRABLE_:
	            case SQLiteParser.DEFERRED_:
	            case SQLiteParser.DELETE_:
	            case SQLiteParser.DESC_:
	            case SQLiteParser.DETACH_:
	            case SQLiteParser.DISTINCT_:
	            case SQLiteParser.DROP_:
	            case SQLiteParser.EACH_:
	            case SQLiteParser.ELSE_:
	            case SQLiteParser.END_:
	            case SQLiteParser.ESCAPE_:
	            case SQLiteParser.EXCEPT_:
	            case SQLiteParser.EXCLUSIVE_:
	            case SQLiteParser.EXISTS_:
	            case SQLiteParser.EXPLAIN_:
	            case SQLiteParser.FAIL_:
	            case SQLiteParser.FOR_:
	            case SQLiteParser.FOREIGN_:
	            case SQLiteParser.FROM_:
	            case SQLiteParser.FULL_:
	            case SQLiteParser.GLOB_:
	            case SQLiteParser.GROUP_:
	            case SQLiteParser.HAVING_:
	            case SQLiteParser.IF_:
	            case SQLiteParser.IGNORE_:
	            case SQLiteParser.IMMEDIATE_:
	            case SQLiteParser.IN_:
	            case SQLiteParser.INDEX_:
	            case SQLiteParser.INDEXED_:
	            case SQLiteParser.INITIALLY_:
	            case SQLiteParser.INNER_:
	            case SQLiteParser.INSERT_:
	            case SQLiteParser.INSTEAD_:
	            case SQLiteParser.INTERSECT_:
	            case SQLiteParser.INTO_:
	            case SQLiteParser.IS_:
	            case SQLiteParser.ISNULL_:
	            case SQLiteParser.JOIN_:
	            case SQLiteParser.KEY_:
	            case SQLiteParser.LEFT_:
	            case SQLiteParser.LIKE_:
	            case SQLiteParser.LIMIT_:
	            case SQLiteParser.MATCH_:
	            case SQLiteParser.NATURAL_:
	            case SQLiteParser.NO_:
	            case SQLiteParser.NOT_:
	            case SQLiteParser.NOTNULL_:
	            case SQLiteParser.NULL_:
	            case SQLiteParser.OF_:
	            case SQLiteParser.OFFSET_:
	            case SQLiteParser.ON_:
	            case SQLiteParser.OR_:
	            case SQLiteParser.ORDER_:
	            case SQLiteParser.OUTER_:
	            case SQLiteParser.PLAN_:
	            case SQLiteParser.PRAGMA_:
	            case SQLiteParser.PRIMARY_:
	            case SQLiteParser.QUERY_:
	            case SQLiteParser.RAISE_:
	            case SQLiteParser.RECURSIVE_:
	            case SQLiteParser.REFERENCES_:
	            case SQLiteParser.REGEXP_:
	            case SQLiteParser.REINDEX_:
	            case SQLiteParser.RELEASE_:
	            case SQLiteParser.RENAME_:
	            case SQLiteParser.REPLACE_:
	            case SQLiteParser.RESTRICT_:
	            case SQLiteParser.RIGHT_:
	            case SQLiteParser.ROLLBACK_:
	            case SQLiteParser.ROW_:
	            case SQLiteParser.ROWS_:
	            case SQLiteParser.SAVEPOINT_:
	            case SQLiteParser.SELECT_:
	            case SQLiteParser.SET_:
	            case SQLiteParser.TABLE_:
	            case SQLiteParser.TEMP_:
	            case SQLiteParser.TEMPORARY_:
	            case SQLiteParser.THEN_:
	            case SQLiteParser.TO_:
	            case SQLiteParser.TRANSACTION_:
	            case SQLiteParser.TRIGGER_:
	            case SQLiteParser.UNION_:
	            case SQLiteParser.UNIQUE_:
	            case SQLiteParser.UPDATE_:
	            case SQLiteParser.USING_:
	            case SQLiteParser.VACUUM_:
	            case SQLiteParser.VALUES_:
	            case SQLiteParser.VIEW_:
	            case SQLiteParser.VIRTUAL_:
	            case SQLiteParser.WHEN_:
	            case SQLiteParser.WHERE_:
	            case SQLiteParser.WITH_:
	            case SQLiteParser.WITHOUT_:
	            case SQLiteParser.FIRST_VALUE_:
	            case SQLiteParser.OVER_:
	            case SQLiteParser.PARTITION_:
	            case SQLiteParser.RANGE_:
	            case SQLiteParser.PRECEDING_:
	            case SQLiteParser.UNBOUNDED_:
	            case SQLiteParser.CURRENT_:
	            case SQLiteParser.FOLLOWING_:
	            case SQLiteParser.CUME_DIST_:
	            case SQLiteParser.DENSE_RANK_:
	            case SQLiteParser.LAG_:
	            case SQLiteParser.LAST_VALUE_:
	            case SQLiteParser.LEAD_:
	            case SQLiteParser.NTH_VALUE_:
	            case SQLiteParser.NTILE_:
	            case SQLiteParser.PERCENT_RANK_:
	            case SQLiteParser.RANK_:
	            case SQLiteParser.ROW_NUMBER_:
	            case SQLiteParser.GENERATED_:
	            case SQLiteParser.ALWAYS_:
	            case SQLiteParser.STORED_:
	            case SQLiteParser.TRUE_:
	            case SQLiteParser.FALSE_:
	            case SQLiteParser.WINDOW_:
	            case SQLiteParser.NULLS_:
	            case SQLiteParser.FIRST_:
	            case SQLiteParser.LAST_:
	            case SQLiteParser.FILTER_:
	            case SQLiteParser.GROUPS_:
	            case SQLiteParser.EXCLUDE_:
	            case SQLiteParser.IDENTIFIER:
	            case SQLiteParser.NUMERIC_LITERAL:
	            case SQLiteParser.BIND_PARAMETER:
	            case SQLiteParser.STRING_LITERAL:
	            case SQLiteParser.BLOB_LITERAL:
	            	this.state = 884;
	            	this._errHandler.sync(this);
	            	var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	            	if(la_===1) {
	            	    this.state = 883;
	            	    this.match(SQLiteParser.DISTINCT_);

	            	}
	            	this.state = 886;
	            	this.expr(0);
	            	this.state = 891;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===SQLiteParser.COMMA) {
	            	    this.state = 887;
	            	    this.match(SQLiteParser.COMMA);
	            	    this.state = 888;
	            	    this.expr(0);
	            	    this.state = 893;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case SQLiteParser.STAR:
	            	this.state = 894;
	            	this.match(SQLiteParser.STAR);
	            	break;
	            case SQLiteParser.CLOSE_PAR:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 897;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 899;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	            if(la_===1) {
	                this.state = 898;
	                this.filter_clause();

	            }
	            this.state = 902;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            if(la_===1) {
	                this.state = 901;
	                this.over_clause();

	            }
	            break;

	        case 6:
	            this.state = 904;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 905;
	            this.expr(0);
	            this.state = 910;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 906;
	                this.match(SQLiteParser.COMMA);
	                this.state = 907;
	                this.expr(0);
	                this.state = 912;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 913;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;

	        case 7:
	            this.state = 915;
	            this.match(SQLiteParser.CAST_);
	            this.state = 916;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 917;
	            this.expr(0);
	            this.state = 918;
	            this.match(SQLiteParser.AS_);
	            this.state = 919;
	            this.type_name();
	            this.state = 920;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;

	        case 8:
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.EXISTS_ || _la===SQLiteParser.NOT_) {
	                this.state = 923;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SQLiteParser.NOT_) {
	                    this.state = 922;
	                    this.match(SQLiteParser.NOT_);
	                }

	                this.state = 925;
	                this.match(SQLiteParser.EXISTS_);
	            }

	            this.state = 928;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 929;
	            this.select_stmt();
	            this.state = 930;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;

	        case 9:
	            this.state = 932;
	            this.match(SQLiteParser.CASE_);
	            this.state = 934;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	            if(la_===1) {
	                this.state = 933;
	                this.expr(0);

	            }
	            this.state = 941; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 936;
	                this.match(SQLiteParser.WHEN_);
	                this.state = 937;
	                this.expr(0);
	                this.state = 938;
	                this.match(SQLiteParser.THEN_);
	                this.state = 939;
	                this.expr(0);
	                this.state = 943; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SQLiteParser.WHEN_);
	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ELSE_) {
	                this.state = 945;
	                this.match(SQLiteParser.ELSE_);
	                this.state = 946;
	                this.expr(0);
	            }

	            this.state = 949;
	            this.match(SQLiteParser.END_);
	            break;

	        case 10:
	            this.state = 951;
	            this.raise_function();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1073;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1071;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 954;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 955;
	                    this.match(SQLiteParser.PIPE2);
	                    this.state = 956;
	                    this.expr(21);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 957;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 958;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 959;
	                    this.expr(20);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 960;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 961;
	                    _la = this._input.LA(1);
	                    if(!(_la===SQLiteParser.PLUS || _la===SQLiteParser.MINUS)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 962;
	                    this.expr(19);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 963;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 964;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 965;
	                    this.expr(18);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 966;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 967;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 968;
	                    this.expr(17);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 969;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 982;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 970;
	                        this.match(SQLiteParser.ASSIGN);
	                        break;

	                    case 2:
	                        this.state = 971;
	                        this.match(SQLiteParser.EQ);
	                        break;

	                    case 3:
	                        this.state = 972;
	                        this.match(SQLiteParser.NOT_EQ1);
	                        break;

	                    case 4:
	                        this.state = 973;
	                        this.match(SQLiteParser.NOT_EQ2);
	                        break;

	                    case 5:
	                        this.state = 974;
	                        this.match(SQLiteParser.IS_);
	                        break;

	                    case 6:
	                        this.state = 975;
	                        this.match(SQLiteParser.IS_);
	                        this.state = 976;
	                        this.match(SQLiteParser.NOT_);
	                        break;

	                    case 7:
	                        this.state = 977;
	                        this.match(SQLiteParser.IN_);
	                        break;

	                    case 8:
	                        this.state = 978;
	                        this.match(SQLiteParser.LIKE_);
	                        break;

	                    case 9:
	                        this.state = 979;
	                        this.match(SQLiteParser.GLOB_);
	                        break;

	                    case 10:
	                        this.state = 980;
	                        this.match(SQLiteParser.MATCH_);
	                        break;

	                    case 11:
	                        this.state = 981;
	                        this.match(SQLiteParser.REGEXP_);
	                        break;

	                    }
	                    this.state = 984;
	                    this.expr(16);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 985;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 986;
	                    this.match(SQLiteParser.AND_);
	                    this.state = 987;
	                    this.expr(15);
	                    break;

	                case 8:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 988;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 989;
	                    this.match(SQLiteParser.OR_);
	                    this.state = 990;
	                    this.expr(14);
	                    break;

	                case 9:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 991;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 992;
	                    this.match(SQLiteParser.IS_);
	                    this.state = 994;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	                    if(la_===1) {
	                        this.state = 993;
	                        this.match(SQLiteParser.NOT_);

	                    }
	                    this.state = 996;
	                    this.expr(7);
	                    break;

	                case 10:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 997;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 999;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SQLiteParser.NOT_) {
	                        this.state = 998;
	                        this.match(SQLiteParser.NOT_);
	                    }

	                    this.state = 1001;
	                    this.match(SQLiteParser.BETWEEN_);
	                    this.state = 1002;
	                    this.expr(0);
	                    this.state = 1003;
	                    this.match(SQLiteParser.AND_);
	                    this.state = 1004;
	                    this.expr(6);
	                    break;

	                case 11:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 1006;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1007;
	                    this.match(SQLiteParser.COLLATE_);
	                    this.state = 1008;
	                    this.collation_name();
	                    break;

	                case 12:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 1009;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1011;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SQLiteParser.NOT_) {
	                        this.state = 1010;
	                        this.match(SQLiteParser.NOT_);
	                    }

	                    this.state = 1013;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SQLiteParser.GLOB_ - 77)) | (1 << (SQLiteParser.LIKE_ - 77)) | (1 << (SQLiteParser.MATCH_ - 77)))) !== 0) || _la===SQLiteParser.REGEXP_)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1014;
	                    this.expr(0);
	                    this.state = 1017;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	                    if(la_===1) {
	                        this.state = 1015;
	                        this.match(SQLiteParser.ESCAPE_);
	                        this.state = 1016;
	                        this.expr(0);

	                    }
	                    break;

	                case 13:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 1019;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1024;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case SQLiteParser.ISNULL_:
	                        this.state = 1020;
	                        this.match(SQLiteParser.ISNULL_);
	                        break;
	                    case SQLiteParser.NOTNULL_:
	                        this.state = 1021;
	                        this.match(SQLiteParser.NOTNULL_);
	                        break;
	                    case SQLiteParser.NOT_:
	                        this.state = 1022;
	                        this.match(SQLiteParser.NOT_);
	                        this.state = 1023;
	                        this.match(SQLiteParser.NULL_);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 14:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
	                    this.state = 1026;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1028;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SQLiteParser.NOT_) {
	                        this.state = 1027;
	                        this.match(SQLiteParser.NOT_);
	                    }

	                    this.state = 1030;
	                    this.match(SQLiteParser.IN_);
	                    this.state = 1069;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1031;
	                        this.match(SQLiteParser.OPEN_PAR);
	                        this.state = 1041;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	                        if(la_===1) {
	                            this.state = 1032;
	                            this.select_stmt();

	                        } else if(la_===2) {
	                            this.state = 1033;
	                            this.expr(0);
	                            this.state = 1038;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===SQLiteParser.COMMA) {
	                                this.state = 1034;
	                                this.match(SQLiteParser.COMMA);
	                                this.state = 1035;
	                                this.expr(0);
	                                this.state = 1040;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }

	                        }
	                        this.state = 1043;
	                        this.match(SQLiteParser.CLOSE_PAR);
	                        break;

	                    case 2:
	                        this.state = 1047;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	                        if(la_===1) {
	                            this.state = 1044;
	                            this.schema_name();
	                            this.state = 1045;
	                            this.match(SQLiteParser.DOT);

	                        }
	                        this.state = 1049;
	                        this.table_name();
	                        break;

	                    case 3:
	                        this.state = 1053;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	                        if(la_===1) {
	                            this.state = 1050;
	                            this.schema_name();
	                            this.state = 1051;
	                            this.match(SQLiteParser.DOT);

	                        }
	                        this.state = 1055;
	                        this.table_function_name();
	                        this.state = 1056;
	                        this.match(SQLiteParser.OPEN_PAR);
	                        this.state = 1065;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SQLiteParser.AND_ - 32)) | (1 << (SQLiteParser.AS_ - 32)) | (1 << (SQLiteParser.ASC_ - 32)) | (1 << (SQLiteParser.ATTACH_ - 32)) | (1 << (SQLiteParser.AUTOINCREMENT_ - 32)) | (1 << (SQLiteParser.BEFORE_ - 32)) | (1 << (SQLiteParser.BEGIN_ - 32)) | (1 << (SQLiteParser.BETWEEN_ - 32)) | (1 << (SQLiteParser.BY_ - 32)) | (1 << (SQLiteParser.CASCADE_ - 32)) | (1 << (SQLiteParser.CASE_ - 32)) | (1 << (SQLiteParser.CAST_ - 32)) | (1 << (SQLiteParser.CHECK_ - 32)) | (1 << (SQLiteParser.COLLATE_ - 32)) | (1 << (SQLiteParser.COLUMN_ - 32)) | (1 << (SQLiteParser.COMMIT_ - 32)) | (1 << (SQLiteParser.CONFLICT_ - 32)) | (1 << (SQLiteParser.CONSTRAINT_ - 32)) | (1 << (SQLiteParser.CREATE_ - 32)) | (1 << (SQLiteParser.CROSS_ - 32)) | (1 << (SQLiteParser.CURRENT_DATE_ - 32)) | (1 << (SQLiteParser.CURRENT_TIME_ - 32)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 32)) | (1 << (SQLiteParser.DATABASE_ - 32)) | (1 << (SQLiteParser.DEFAULT_ - 32)) | (1 << (SQLiteParser.DEFERRABLE_ - 32)) | (1 << (SQLiteParser.DEFERRED_ - 32)) | (1 << (SQLiteParser.DELETE_ - 32)) | (1 << (SQLiteParser.DESC_ - 32)) | (1 << (SQLiteParser.DETACH_ - 32)) | (1 << (SQLiteParser.DISTINCT_ - 32)) | (1 << (SQLiteParser.DROP_ - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SQLiteParser.LEFT_ - 96)) | (1 << (SQLiteParser.LIKE_ - 96)) | (1 << (SQLiteParser.LIMIT_ - 96)) | (1 << (SQLiteParser.MATCH_ - 96)) | (1 << (SQLiteParser.NATURAL_ - 96)) | (1 << (SQLiteParser.NO_ - 96)) | (1 << (SQLiteParser.NOT_ - 96)) | (1 << (SQLiteParser.NOTNULL_ - 96)) | (1 << (SQLiteParser.NULL_ - 96)) | (1 << (SQLiteParser.OF_ - 96)) | (1 << (SQLiteParser.OFFSET_ - 96)) | (1 << (SQLiteParser.ON_ - 96)) | (1 << (SQLiteParser.OR_ - 96)) | (1 << (SQLiteParser.ORDER_ - 96)) | (1 << (SQLiteParser.OUTER_ - 96)) | (1 << (SQLiteParser.PLAN_ - 96)) | (1 << (SQLiteParser.PRAGMA_ - 96)) | (1 << (SQLiteParser.PRIMARY_ - 96)) | (1 << (SQLiteParser.QUERY_ - 96)) | (1 << (SQLiteParser.RAISE_ - 96)) | (1 << (SQLiteParser.RECURSIVE_ - 96)) | (1 << (SQLiteParser.REFERENCES_ - 96)) | (1 << (SQLiteParser.REGEXP_ - 96)) | (1 << (SQLiteParser.REINDEX_ - 96)) | (1 << (SQLiteParser.RELEASE_ - 96)) | (1 << (SQLiteParser.RENAME_ - 96)) | (1 << (SQLiteParser.REPLACE_ - 96)) | (1 << (SQLiteParser.RESTRICT_ - 96)) | (1 << (SQLiteParser.RIGHT_ - 96)) | (1 << (SQLiteParser.ROLLBACK_ - 96)) | (1 << (SQLiteParser.ROW_ - 96)) | (1 << (SQLiteParser.ROWS_ - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SQLiteParser.LAG_ - 160)) | (1 << (SQLiteParser.LAST_VALUE_ - 160)) | (1 << (SQLiteParser.LEAD_ - 160)) | (1 << (SQLiteParser.NTH_VALUE_ - 160)) | (1 << (SQLiteParser.NTILE_ - 160)) | (1 << (SQLiteParser.PERCENT_RANK_ - 160)) | (1 << (SQLiteParser.RANK_ - 160)) | (1 << (SQLiteParser.ROW_NUMBER_ - 160)) | (1 << (SQLiteParser.GENERATED_ - 160)) | (1 << (SQLiteParser.ALWAYS_ - 160)) | (1 << (SQLiteParser.STORED_ - 160)) | (1 << (SQLiteParser.TRUE_ - 160)) | (1 << (SQLiteParser.FALSE_ - 160)) | (1 << (SQLiteParser.WINDOW_ - 160)) | (1 << (SQLiteParser.NULLS_ - 160)) | (1 << (SQLiteParser.FIRST_ - 160)) | (1 << (SQLiteParser.LAST_ - 160)) | (1 << (SQLiteParser.FILTER_ - 160)) | (1 << (SQLiteParser.GROUPS_ - 160)) | (1 << (SQLiteParser.EXCLUDE_ - 160)) | (1 << (SQLiteParser.IDENTIFIER - 160)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 160)) | (1 << (SQLiteParser.BIND_PARAMETER - 160)) | (1 << (SQLiteParser.STRING_LITERAL - 160)) | (1 << (SQLiteParser.BLOB_LITERAL - 160)))) !== 0)) {
	                            this.state = 1057;
	                            this.expr(0);
	                            this.state = 1062;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===SQLiteParser.COMMA) {
	                                this.state = 1058;
	                                this.match(SQLiteParser.COMMA);
	                                this.state = 1059;
	                                this.expr(0);
	                                this.state = 1064;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }
	                        }

	                        this.state = 1067;
	                        this.match(SQLiteParser.CLOSE_PAR);
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 1075;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	raise_function() {
	    let localctx = new Raise_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SQLiteParser.RULE_raise_function);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1076;
	        this.match(SQLiteParser.RAISE_);
	        this.state = 1077;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.IGNORE_:
	            this.state = 1078;
	            this.match(SQLiteParser.IGNORE_);
	            break;
	        case SQLiteParser.ABORT_:
	        case SQLiteParser.FAIL_:
	        case SQLiteParser.ROLLBACK_:
	            this.state = 1079;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.ABORT_ || _la===SQLiteParser.FAIL_ || _la===SQLiteParser.ROLLBACK_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1080;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1081;
	            this.error_message();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1084;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value() {
	    let localctx = new Literal_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SQLiteParser.RULE_literal_value);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SQLiteParser.CURRENT_DATE_ - 52)) | (1 << (SQLiteParser.CURRENT_TIME_ - 52)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 52)))) !== 0) || _la===SQLiteParser.NULL_ || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (SQLiteParser.TRUE_ - 171)) | (1 << (SQLiteParser.FALSE_ - 171)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 171)) | (1 << (SQLiteParser.STRING_LITERAL - 171)) | (1 << (SQLiteParser.BLOB_LITERAL - 171)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_stmt() {
	    let localctx = new Insert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SQLiteParser.RULE_insert_stmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1158;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.WITH_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.WITH_) {
	                this.state = 1088;
	                this.with_clause();
	            }

	            this.state = 1096;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1091;
	                this.match(SQLiteParser.INSERT_);
	                break;

	            case 2:
	                this.state = 1092;
	                this.match(SQLiteParser.REPLACE_);
	                break;

	            case 3:
	                this.state = 1093;
	                this.match(SQLiteParser.INSERT_);
	                this.state = 1094;
	                this.match(SQLiteParser.OR_);
	                this.state = 1095;
	                _la = this._input.LA(1);
	                if(!(_la===SQLiteParser.ABORT_ || _la===SQLiteParser.FAIL_ || _la===SQLiteParser.IGNORE_ || _la===SQLiteParser.REPLACE_ || _la===SQLiteParser.ROLLBACK_)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;

	            }
	            this.state = 1098;
	            this.match(SQLiteParser.INTO_);
	            this.state = 1102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	            if(la_===1) {
	                this.state = 1099;
	                this.schema_name();
	                this.state = 1100;
	                this.match(SQLiteParser.DOT);

	            }
	            this.state = 1104;
	            this.table_name();
	            this.state = 1107;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.AS_) {
	                this.state = 1105;
	                this.match(SQLiteParser.AS_);
	                this.state = 1106;
	                this.table_alias();
	            }

	            this.state = 1120;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.OPEN_PAR) {
	                this.state = 1109;
	                this.match(SQLiteParser.OPEN_PAR);
	                this.state = 1110;
	                this.column_name();
	                this.state = 1115;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1111;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1112;
	                    this.column_name();
	                    this.state = 1117;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1118;
	                this.match(SQLiteParser.CLOSE_PAR);
	            }

	            this.state = 1151;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1122;
	                this.match(SQLiteParser.VALUES_);
	                this.state = 1123;
	                this.match(SQLiteParser.OPEN_PAR);
	                this.state = 1124;
	                this.expr(0);
	                this.state = 1129;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1125;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1126;
	                    this.expr(0);
	                    this.state = 1131;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1132;
	                this.match(SQLiteParser.CLOSE_PAR);
	                this.state = 1147;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1133;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1134;
	                    this.match(SQLiteParser.OPEN_PAR);
	                    this.state = 1135;
	                    this.expr(0);
	                    this.state = 1140;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===SQLiteParser.COMMA) {
	                        this.state = 1136;
	                        this.match(SQLiteParser.COMMA);
	                        this.state = 1137;
	                        this.expr(0);
	                        this.state = 1142;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1143;
	                    this.match(SQLiteParser.CLOSE_PAR);
	                    this.state = 1149;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 1150;
	                this.select_stmt();
	                break;

	            }
	            this.state = 1154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ON_) {
	                this.state = 1153;
	                this.upsert_clause();
	            }

	            break;
	        case SQLiteParser.DEFAULT_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1156;
	            this.match(SQLiteParser.DEFAULT_);
	            this.state = 1157;
	            this.match(SQLiteParser.VALUES_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upsert_clause() {
	    let localctx = new Upsert_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SQLiteParser.RULE_upsert_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1160;
	        this.match(SQLiteParser.ON_);
	        this.state = 1161;
	        this.match(SQLiteParser.CONFLICT_);
	        this.state = 1176;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.OPEN_PAR) {
	            this.state = 1162;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1163;
	            this.indexed_column();
	            this.state = 1168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1164;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1165;
	                this.indexed_column();
	                this.state = 1170;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1171;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.WHERE_) {
	                this.state = 1172;
	                this.match(SQLiteParser.WHERE_);
	                this.state = 1173;
	                this.expr(0);
	            }

	        }

	        this.state = 1178;
	        this.match(SQLiteParser.DO_);
	        this.state = 1205;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.NOTHING_:
	            this.state = 1179;
	            this.match(SQLiteParser.NOTHING_);
	            break;
	        case SQLiteParser.UPDATE_:
	            this.state = 1180;
	            this.match(SQLiteParser.UPDATE_);
	            this.state = 1181;
	            this.match(SQLiteParser.SET_);

	            this.state = 1184;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1182;
	                this.column_name();
	                break;

	            case 2:
	                this.state = 1183;
	                this.column_name_list();
	                break;

	            }
	            this.state = 1186;
	            this.match(SQLiteParser.EQ);
	            this.state = 1187;
	            this.expr(0);
	            this.state = 1198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1188;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1191;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1189;
	                    this.column_name();
	                    break;

	                case 2:
	                    this.state = 1190;
	                    this.column_name_list();
	                    break;

	                }
	                this.state = 1193;
	                this.match(SQLiteParser.EQ);
	                this.state = 1194;
	                this.expr(0);
	                this.state = 1200;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.WHERE_) {
	                this.state = 1201;
	                this.match(SQLiteParser.WHERE_);
	                this.state = 1202;
	                this.expr(0);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_stmt() {
	    let localctx = new Pragma_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SQLiteParser.RULE_pragma_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1207;
	        this.match(SQLiteParser.PRAGMA_);
	        this.state = 1211;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 1208;
	            this.schema_name();
	            this.state = 1209;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 1213;
	        this.pragma_name();
	        this.state = 1220;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case SQLiteParser.ASSIGN:
	        	this.state = 1214;
	        	this.match(SQLiteParser.ASSIGN);
	        	this.state = 1215;
	        	this.pragma_value();
	        	break;
	        case SQLiteParser.OPEN_PAR:
	        	this.state = 1216;
	        	this.match(SQLiteParser.OPEN_PAR);
	        	this.state = 1217;
	        	this.pragma_value();
	        	this.state = 1218;
	        	this.match(SQLiteParser.CLOSE_PAR);
	        	break;
	        case SQLiteParser.EOF:
	        case SQLiteParser.SCOL:
	        case SQLiteParser.ALTER_:
	        case SQLiteParser.ANALYZE_:
	        case SQLiteParser.ATTACH_:
	        case SQLiteParser.BEGIN_:
	        case SQLiteParser.COMMIT_:
	        case SQLiteParser.CREATE_:
	        case SQLiteParser.DEFAULT_:
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.DETACH_:
	        case SQLiteParser.DROP_:
	        case SQLiteParser.END_:
	        case SQLiteParser.EXPLAIN_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.PRAGMA_:
	        case SQLiteParser.REINDEX_:
	        case SQLiteParser.RELEASE_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.ROLLBACK_:
	        case SQLiteParser.SAVEPOINT_:
	        case SQLiteParser.SELECT_:
	        case SQLiteParser.UPDATE_:
	        case SQLiteParser.VACUUM_:
	        case SQLiteParser.VALUES_:
	        case SQLiteParser.WITH_:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_value() {
	    let localctx = new Pragma_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SQLiteParser.RULE_pragma_value);
	    try {
	        this.state = 1225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1222;
	            this.signed_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1223;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1224;
	            this.match(SQLiteParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindex_stmt() {
	    let localctx = new Reindex_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SQLiteParser.RULE_reindex_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1227;
	        this.match(SQLiteParser.REINDEX_);
	        this.state = 1238;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 1228;
	            this.collation_name();

	        } else if(la_===2) {
	            this.state = 1232;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	            if(la_===1) {
	                this.state = 1229;
	                this.schema_name();
	                this.state = 1230;
	                this.match(SQLiteParser.DOT);

	            }
	            this.state = 1236;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1234;
	                this.table_name();
	                break;

	            case 2:
	                this.state = 1235;
	                this.index_name();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_stmt() {
	    let localctx = new Select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SQLiteParser.RULE_select_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 1240;
	            this.common_table_stmt();
	        }

	        this.state = 1243;
	        this.select_core();
	        this.state = 1249;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,163,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1244;
	                this.compound_operator();
	                this.state = 1245;
	                this.select_core(); 
	            }
	            this.state = 1251;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,163,this._ctx);
	        }

	        this.state = 1253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ORDER_) {
	            this.state = 1252;
	            this.order_by_stmt();
	        }

	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.LIMIT_) {
	            this.state = 1255;
	            this.limit_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_clause() {
	    let localctx = new Join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SQLiteParser.RULE_join_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.table_or_subquery();
	        this.state = 1266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA || _la===SQLiteParser.CROSS_ || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SQLiteParser.INNER_ - 87)) | (1 << (SQLiteParser.JOIN_ - 87)) | (1 << (SQLiteParser.LEFT_ - 87)) | (1 << (SQLiteParser.NATURAL_ - 87)))) !== 0)) {
	            this.state = 1259;
	            this.join_operator();
	            this.state = 1260;
	            this.table_or_subquery();
	            this.state = 1262;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            if(la_===1) {
	                this.state = 1261;
	                this.join_constraint();

	            }
	            this.state = 1268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_core() {
	    let localctx = new Select_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SQLiteParser.RULE_select_core);
	    var _la = 0; // Token type
	    try {
	        this.state = 1359;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.SELECT_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1269;
	            this.match(SQLiteParser.SELECT_);
	            this.state = 1271;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            if(la_===1) {
	                this.state = 1270;
	                _la = this._input.LA(1);
	                if(!(_la===SQLiteParser.ALL_ || _la===SQLiteParser.DISTINCT_)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1273;
	            this.result_column();
	            this.state = 1278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1274;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1275;
	                this.result_column();
	                this.state = 1280;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.FROM_) {
	                this.state = 1281;
	                this.match(SQLiteParser.FROM_);
	                this.state = 1291;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1282;
	                    this.table_or_subquery();
	                    this.state = 1287;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===SQLiteParser.COMMA) {
	                        this.state = 1283;
	                        this.match(SQLiteParser.COMMA);
	                        this.state = 1284;
	                        this.table_or_subquery();
	                        this.state = 1289;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;

	                case 2:
	                    this.state = 1290;
	                    this.join_clause();
	                    break;

	                }
	            }

	            this.state = 1297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.WHERE_) {
	                this.state = 1295;
	                this.match(SQLiteParser.WHERE_);
	                this.state = 1296;
	                this.expr(0);
	            }

	            this.state = 1313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.GROUP_) {
	                this.state = 1299;
	                this.match(SQLiteParser.GROUP_);
	                this.state = 1300;
	                this.match(SQLiteParser.BY_);
	                this.state = 1301;
	                this.expr(0);
	                this.state = 1306;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1302;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1303;
	                    this.expr(0);
	                    this.state = 1308;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1311;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SQLiteParser.HAVING_) {
	                    this.state = 1309;
	                    this.match(SQLiteParser.HAVING_);
	                    this.state = 1310;
	                    this.expr(0);
	                }

	            }

	            this.state = 1329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.WINDOW_) {
	                this.state = 1315;
	                this.match(SQLiteParser.WINDOW_);
	                this.state = 1316;
	                this.window_name();
	                this.state = 1317;
	                this.match(SQLiteParser.AS_);
	                this.state = 1318;
	                this.window_defn();
	                this.state = 1326;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1319;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1320;
	                    this.window_name();
	                    this.state = 1321;
	                    this.match(SQLiteParser.AS_);
	                    this.state = 1322;
	                    this.window_defn();
	                    this.state = 1328;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        case SQLiteParser.VALUES_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1331;
	            this.match(SQLiteParser.VALUES_);
	            this.state = 1332;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1333;
	            this.expr(0);
	            this.state = 1338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1334;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1335;
	                this.expr(0);
	                this.state = 1340;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1341;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1342;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1343;
	                this.match(SQLiteParser.OPEN_PAR);
	                this.state = 1344;
	                this.expr(0);
	                this.state = 1349;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1345;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1346;
	                    this.expr(0);
	                    this.state = 1351;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1352;
	                this.match(SQLiteParser.CLOSE_PAR);
	                this.state = 1358;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factored_select_stmt() {
	    let localctx = new Factored_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SQLiteParser.RULE_factored_select_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select_stmt() {
	    let localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SQLiteParser.RULE_simple_select_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 1363;
	            this.common_table_stmt();
	        }

	        this.state = 1366;
	        this.select_core();
	        this.state = 1368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ORDER_) {
	            this.state = 1367;
	            this.order_by_stmt();
	        }

	        this.state = 1371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.LIMIT_) {
	            this.state = 1370;
	            this.limit_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_select_stmt() {
	    let localctx = new Compound_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SQLiteParser.RULE_compound_select_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 1373;
	            this.common_table_stmt();
	        }

	        this.state = 1376;
	        this.select_core();
	        this.state = 1386; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1383;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SQLiteParser.UNION_:
	                this.state = 1377;
	                this.match(SQLiteParser.UNION_);
	                this.state = 1379;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SQLiteParser.ALL_) {
	                    this.state = 1378;
	                    this.match(SQLiteParser.ALL_);
	                }

	                break;
	            case SQLiteParser.INTERSECT_:
	                this.state = 1381;
	                this.match(SQLiteParser.INTERSECT_);
	                break;
	            case SQLiteParser.EXCEPT_:
	                this.state = 1382;
	                this.match(SQLiteParser.EXCEPT_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1385;
	            this.select_core();
	            this.state = 1388; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SQLiteParser.EXCEPT_ || _la===SQLiteParser.INTERSECT_ || _la===SQLiteParser.UNION_);
	        this.state = 1391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ORDER_) {
	            this.state = 1390;
	            this.order_by_stmt();
	        }

	        this.state = 1394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.LIMIT_) {
	            this.state = 1393;
	            this.limit_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_subquery() {
	    let localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SQLiteParser.RULE_table_or_subquery);
	    var _la = 0; // Token type
	    try {
	        this.state = 1460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1399;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	            if(la_===1) {
	                this.state = 1396;
	                this.schema_name();
	                this.state = 1397;
	                this.match(SQLiteParser.DOT);

	            }
	            this.state = 1401;
	            this.table_name();
	            this.state = 1406;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	            if(la_===1) {
	                this.state = 1403;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	                if(la_===1) {
	                    this.state = 1402;
	                    this.match(SQLiteParser.AS_);

	                }
	                this.state = 1405;
	                this.table_alias();

	            }
	            this.state = 1413;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case SQLiteParser.INDEXED_:
	            	this.state = 1408;
	            	this.match(SQLiteParser.INDEXED_);
	            	this.state = 1409;
	            	this.match(SQLiteParser.BY_);
	            	this.state = 1410;
	            	this.index_name();
	            	break;
	            case SQLiteParser.NOT_:
	            	this.state = 1411;
	            	this.match(SQLiteParser.NOT_);
	            	this.state = 1412;
	            	this.match(SQLiteParser.INDEXED_);
	            	break;
	            case SQLiteParser.EOF:
	            case SQLiteParser.SCOL:
	            case SQLiteParser.CLOSE_PAR:
	            case SQLiteParser.COMMA:
	            case SQLiteParser.ALTER_:
	            case SQLiteParser.ANALYZE_:
	            case SQLiteParser.ATTACH_:
	            case SQLiteParser.BEGIN_:
	            case SQLiteParser.COMMIT_:
	            case SQLiteParser.CREATE_:
	            case SQLiteParser.CROSS_:
	            case SQLiteParser.DEFAULT_:
	            case SQLiteParser.DELETE_:
	            case SQLiteParser.DETACH_:
	            case SQLiteParser.DROP_:
	            case SQLiteParser.END_:
	            case SQLiteParser.EXCEPT_:
	            case SQLiteParser.EXPLAIN_:
	            case SQLiteParser.GROUP_:
	            case SQLiteParser.INNER_:
	            case SQLiteParser.INSERT_:
	            case SQLiteParser.INTERSECT_:
	            case SQLiteParser.JOIN_:
	            case SQLiteParser.LEFT_:
	            case SQLiteParser.LIMIT_:
	            case SQLiteParser.NATURAL_:
	            case SQLiteParser.ON_:
	            case SQLiteParser.ORDER_:
	            case SQLiteParser.PRAGMA_:
	            case SQLiteParser.REINDEX_:
	            case SQLiteParser.RELEASE_:
	            case SQLiteParser.REPLACE_:
	            case SQLiteParser.ROLLBACK_:
	            case SQLiteParser.SAVEPOINT_:
	            case SQLiteParser.SELECT_:
	            case SQLiteParser.UNION_:
	            case SQLiteParser.UPDATE_:
	            case SQLiteParser.USING_:
	            case SQLiteParser.VACUUM_:
	            case SQLiteParser.VALUES_:
	            case SQLiteParser.WHERE_:
	            case SQLiteParser.WITH_:
	            case SQLiteParser.WINDOW_:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1418;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	            if(la_===1) {
	                this.state = 1415;
	                this.schema_name();
	                this.state = 1416;
	                this.match(SQLiteParser.DOT);

	            }
	            this.state = 1420;
	            this.table_function_name();
	            this.state = 1421;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1422;
	            this.expr(0);
	            this.state = 1427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1423;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1424;
	                this.expr(0);
	                this.state = 1429;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1430;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1435;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	            if(la_===1) {
	                this.state = 1432;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	                if(la_===1) {
	                    this.state = 1431;
	                    this.match(SQLiteParser.AS_);

	                }
	                this.state = 1434;
	                this.table_alias();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1437;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1447;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1438;
	                this.table_or_subquery();
	                this.state = 1443;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1439;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1440;
	                    this.table_or_subquery();
	                    this.state = 1445;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 1446;
	                this.join_clause();
	                break;

	            }
	            this.state = 1449;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1451;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1452;
	            this.select_stmt();
	            this.state = 1453;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1458;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	            if(la_===1) {
	                this.state = 1455;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	                if(la_===1) {
	                    this.state = 1454;
	                    this.match(SQLiteParser.AS_);

	                }
	                this.state = 1457;
	                this.table_alias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result_column() {
	    let localctx = new Result_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SQLiteParser.RULE_result_column);
	    var _la = 0; // Token type
	    try {
	        this.state = 1474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1462;
	            this.match(SQLiteParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1463;
	            this.table_name();
	            this.state = 1464;
	            this.match(SQLiteParser.DOT);
	            this.state = 1465;
	            this.match(SQLiteParser.STAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1467;
	            this.expr(0);
	            this.state = 1472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.AS_ || _la===SQLiteParser.IDENTIFIER || _la===SQLiteParser.STRING_LITERAL) {
	                this.state = 1469;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SQLiteParser.AS_) {
	                    this.state = 1468;
	                    this.match(SQLiteParser.AS_);
	                }

	                this.state = 1471;
	                this.column_alias();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_operator() {
	    let localctx = new Join_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SQLiteParser.RULE_join_operator);
	    var _la = 0; // Token type
	    try {
	        this.state = 1489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.COMMA:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1476;
	            this.match(SQLiteParser.COMMA);
	            break;
	        case SQLiteParser.CROSS_:
	        case SQLiteParser.INNER_:
	        case SQLiteParser.JOIN_:
	        case SQLiteParser.LEFT_:
	        case SQLiteParser.NATURAL_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1478;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.NATURAL_) {
	                this.state = 1477;
	                this.match(SQLiteParser.NATURAL_);
	            }

	            this.state = 1486;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case SQLiteParser.LEFT_:
	            	this.state = 1480;
	            	this.match(SQLiteParser.LEFT_);
	            	this.state = 1482;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===SQLiteParser.OUTER_) {
	            	    this.state = 1481;
	            	    this.match(SQLiteParser.OUTER_);
	            	}

	            	break;
	            case SQLiteParser.INNER_:
	            	this.state = 1484;
	            	this.match(SQLiteParser.INNER_);
	            	break;
	            case SQLiteParser.CROSS_:
	            	this.state = 1485;
	            	this.match(SQLiteParser.CROSS_);
	            	break;
	            case SQLiteParser.JOIN_:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1488;
	            this.match(SQLiteParser.JOIN_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_constraint() {
	    let localctx = new Join_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SQLiteParser.RULE_join_constraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 1505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.ON_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1491;
	            this.match(SQLiteParser.ON_);
	            this.state = 1492;
	            this.expr(0);
	            break;
	        case SQLiteParser.USING_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1493;
	            this.match(SQLiteParser.USING_);
	            this.state = 1494;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1495;
	            this.column_name();
	            this.state = 1500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1496;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1497;
	                this.column_name();
	                this.state = 1502;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1503;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_operator() {
	    let localctx = new Compound_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SQLiteParser.RULE_compound_operator);
	    var _la = 0; // Token type
	    try {
	        this.state = 1513;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.UNION_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1507;
	            this.match(SQLiteParser.UNION_);
	            this.state = 1509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ALL_) {
	                this.state = 1508;
	                this.match(SQLiteParser.ALL_);
	            }

	            break;
	        case SQLiteParser.INTERSECT_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1511;
	            this.match(SQLiteParser.INTERSECT_);
	            break;
	        case SQLiteParser.EXCEPT_:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1512;
	            this.match(SQLiteParser.EXCEPT_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt() {
	    let localctx = new Update_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SQLiteParser.RULE_update_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 1515;
	            this.with_clause();
	        }

	        this.state = 1518;
	        this.match(SQLiteParser.UPDATE_);
	        this.state = 1521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        if(la_===1) {
	            this.state = 1519;
	            this.match(SQLiteParser.OR_);
	            this.state = 1520;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.ABORT_ || _la===SQLiteParser.FAIL_ || _la===SQLiteParser.IGNORE_ || _la===SQLiteParser.REPLACE_ || _la===SQLiteParser.ROLLBACK_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1523;
	        this.qualified_table_name();
	        this.state = 1524;
	        this.match(SQLiteParser.SET_);
	        this.state = 1527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1525;
	            this.column_name();
	            break;

	        case 2:
	            this.state = 1526;
	            this.column_name_list();
	            break;

	        }
	        this.state = 1529;
	        this.match(SQLiteParser.ASSIGN);
	        this.state = 1530;
	        this.expr(0);
	        this.state = 1541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1531;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1534;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1532;
	                this.column_name();
	                break;

	            case 2:
	                this.state = 1533;
	                this.column_name_list();
	                break;

	            }
	            this.state = 1536;
	            this.match(SQLiteParser.ASSIGN);
	            this.state = 1537;
	            this.expr(0);
	            this.state = 1543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WHERE_) {
	            this.state = 1544;
	            this.match(SQLiteParser.WHERE_);
	            this.state = 1545;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name_list() {
	    let localctx = new Column_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SQLiteParser.RULE_column_name_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1548;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1549;
	        this.column_name();
	        this.state = 1554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1550;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1551;
	            this.column_name();
	            this.state = 1556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1557;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt_limited() {
	    let localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SQLiteParser.RULE_update_stmt_limited);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WITH_) {
	            this.state = 1559;
	            this.with_clause();
	        }

	        this.state = 1562;
	        this.match(SQLiteParser.UPDATE_);
	        this.state = 1565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        if(la_===1) {
	            this.state = 1563;
	            this.match(SQLiteParser.OR_);
	            this.state = 1564;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.ABORT_ || _la===SQLiteParser.FAIL_ || _la===SQLiteParser.IGNORE_ || _la===SQLiteParser.REPLACE_ || _la===SQLiteParser.ROLLBACK_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1567;
	        this.qualified_table_name();
	        this.state = 1568;
	        this.match(SQLiteParser.SET_);
	        this.state = 1571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1569;
	            this.column_name();
	            break;

	        case 2:
	            this.state = 1570;
	            this.column_name_list();
	            break;

	        }
	        this.state = 1573;
	        this.match(SQLiteParser.ASSIGN);
	        this.state = 1574;
	        this.expr(0);
	        this.state = 1585;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1575;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1578;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1576;
	                this.column_name();
	                break;

	            case 2:
	                this.state = 1577;
	                this.column_name_list();
	                break;

	            }
	            this.state = 1580;
	            this.match(SQLiteParser.ASSIGN);
	            this.state = 1581;
	            this.expr(0);
	            this.state = 1587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.WHERE_) {
	            this.state = 1588;
	            this.match(SQLiteParser.WHERE_);
	            this.state = 1589;
	            this.expr(0);
	        }

	        this.state = 1596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.LIMIT_ || _la===SQLiteParser.ORDER_) {
	            this.state = 1593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ORDER_) {
	                this.state = 1592;
	                this.order_by_stmt();
	            }

	            this.state = 1595;
	            this.limit_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_table_name() {
	    let localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SQLiteParser.RULE_qualified_table_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1601;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        if(la_===1) {
	            this.state = 1598;
	            this.schema_name();
	            this.state = 1599;
	            this.match(SQLiteParser.DOT);

	        }
	        this.state = 1603;
	        this.table_name();
	        this.state = 1606;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.AS_) {
	            this.state = 1604;
	            this.match(SQLiteParser.AS_);
	            this.state = 1605;
	            this.alias();
	        }

	        this.state = 1613;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case SQLiteParser.INDEXED_:
	        	this.state = 1608;
	        	this.match(SQLiteParser.INDEXED_);
	        	this.state = 1609;
	        	this.match(SQLiteParser.BY_);
	        	this.state = 1610;
	        	this.index_name();
	        	break;
	        case SQLiteParser.NOT_:
	        	this.state = 1611;
	        	this.match(SQLiteParser.NOT_);
	        	this.state = 1612;
	        	this.match(SQLiteParser.INDEXED_);
	        	break;
	        case SQLiteParser.EOF:
	        case SQLiteParser.SCOL:
	        case SQLiteParser.ALTER_:
	        case SQLiteParser.ANALYZE_:
	        case SQLiteParser.ATTACH_:
	        case SQLiteParser.BEGIN_:
	        case SQLiteParser.COMMIT_:
	        case SQLiteParser.CREATE_:
	        case SQLiteParser.DEFAULT_:
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.DETACH_:
	        case SQLiteParser.DROP_:
	        case SQLiteParser.END_:
	        case SQLiteParser.EXPLAIN_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.LIMIT_:
	        case SQLiteParser.ORDER_:
	        case SQLiteParser.PRAGMA_:
	        case SQLiteParser.REINDEX_:
	        case SQLiteParser.RELEASE_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.ROLLBACK_:
	        case SQLiteParser.SAVEPOINT_:
	        case SQLiteParser.SELECT_:
	        case SQLiteParser.SET_:
	        case SQLiteParser.UPDATE_:
	        case SQLiteParser.VACUUM_:
	        case SQLiteParser.VALUES_:
	        case SQLiteParser.WHERE_:
	        case SQLiteParser.WITH_:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vacuum_stmt() {
	    let localctx = new Vacuum_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SQLiteParser.RULE_vacuum_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        this.match(SQLiteParser.VACUUM_);
	        this.state = 1617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        if(la_===1) {
	            this.state = 1616;
	            this.schema_name();

	        }
	        this.state = 1621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.INTO_) {
	            this.state = 1619;
	            this.match(SQLiteParser.INTO_);
	            this.state = 1620;
	            this.filename();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter_clause() {
	    let localctx = new Filter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SQLiteParser.RULE_filter_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        this.match(SQLiteParser.FILTER_);
	        this.state = 1624;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1625;
	        this.match(SQLiteParser.WHERE_);
	        this.state = 1626;
	        this.expr(0);
	        this.state = 1627;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_defn() {
	    let localctx = new Window_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SQLiteParser.RULE_window_defn);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        if(la_===1) {
	            this.state = 1630;
	            this.base_window_name();

	        }
	        this.state = 1643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.PARTITION_) {
	            this.state = 1633;
	            this.match(SQLiteParser.PARTITION_);
	            this.state = 1634;
	            this.match(SQLiteParser.BY_);
	            this.state = 1635;
	            this.expr(0);
	            this.state = 1640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1636;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1637;
	                this.expr(0);
	                this.state = 1642;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1645;
	        this.match(SQLiteParser.ORDER_);
	        this.state = 1646;
	        this.match(SQLiteParser.BY_);
	        this.state = 1647;
	        this.ordering_term();
	        this.state = 1652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1648;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1649;
	            this.ordering_term();
	            this.state = 1654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ROWS_ || _la===SQLiteParser.RANGE_ || _la===SQLiteParser.GROUPS_) {
	            this.state = 1655;
	            this.frame_spec();
	        }

	        this.state = 1658;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over_clause() {
	    let localctx = new Over_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SQLiteParser.RULE_over_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1660;
	        this.match(SQLiteParser.OVER_);
	        this.state = 1694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1661;
	            this.window_name();
	            break;

	        case 2:
	            this.state = 1662;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1664;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	            if(la_===1) {
	                this.state = 1663;
	                this.base_window_name();

	            }
	            this.state = 1676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1666;
	                this.match(SQLiteParser.PARTITION_);
	                this.state = 1667;
	                this.match(SQLiteParser.BY_);
	                this.state = 1668;
	                this.expr(0);
	                this.state = 1673;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1669;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1670;
	                    this.expr(0);
	                    this.state = 1675;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ORDER_) {
	                this.state = 1678;
	                this.match(SQLiteParser.ORDER_);
	                this.state = 1679;
	                this.match(SQLiteParser.BY_);
	                this.state = 1680;
	                this.ordering_term();
	                this.state = 1685;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SQLiteParser.COMMA) {
	                    this.state = 1681;
	                    this.match(SQLiteParser.COMMA);
	                    this.state = 1682;
	                    this.ordering_term();
	                    this.state = 1687;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ROWS_ || _la===SQLiteParser.RANGE_ || _la===SQLiteParser.GROUPS_) {
	                this.state = 1690;
	                this.frame_spec();
	            }

	            this.state = 1693;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_spec() {
	    let localctx = new Frame_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SQLiteParser.RULE_frame_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1696;
	        this.frame_clause();
	        this.state = 1704;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case SQLiteParser.EXCLUDE_:
	        	this.state = 1697;
	        	this.match(SQLiteParser.EXCLUDE_);

	        	this.state = 1698;
	        	this.match(SQLiteParser.NO_);
	        	this.state = 1699;
	        	this.match(SQLiteParser.OTHERS_);
	        	break;
	        case SQLiteParser.CURRENT_:
	        	this.state = 1700;
	        	this.match(SQLiteParser.CURRENT_);
	        	this.state = 1701;
	        	this.match(SQLiteParser.ROW_);
	        	break;
	        case SQLiteParser.GROUP_:
	        	this.state = 1702;
	        	this.match(SQLiteParser.GROUP_);
	        	break;
	        case SQLiteParser.TIES_:
	        	this.state = 1703;
	        	this.match(SQLiteParser.TIES_);
	        	break;
	        case SQLiteParser.CLOSE_PAR:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_clause() {
	    let localctx = new Frame_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SQLiteParser.RULE_frame_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        _la = this._input.LA(1);
	        if(!(_la===SQLiteParser.ROWS_ || _la===SQLiteParser.RANGE_ || _la===SQLiteParser.GROUPS_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1707;
	            this.frame_single();
	            break;

	        case 2:
	            this.state = 1708;
	            this.match(SQLiteParser.BETWEEN_);
	            this.state = 1709;
	            this.frame_left();
	            this.state = 1710;
	            this.match(SQLiteParser.AND_);
	            this.state = 1711;
	            this.frame_right();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_function_invocation() {
	    let localctx = new Simple_function_invocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SQLiteParser.RULE_simple_function_invocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this.simple_func();
	        this.state = 1716;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1726;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.OPEN_PAR:
	        case SQLiteParser.PLUS:
	        case SQLiteParser.MINUS:
	        case SQLiteParser.TILDE:
	        case SQLiteParser.ABORT_:
	        case SQLiteParser.ACTION_:
	        case SQLiteParser.ADD_:
	        case SQLiteParser.AFTER_:
	        case SQLiteParser.ALL_:
	        case SQLiteParser.ALTER_:
	        case SQLiteParser.ANALYZE_:
	        case SQLiteParser.AND_:
	        case SQLiteParser.AS_:
	        case SQLiteParser.ASC_:
	        case SQLiteParser.ATTACH_:
	        case SQLiteParser.AUTOINCREMENT_:
	        case SQLiteParser.BEFORE_:
	        case SQLiteParser.BEGIN_:
	        case SQLiteParser.BETWEEN_:
	        case SQLiteParser.BY_:
	        case SQLiteParser.CASCADE_:
	        case SQLiteParser.CASE_:
	        case SQLiteParser.CAST_:
	        case SQLiteParser.CHECK_:
	        case SQLiteParser.COLLATE_:
	        case SQLiteParser.COLUMN_:
	        case SQLiteParser.COMMIT_:
	        case SQLiteParser.CONFLICT_:
	        case SQLiteParser.CONSTRAINT_:
	        case SQLiteParser.CREATE_:
	        case SQLiteParser.CROSS_:
	        case SQLiteParser.CURRENT_DATE_:
	        case SQLiteParser.CURRENT_TIME_:
	        case SQLiteParser.CURRENT_TIMESTAMP_:
	        case SQLiteParser.DATABASE_:
	        case SQLiteParser.DEFAULT_:
	        case SQLiteParser.DEFERRABLE_:
	        case SQLiteParser.DEFERRED_:
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.DESC_:
	        case SQLiteParser.DETACH_:
	        case SQLiteParser.DISTINCT_:
	        case SQLiteParser.DROP_:
	        case SQLiteParser.EACH_:
	        case SQLiteParser.ELSE_:
	        case SQLiteParser.END_:
	        case SQLiteParser.ESCAPE_:
	        case SQLiteParser.EXCEPT_:
	        case SQLiteParser.EXCLUSIVE_:
	        case SQLiteParser.EXISTS_:
	        case SQLiteParser.EXPLAIN_:
	        case SQLiteParser.FAIL_:
	        case SQLiteParser.FOR_:
	        case SQLiteParser.FOREIGN_:
	        case SQLiteParser.FROM_:
	        case SQLiteParser.FULL_:
	        case SQLiteParser.GLOB_:
	        case SQLiteParser.GROUP_:
	        case SQLiteParser.HAVING_:
	        case SQLiteParser.IF_:
	        case SQLiteParser.IGNORE_:
	        case SQLiteParser.IMMEDIATE_:
	        case SQLiteParser.IN_:
	        case SQLiteParser.INDEX_:
	        case SQLiteParser.INDEXED_:
	        case SQLiteParser.INITIALLY_:
	        case SQLiteParser.INNER_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.INSTEAD_:
	        case SQLiteParser.INTERSECT_:
	        case SQLiteParser.INTO_:
	        case SQLiteParser.IS_:
	        case SQLiteParser.ISNULL_:
	        case SQLiteParser.JOIN_:
	        case SQLiteParser.KEY_:
	        case SQLiteParser.LEFT_:
	        case SQLiteParser.LIKE_:
	        case SQLiteParser.LIMIT_:
	        case SQLiteParser.MATCH_:
	        case SQLiteParser.NATURAL_:
	        case SQLiteParser.NO_:
	        case SQLiteParser.NOT_:
	        case SQLiteParser.NOTNULL_:
	        case SQLiteParser.NULL_:
	        case SQLiteParser.OF_:
	        case SQLiteParser.OFFSET_:
	        case SQLiteParser.ON_:
	        case SQLiteParser.OR_:
	        case SQLiteParser.ORDER_:
	        case SQLiteParser.OUTER_:
	        case SQLiteParser.PLAN_:
	        case SQLiteParser.PRAGMA_:
	        case SQLiteParser.PRIMARY_:
	        case SQLiteParser.QUERY_:
	        case SQLiteParser.RAISE_:
	        case SQLiteParser.RECURSIVE_:
	        case SQLiteParser.REFERENCES_:
	        case SQLiteParser.REGEXP_:
	        case SQLiteParser.REINDEX_:
	        case SQLiteParser.RELEASE_:
	        case SQLiteParser.RENAME_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.RESTRICT_:
	        case SQLiteParser.RIGHT_:
	        case SQLiteParser.ROLLBACK_:
	        case SQLiteParser.ROW_:
	        case SQLiteParser.ROWS_:
	        case SQLiteParser.SAVEPOINT_:
	        case SQLiteParser.SELECT_:
	        case SQLiteParser.SET_:
	        case SQLiteParser.TABLE_:
	        case SQLiteParser.TEMP_:
	        case SQLiteParser.TEMPORARY_:
	        case SQLiteParser.THEN_:
	        case SQLiteParser.TO_:
	        case SQLiteParser.TRANSACTION_:
	        case SQLiteParser.TRIGGER_:
	        case SQLiteParser.UNION_:
	        case SQLiteParser.UNIQUE_:
	        case SQLiteParser.UPDATE_:
	        case SQLiteParser.USING_:
	        case SQLiteParser.VACUUM_:
	        case SQLiteParser.VALUES_:
	        case SQLiteParser.VIEW_:
	        case SQLiteParser.VIRTUAL_:
	        case SQLiteParser.WHEN_:
	        case SQLiteParser.WHERE_:
	        case SQLiteParser.WITH_:
	        case SQLiteParser.WITHOUT_:
	        case SQLiteParser.FIRST_VALUE_:
	        case SQLiteParser.OVER_:
	        case SQLiteParser.PARTITION_:
	        case SQLiteParser.RANGE_:
	        case SQLiteParser.PRECEDING_:
	        case SQLiteParser.UNBOUNDED_:
	        case SQLiteParser.CURRENT_:
	        case SQLiteParser.FOLLOWING_:
	        case SQLiteParser.CUME_DIST_:
	        case SQLiteParser.DENSE_RANK_:
	        case SQLiteParser.LAG_:
	        case SQLiteParser.LAST_VALUE_:
	        case SQLiteParser.LEAD_:
	        case SQLiteParser.NTH_VALUE_:
	        case SQLiteParser.NTILE_:
	        case SQLiteParser.PERCENT_RANK_:
	        case SQLiteParser.RANK_:
	        case SQLiteParser.ROW_NUMBER_:
	        case SQLiteParser.GENERATED_:
	        case SQLiteParser.ALWAYS_:
	        case SQLiteParser.STORED_:
	        case SQLiteParser.TRUE_:
	        case SQLiteParser.FALSE_:
	        case SQLiteParser.WINDOW_:
	        case SQLiteParser.NULLS_:
	        case SQLiteParser.FIRST_:
	        case SQLiteParser.LAST_:
	        case SQLiteParser.FILTER_:
	        case SQLiteParser.GROUPS_:
	        case SQLiteParser.EXCLUDE_:
	        case SQLiteParser.IDENTIFIER:
	        case SQLiteParser.NUMERIC_LITERAL:
	        case SQLiteParser.BIND_PARAMETER:
	        case SQLiteParser.STRING_LITERAL:
	        case SQLiteParser.BLOB_LITERAL:
	            this.state = 1717;
	            this.expr(0);
	            this.state = 1722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SQLiteParser.COMMA) {
	                this.state = 1718;
	                this.match(SQLiteParser.COMMA);
	                this.state = 1719;
	                this.expr(0);
	                this.state = 1724;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case SQLiteParser.STAR:
	            this.state = 1725;
	            this.match(SQLiteParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1728;
	        this.match(SQLiteParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate_function_invocation() {
	    let localctx = new Aggregate_function_invocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SQLiteParser.RULE_aggregate_function_invocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1730;
	        this.aggregate_func();
	        this.state = 1731;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1744;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case SQLiteParser.OPEN_PAR:
	        case SQLiteParser.PLUS:
	        case SQLiteParser.MINUS:
	        case SQLiteParser.TILDE:
	        case SQLiteParser.ABORT_:
	        case SQLiteParser.ACTION_:
	        case SQLiteParser.ADD_:
	        case SQLiteParser.AFTER_:
	        case SQLiteParser.ALL_:
	        case SQLiteParser.ALTER_:
	        case SQLiteParser.ANALYZE_:
	        case SQLiteParser.AND_:
	        case SQLiteParser.AS_:
	        case SQLiteParser.ASC_:
	        case SQLiteParser.ATTACH_:
	        case SQLiteParser.AUTOINCREMENT_:
	        case SQLiteParser.BEFORE_:
	        case SQLiteParser.BEGIN_:
	        case SQLiteParser.BETWEEN_:
	        case SQLiteParser.BY_:
	        case SQLiteParser.CASCADE_:
	        case SQLiteParser.CASE_:
	        case SQLiteParser.CAST_:
	        case SQLiteParser.CHECK_:
	        case SQLiteParser.COLLATE_:
	        case SQLiteParser.COLUMN_:
	        case SQLiteParser.COMMIT_:
	        case SQLiteParser.CONFLICT_:
	        case SQLiteParser.CONSTRAINT_:
	        case SQLiteParser.CREATE_:
	        case SQLiteParser.CROSS_:
	        case SQLiteParser.CURRENT_DATE_:
	        case SQLiteParser.CURRENT_TIME_:
	        case SQLiteParser.CURRENT_TIMESTAMP_:
	        case SQLiteParser.DATABASE_:
	        case SQLiteParser.DEFAULT_:
	        case SQLiteParser.DEFERRABLE_:
	        case SQLiteParser.DEFERRED_:
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.DESC_:
	        case SQLiteParser.DETACH_:
	        case SQLiteParser.DISTINCT_:
	        case SQLiteParser.DROP_:
	        case SQLiteParser.EACH_:
	        case SQLiteParser.ELSE_:
	        case SQLiteParser.END_:
	        case SQLiteParser.ESCAPE_:
	        case SQLiteParser.EXCEPT_:
	        case SQLiteParser.EXCLUSIVE_:
	        case SQLiteParser.EXISTS_:
	        case SQLiteParser.EXPLAIN_:
	        case SQLiteParser.FAIL_:
	        case SQLiteParser.FOR_:
	        case SQLiteParser.FOREIGN_:
	        case SQLiteParser.FROM_:
	        case SQLiteParser.FULL_:
	        case SQLiteParser.GLOB_:
	        case SQLiteParser.GROUP_:
	        case SQLiteParser.HAVING_:
	        case SQLiteParser.IF_:
	        case SQLiteParser.IGNORE_:
	        case SQLiteParser.IMMEDIATE_:
	        case SQLiteParser.IN_:
	        case SQLiteParser.INDEX_:
	        case SQLiteParser.INDEXED_:
	        case SQLiteParser.INITIALLY_:
	        case SQLiteParser.INNER_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.INSTEAD_:
	        case SQLiteParser.INTERSECT_:
	        case SQLiteParser.INTO_:
	        case SQLiteParser.IS_:
	        case SQLiteParser.ISNULL_:
	        case SQLiteParser.JOIN_:
	        case SQLiteParser.KEY_:
	        case SQLiteParser.LEFT_:
	        case SQLiteParser.LIKE_:
	        case SQLiteParser.LIMIT_:
	        case SQLiteParser.MATCH_:
	        case SQLiteParser.NATURAL_:
	        case SQLiteParser.NO_:
	        case SQLiteParser.NOT_:
	        case SQLiteParser.NOTNULL_:
	        case SQLiteParser.NULL_:
	        case SQLiteParser.OF_:
	        case SQLiteParser.OFFSET_:
	        case SQLiteParser.ON_:
	        case SQLiteParser.OR_:
	        case SQLiteParser.ORDER_:
	        case SQLiteParser.OUTER_:
	        case SQLiteParser.PLAN_:
	        case SQLiteParser.PRAGMA_:
	        case SQLiteParser.PRIMARY_:
	        case SQLiteParser.QUERY_:
	        case SQLiteParser.RAISE_:
	        case SQLiteParser.RECURSIVE_:
	        case SQLiteParser.REFERENCES_:
	        case SQLiteParser.REGEXP_:
	        case SQLiteParser.REINDEX_:
	        case SQLiteParser.RELEASE_:
	        case SQLiteParser.RENAME_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.RESTRICT_:
	        case SQLiteParser.RIGHT_:
	        case SQLiteParser.ROLLBACK_:
	        case SQLiteParser.ROW_:
	        case SQLiteParser.ROWS_:
	        case SQLiteParser.SAVEPOINT_:
	        case SQLiteParser.SELECT_:
	        case SQLiteParser.SET_:
	        case SQLiteParser.TABLE_:
	        case SQLiteParser.TEMP_:
	        case SQLiteParser.TEMPORARY_:
	        case SQLiteParser.THEN_:
	        case SQLiteParser.TO_:
	        case SQLiteParser.TRANSACTION_:
	        case SQLiteParser.TRIGGER_:
	        case SQLiteParser.UNION_:
	        case SQLiteParser.UNIQUE_:
	        case SQLiteParser.UPDATE_:
	        case SQLiteParser.USING_:
	        case SQLiteParser.VACUUM_:
	        case SQLiteParser.VALUES_:
	        case SQLiteParser.VIEW_:
	        case SQLiteParser.VIRTUAL_:
	        case SQLiteParser.WHEN_:
	        case SQLiteParser.WHERE_:
	        case SQLiteParser.WITH_:
	        case SQLiteParser.WITHOUT_:
	        case SQLiteParser.FIRST_VALUE_:
	        case SQLiteParser.OVER_:
	        case SQLiteParser.PARTITION_:
	        case SQLiteParser.RANGE_:
	        case SQLiteParser.PRECEDING_:
	        case SQLiteParser.UNBOUNDED_:
	        case SQLiteParser.CURRENT_:
	        case SQLiteParser.FOLLOWING_:
	        case SQLiteParser.CUME_DIST_:
	        case SQLiteParser.DENSE_RANK_:
	        case SQLiteParser.LAG_:
	        case SQLiteParser.LAST_VALUE_:
	        case SQLiteParser.LEAD_:
	        case SQLiteParser.NTH_VALUE_:
	        case SQLiteParser.NTILE_:
	        case SQLiteParser.PERCENT_RANK_:
	        case SQLiteParser.RANK_:
	        case SQLiteParser.ROW_NUMBER_:
	        case SQLiteParser.GENERATED_:
	        case SQLiteParser.ALWAYS_:
	        case SQLiteParser.STORED_:
	        case SQLiteParser.TRUE_:
	        case SQLiteParser.FALSE_:
	        case SQLiteParser.WINDOW_:
	        case SQLiteParser.NULLS_:
	        case SQLiteParser.FIRST_:
	        case SQLiteParser.LAST_:
	        case SQLiteParser.FILTER_:
	        case SQLiteParser.GROUPS_:
	        case SQLiteParser.EXCLUDE_:
	        case SQLiteParser.IDENTIFIER:
	        case SQLiteParser.NUMERIC_LITERAL:
	        case SQLiteParser.BIND_PARAMETER:
	        case SQLiteParser.STRING_LITERAL:
	        case SQLiteParser.BLOB_LITERAL:
	        	this.state = 1733;
	        	this._errHandler.sync(this);
	        	var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        	if(la_===1) {
	        	    this.state = 1732;
	        	    this.match(SQLiteParser.DISTINCT_);

	        	}
	        	this.state = 1735;
	        	this.expr(0);
	        	this.state = 1740;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===SQLiteParser.COMMA) {
	        	    this.state = 1736;
	        	    this.match(SQLiteParser.COMMA);
	        	    this.state = 1737;
	        	    this.expr(0);
	        	    this.state = 1742;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	break;
	        case SQLiteParser.STAR:
	        	this.state = 1743;
	        	this.match(SQLiteParser.STAR);
	        	break;
	        case SQLiteParser.CLOSE_PAR:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1746;
	        this.match(SQLiteParser.CLOSE_PAR);
	        this.state = 1748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.FILTER_) {
	            this.state = 1747;
	            this.filter_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_function_invocation() {
	    let localctx = new Window_function_invocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SQLiteParser.RULE_window_function_invocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1750;
	        this.window_function();
	        this.state = 1751;
	        this.match(SQLiteParser.OPEN_PAR);
	        this.state = 1761;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case SQLiteParser.OPEN_PAR:
	        case SQLiteParser.PLUS:
	        case SQLiteParser.MINUS:
	        case SQLiteParser.TILDE:
	        case SQLiteParser.ABORT_:
	        case SQLiteParser.ACTION_:
	        case SQLiteParser.ADD_:
	        case SQLiteParser.AFTER_:
	        case SQLiteParser.ALL_:
	        case SQLiteParser.ALTER_:
	        case SQLiteParser.ANALYZE_:
	        case SQLiteParser.AND_:
	        case SQLiteParser.AS_:
	        case SQLiteParser.ASC_:
	        case SQLiteParser.ATTACH_:
	        case SQLiteParser.AUTOINCREMENT_:
	        case SQLiteParser.BEFORE_:
	        case SQLiteParser.BEGIN_:
	        case SQLiteParser.BETWEEN_:
	        case SQLiteParser.BY_:
	        case SQLiteParser.CASCADE_:
	        case SQLiteParser.CASE_:
	        case SQLiteParser.CAST_:
	        case SQLiteParser.CHECK_:
	        case SQLiteParser.COLLATE_:
	        case SQLiteParser.COLUMN_:
	        case SQLiteParser.COMMIT_:
	        case SQLiteParser.CONFLICT_:
	        case SQLiteParser.CONSTRAINT_:
	        case SQLiteParser.CREATE_:
	        case SQLiteParser.CROSS_:
	        case SQLiteParser.CURRENT_DATE_:
	        case SQLiteParser.CURRENT_TIME_:
	        case SQLiteParser.CURRENT_TIMESTAMP_:
	        case SQLiteParser.DATABASE_:
	        case SQLiteParser.DEFAULT_:
	        case SQLiteParser.DEFERRABLE_:
	        case SQLiteParser.DEFERRED_:
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.DESC_:
	        case SQLiteParser.DETACH_:
	        case SQLiteParser.DISTINCT_:
	        case SQLiteParser.DROP_:
	        case SQLiteParser.EACH_:
	        case SQLiteParser.ELSE_:
	        case SQLiteParser.END_:
	        case SQLiteParser.ESCAPE_:
	        case SQLiteParser.EXCEPT_:
	        case SQLiteParser.EXCLUSIVE_:
	        case SQLiteParser.EXISTS_:
	        case SQLiteParser.EXPLAIN_:
	        case SQLiteParser.FAIL_:
	        case SQLiteParser.FOR_:
	        case SQLiteParser.FOREIGN_:
	        case SQLiteParser.FROM_:
	        case SQLiteParser.FULL_:
	        case SQLiteParser.GLOB_:
	        case SQLiteParser.GROUP_:
	        case SQLiteParser.HAVING_:
	        case SQLiteParser.IF_:
	        case SQLiteParser.IGNORE_:
	        case SQLiteParser.IMMEDIATE_:
	        case SQLiteParser.IN_:
	        case SQLiteParser.INDEX_:
	        case SQLiteParser.INDEXED_:
	        case SQLiteParser.INITIALLY_:
	        case SQLiteParser.INNER_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.INSTEAD_:
	        case SQLiteParser.INTERSECT_:
	        case SQLiteParser.INTO_:
	        case SQLiteParser.IS_:
	        case SQLiteParser.ISNULL_:
	        case SQLiteParser.JOIN_:
	        case SQLiteParser.KEY_:
	        case SQLiteParser.LEFT_:
	        case SQLiteParser.LIKE_:
	        case SQLiteParser.LIMIT_:
	        case SQLiteParser.MATCH_:
	        case SQLiteParser.NATURAL_:
	        case SQLiteParser.NO_:
	        case SQLiteParser.NOT_:
	        case SQLiteParser.NOTNULL_:
	        case SQLiteParser.NULL_:
	        case SQLiteParser.OF_:
	        case SQLiteParser.OFFSET_:
	        case SQLiteParser.ON_:
	        case SQLiteParser.OR_:
	        case SQLiteParser.ORDER_:
	        case SQLiteParser.OUTER_:
	        case SQLiteParser.PLAN_:
	        case SQLiteParser.PRAGMA_:
	        case SQLiteParser.PRIMARY_:
	        case SQLiteParser.QUERY_:
	        case SQLiteParser.RAISE_:
	        case SQLiteParser.RECURSIVE_:
	        case SQLiteParser.REFERENCES_:
	        case SQLiteParser.REGEXP_:
	        case SQLiteParser.REINDEX_:
	        case SQLiteParser.RELEASE_:
	        case SQLiteParser.RENAME_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.RESTRICT_:
	        case SQLiteParser.RIGHT_:
	        case SQLiteParser.ROLLBACK_:
	        case SQLiteParser.ROW_:
	        case SQLiteParser.ROWS_:
	        case SQLiteParser.SAVEPOINT_:
	        case SQLiteParser.SELECT_:
	        case SQLiteParser.SET_:
	        case SQLiteParser.TABLE_:
	        case SQLiteParser.TEMP_:
	        case SQLiteParser.TEMPORARY_:
	        case SQLiteParser.THEN_:
	        case SQLiteParser.TO_:
	        case SQLiteParser.TRANSACTION_:
	        case SQLiteParser.TRIGGER_:
	        case SQLiteParser.UNION_:
	        case SQLiteParser.UNIQUE_:
	        case SQLiteParser.UPDATE_:
	        case SQLiteParser.USING_:
	        case SQLiteParser.VACUUM_:
	        case SQLiteParser.VALUES_:
	        case SQLiteParser.VIEW_:
	        case SQLiteParser.VIRTUAL_:
	        case SQLiteParser.WHEN_:
	        case SQLiteParser.WHERE_:
	        case SQLiteParser.WITH_:
	        case SQLiteParser.WITHOUT_:
	        case SQLiteParser.FIRST_VALUE_:
	        case SQLiteParser.OVER_:
	        case SQLiteParser.PARTITION_:
	        case SQLiteParser.RANGE_:
	        case SQLiteParser.PRECEDING_:
	        case SQLiteParser.UNBOUNDED_:
	        case SQLiteParser.CURRENT_:
	        case SQLiteParser.FOLLOWING_:
	        case SQLiteParser.CUME_DIST_:
	        case SQLiteParser.DENSE_RANK_:
	        case SQLiteParser.LAG_:
	        case SQLiteParser.LAST_VALUE_:
	        case SQLiteParser.LEAD_:
	        case SQLiteParser.NTH_VALUE_:
	        case SQLiteParser.NTILE_:
	        case SQLiteParser.PERCENT_RANK_:
	        case SQLiteParser.RANK_:
	        case SQLiteParser.ROW_NUMBER_:
	        case SQLiteParser.GENERATED_:
	        case SQLiteParser.ALWAYS_:
	        case SQLiteParser.STORED_:
	        case SQLiteParser.TRUE_:
	        case SQLiteParser.FALSE_:
	        case SQLiteParser.WINDOW_:
	        case SQLiteParser.NULLS_:
	        case SQLiteParser.FIRST_:
	        case SQLiteParser.LAST_:
	        case SQLiteParser.FILTER_:
	        case SQLiteParser.GROUPS_:
	        case SQLiteParser.EXCLUDE_:
	        case SQLiteParser.IDENTIFIER:
	        case SQLiteParser.NUMERIC_LITERAL:
	        case SQLiteParser.BIND_PARAMETER:
	        case SQLiteParser.STRING_LITERAL:
	        case SQLiteParser.BLOB_LITERAL:
	        	this.state = 1752;
	        	this.expr(0);
	        	this.state = 1757;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===SQLiteParser.COMMA) {
	        	    this.state = 1753;
	        	    this.match(SQLiteParser.COMMA);
	        	    this.state = 1754;
	        	    this.expr(0);
	        	    this.state = 1759;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	break;
	        case SQLiteParser.STAR:
	        	this.state = 1760;
	        	this.match(SQLiteParser.STAR);
	        	break;
	        case SQLiteParser.CLOSE_PAR:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1763;
	        this.match(SQLiteParser.CLOSE_PAR);
	        this.state = 1765;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.FILTER_) {
	            this.state = 1764;
	            this.filter_clause();
	        }

	        this.state = 1767;
	        this.match(SQLiteParser.OVER_);
	        this.state = 1770;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1768;
	            this.window_defn();
	            break;

	        case 2:
	            this.state = 1769;
	            this.window_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_stmt() {
	    let localctx = new Common_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SQLiteParser.RULE_common_table_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1772;
	        this.match(SQLiteParser.WITH_);
	        this.state = 1774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        if(la_===1) {
	            this.state = 1773;
	            this.match(SQLiteParser.RECURSIVE_);

	        }
	        this.state = 1776;
	        this.common_table_expression();
	        this.state = 1781;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1777;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1778;
	            this.common_table_expression();
	            this.state = 1783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_stmt() {
	    let localctx = new Order_by_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SQLiteParser.RULE_order_by_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1784;
	        this.match(SQLiteParser.ORDER_);
	        this.state = 1785;
	        this.match(SQLiteParser.BY_);
	        this.state = 1786;
	        this.ordering_term();
	        this.state = 1791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1787;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1788;
	            this.ordering_term();
	            this.state = 1793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limit_stmt() {
	    let localctx = new Limit_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SQLiteParser.RULE_limit_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this.match(SQLiteParser.LIMIT_);
	        this.state = 1795;
	        this.expr(0);
	        this.state = 1798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.COMMA || _la===SQLiteParser.OFFSET_) {
	            this.state = 1796;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.OFFSET_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1797;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordering_term() {
	    let localctx = new Ordering_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SQLiteParser.RULE_ordering_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1800;
	        this.expr(0);
	        this.state = 1803;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.COLLATE_) {
	            this.state = 1801;
	            this.match(SQLiteParser.COLLATE_);
	            this.state = 1802;
	            this.collation_name();
	        }

	        this.state = 1806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ASC_ || _la===SQLiteParser.DESC_) {
	            this.state = 1805;
	            this.asc_desc();
	        }

	        this.state = 1810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.NULLS_) {
	            this.state = 1808;
	            this.match(SQLiteParser.NULLS_);
	            this.state = 1809;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.FIRST_ || _la===SQLiteParser.LAST_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asc_desc() {
	    let localctx = new Asc_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SQLiteParser.RULE_asc_desc);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1812;
	        _la = this._input.LA(1);
	        if(!(_la===SQLiteParser.ASC_ || _la===SQLiteParser.DESC_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_left() {
	    let localctx = new Frame_leftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SQLiteParser.RULE_frame_left);
	    try {
	        this.state = 1824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1814;
	            this.expr(0);
	            this.state = 1815;
	            this.match(SQLiteParser.PRECEDING_);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1817;
	            this.expr(0);
	            this.state = 1818;
	            this.match(SQLiteParser.FOLLOWING_);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1820;
	            this.match(SQLiteParser.CURRENT_);
	            this.state = 1821;
	            this.match(SQLiteParser.ROW_);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1822;
	            this.match(SQLiteParser.UNBOUNDED_);
	            this.state = 1823;
	            this.match(SQLiteParser.PRECEDING_);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_right() {
	    let localctx = new Frame_rightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SQLiteParser.RULE_frame_right);
	    try {
	        this.state = 1836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1826;
	            this.expr(0);
	            this.state = 1827;
	            this.match(SQLiteParser.PRECEDING_);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1829;
	            this.expr(0);
	            this.state = 1830;
	            this.match(SQLiteParser.FOLLOWING_);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1832;
	            this.match(SQLiteParser.CURRENT_);
	            this.state = 1833;
	            this.match(SQLiteParser.ROW_);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1834;
	            this.match(SQLiteParser.UNBOUNDED_);
	            this.state = 1835;
	            this.match(SQLiteParser.FOLLOWING_);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frame_single() {
	    let localctx = new Frame_singleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SQLiteParser.RULE_frame_single);
	    try {
	        this.state = 1845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1838;
	            this.expr(0);
	            this.state = 1839;
	            this.match(SQLiteParser.PRECEDING_);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1841;
	            this.match(SQLiteParser.UNBOUNDED_);
	            this.state = 1842;
	            this.match(SQLiteParser.PRECEDING_);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1843;
	            this.match(SQLiteParser.CURRENT_);
	            this.state = 1844;
	            this.match(SQLiteParser.ROW_);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_function() {
	    let localctx = new Window_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SQLiteParser.RULE_window_function);
	    var _la = 0; // Token type
	    try {
	        this.state = 1932;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.FIRST_VALUE_:
	        case SQLiteParser.LAST_VALUE_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1847;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.FIRST_VALUE_ || _la===SQLiteParser.LAST_VALUE_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1848;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1849;
	            this.expr(0);
	            this.state = 1850;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1851;
	            this.match(SQLiteParser.OVER_);
	            this.state = 1852;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1853;
	                this.partition_by();
	            }

	            this.state = 1856;
	            this.order_by_expr_asc_desc();
	            this.state = 1858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ROWS_ || _la===SQLiteParser.RANGE_ || _la===SQLiteParser.GROUPS_) {
	                this.state = 1857;
	                this.frame_clause();
	            }

	            this.state = 1860;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.CUME_DIST_:
	        case SQLiteParser.PERCENT_RANK_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1862;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.CUME_DIST_ || _la===SQLiteParser.PERCENT_RANK_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1863;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1864;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1865;
	            this.match(SQLiteParser.OVER_);
	            this.state = 1866;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1867;
	                this.partition_by();
	            }

	            this.state = 1871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ORDER_) {
	                this.state = 1870;
	                this.order_by_expr();
	            }

	            this.state = 1873;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.DENSE_RANK_:
	        case SQLiteParser.RANK_:
	        case SQLiteParser.ROW_NUMBER_:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1874;
	            _la = this._input.LA(1);
	            if(!(((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & ((1 << (SQLiteParser.DENSE_RANK_ - 159)) | (1 << (SQLiteParser.RANK_ - 159)) | (1 << (SQLiteParser.ROW_NUMBER_ - 159)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1875;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1876;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1877;
	            this.match(SQLiteParser.OVER_);
	            this.state = 1878;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1880;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1879;
	                this.partition_by();
	            }

	            this.state = 1882;
	            this.order_by_expr_asc_desc();
	            this.state = 1883;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.LAG_:
	        case SQLiteParser.LEAD_:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1885;
	            _la = this._input.LA(1);
	            if(!(_la===SQLiteParser.LAG_ || _la===SQLiteParser.LEAD_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1886;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1887;
	            this.expr(0);
	            this.state = 1889;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 1888;
	                this.of_OF_fset();

	            }
	            this.state = 1892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.COMMA) {
	                this.state = 1891;
	                this.default_DEFAULT__value();
	            }

	            this.state = 1894;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1895;
	            this.match(SQLiteParser.OVER_);
	            this.state = 1896;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1897;
	                this.partition_by();
	            }

	            this.state = 1900;
	            this.order_by_expr_asc_desc();
	            this.state = 1901;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.NTH_VALUE_:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1903;
	            this.match(SQLiteParser.NTH_VALUE_);
	            this.state = 1904;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1905;
	            this.expr(0);
	            this.state = 1906;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1907;
	            this.signed_number();
	            this.state = 1908;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1909;
	            this.match(SQLiteParser.OVER_);
	            this.state = 1910;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1911;
	                this.partition_by();
	            }

	            this.state = 1914;
	            this.order_by_expr_asc_desc();
	            this.state = 1916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ROWS_ || _la===SQLiteParser.RANGE_ || _la===SQLiteParser.GROUPS_) {
	                this.state = 1915;
	                this.frame_clause();
	            }

	            this.state = 1918;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        case SQLiteParser.NTILE_:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1920;
	            this.match(SQLiteParser.NTILE_);
	            this.state = 1921;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1922;
	            this.expr(0);
	            this.state = 1923;
	            this.match(SQLiteParser.CLOSE_PAR);
	            this.state = 1924;
	            this.match(SQLiteParser.OVER_);
	            this.state = 1925;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 1927;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.PARTITION_) {
	                this.state = 1926;
	                this.partition_by();
	            }

	            this.state = 1929;
	            this.order_by_expr_asc_desc();
	            this.state = 1930;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	of_OF_fset() {
	    let localctx = new Of_OF_fsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SQLiteParser.RULE_of_OF_fset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1934;
	        this.match(SQLiteParser.COMMA);
	        this.state = 1935;
	        this.signed_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_DEFAULT__value() {
	    let localctx = new Default_DEFAULT__valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SQLiteParser.RULE_default_DEFAULT__value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1937;
	        this.match(SQLiteParser.COMMA);
	        this.state = 1938;
	        this.signed_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partition_by() {
	    let localctx = new Partition_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SQLiteParser.RULE_partition_by);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        this.match(SQLiteParser.PARTITION_);
	        this.state = 1941;
	        this.match(SQLiteParser.BY_);
	        this.state = 1943; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1942;
	        		this.expr(0);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1945; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,282, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_expr() {
	    let localctx = new Order_by_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SQLiteParser.RULE_order_by_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1947;
	        this.match(SQLiteParser.ORDER_);
	        this.state = 1948;
	        this.match(SQLiteParser.BY_);
	        this.state = 1950; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1949;
	            this.expr(0);
	            this.state = 1952; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SQLiteParser.AND_ - 32)) | (1 << (SQLiteParser.AS_ - 32)) | (1 << (SQLiteParser.ASC_ - 32)) | (1 << (SQLiteParser.ATTACH_ - 32)) | (1 << (SQLiteParser.AUTOINCREMENT_ - 32)) | (1 << (SQLiteParser.BEFORE_ - 32)) | (1 << (SQLiteParser.BEGIN_ - 32)) | (1 << (SQLiteParser.BETWEEN_ - 32)) | (1 << (SQLiteParser.BY_ - 32)) | (1 << (SQLiteParser.CASCADE_ - 32)) | (1 << (SQLiteParser.CASE_ - 32)) | (1 << (SQLiteParser.CAST_ - 32)) | (1 << (SQLiteParser.CHECK_ - 32)) | (1 << (SQLiteParser.COLLATE_ - 32)) | (1 << (SQLiteParser.COLUMN_ - 32)) | (1 << (SQLiteParser.COMMIT_ - 32)) | (1 << (SQLiteParser.CONFLICT_ - 32)) | (1 << (SQLiteParser.CONSTRAINT_ - 32)) | (1 << (SQLiteParser.CREATE_ - 32)) | (1 << (SQLiteParser.CROSS_ - 32)) | (1 << (SQLiteParser.CURRENT_DATE_ - 32)) | (1 << (SQLiteParser.CURRENT_TIME_ - 32)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 32)) | (1 << (SQLiteParser.DATABASE_ - 32)) | (1 << (SQLiteParser.DEFAULT_ - 32)) | (1 << (SQLiteParser.DEFERRABLE_ - 32)) | (1 << (SQLiteParser.DEFERRED_ - 32)) | (1 << (SQLiteParser.DELETE_ - 32)) | (1 << (SQLiteParser.DESC_ - 32)) | (1 << (SQLiteParser.DETACH_ - 32)) | (1 << (SQLiteParser.DISTINCT_ - 32)) | (1 << (SQLiteParser.DROP_ - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SQLiteParser.LEFT_ - 96)) | (1 << (SQLiteParser.LIKE_ - 96)) | (1 << (SQLiteParser.LIMIT_ - 96)) | (1 << (SQLiteParser.MATCH_ - 96)) | (1 << (SQLiteParser.NATURAL_ - 96)) | (1 << (SQLiteParser.NO_ - 96)) | (1 << (SQLiteParser.NOT_ - 96)) | (1 << (SQLiteParser.NOTNULL_ - 96)) | (1 << (SQLiteParser.NULL_ - 96)) | (1 << (SQLiteParser.OF_ - 96)) | (1 << (SQLiteParser.OFFSET_ - 96)) | (1 << (SQLiteParser.ON_ - 96)) | (1 << (SQLiteParser.OR_ - 96)) | (1 << (SQLiteParser.ORDER_ - 96)) | (1 << (SQLiteParser.OUTER_ - 96)) | (1 << (SQLiteParser.PLAN_ - 96)) | (1 << (SQLiteParser.PRAGMA_ - 96)) | (1 << (SQLiteParser.PRIMARY_ - 96)) | (1 << (SQLiteParser.QUERY_ - 96)) | (1 << (SQLiteParser.RAISE_ - 96)) | (1 << (SQLiteParser.RECURSIVE_ - 96)) | (1 << (SQLiteParser.REFERENCES_ - 96)) | (1 << (SQLiteParser.REGEXP_ - 96)) | (1 << (SQLiteParser.REINDEX_ - 96)) | (1 << (SQLiteParser.RELEASE_ - 96)) | (1 << (SQLiteParser.RENAME_ - 96)) | (1 << (SQLiteParser.REPLACE_ - 96)) | (1 << (SQLiteParser.RESTRICT_ - 96)) | (1 << (SQLiteParser.RIGHT_ - 96)) | (1 << (SQLiteParser.ROLLBACK_ - 96)) | (1 << (SQLiteParser.ROW_ - 96)) | (1 << (SQLiteParser.ROWS_ - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SQLiteParser.LAG_ - 160)) | (1 << (SQLiteParser.LAST_VALUE_ - 160)) | (1 << (SQLiteParser.LEAD_ - 160)) | (1 << (SQLiteParser.NTH_VALUE_ - 160)) | (1 << (SQLiteParser.NTILE_ - 160)) | (1 << (SQLiteParser.PERCENT_RANK_ - 160)) | (1 << (SQLiteParser.RANK_ - 160)) | (1 << (SQLiteParser.ROW_NUMBER_ - 160)) | (1 << (SQLiteParser.GENERATED_ - 160)) | (1 << (SQLiteParser.ALWAYS_ - 160)) | (1 << (SQLiteParser.STORED_ - 160)) | (1 << (SQLiteParser.TRUE_ - 160)) | (1 << (SQLiteParser.FALSE_ - 160)) | (1 << (SQLiteParser.WINDOW_ - 160)) | (1 << (SQLiteParser.NULLS_ - 160)) | (1 << (SQLiteParser.FIRST_ - 160)) | (1 << (SQLiteParser.LAST_ - 160)) | (1 << (SQLiteParser.FILTER_ - 160)) | (1 << (SQLiteParser.GROUPS_ - 160)) | (1 << (SQLiteParser.EXCLUDE_ - 160)) | (1 << (SQLiteParser.IDENTIFIER - 160)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 160)) | (1 << (SQLiteParser.BIND_PARAMETER - 160)) | (1 << (SQLiteParser.STRING_LITERAL - 160)) | (1 << (SQLiteParser.BLOB_LITERAL - 160)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_expr_asc_desc() {
	    let localctx = new Order_by_expr_asc_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SQLiteParser.RULE_order_by_expr_asc_desc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1954;
	        this.match(SQLiteParser.ORDER_);
	        this.state = 1955;
	        this.match(SQLiteParser.BY_);
	        this.state = 1956;
	        this.expr_asc_desc();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_asc_desc() {
	    let localctx = new Expr_asc_descContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SQLiteParser.RULE_expr_asc_desc);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1958;
	        this.expr(0);
	        this.state = 1960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SQLiteParser.ASC_ || _la===SQLiteParser.DESC_) {
	            this.state = 1959;
	            this.asc_desc();
	        }

	        this.state = 1969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SQLiteParser.COMMA) {
	            this.state = 1962;
	            this.match(SQLiteParser.COMMA);
	            this.state = 1963;
	            this.expr(0);
	            this.state = 1965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SQLiteParser.ASC_ || _la===SQLiteParser.DESC_) {
	                this.state = 1964;
	                this.asc_desc();
	            }

	            this.state = 1971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initial_select() {
	    let localctx = new Initial_selectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SQLiteParser.RULE_initial_select);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1972;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recursive__select() {
	    let localctx = new Recursive__selectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SQLiteParser.RULE_recursive__select);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1974;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_operator() {
	    let localctx = new Unary_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SQLiteParser.RULE_unary_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1976;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) !== 0) || _la===SQLiteParser.NOT_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error_message() {
	    let localctx = new Error_messageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SQLiteParser.RULE_error_message);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1978;
	        this.match(SQLiteParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_argument() {
	    let localctx = new Module_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SQLiteParser.RULE_module_argument);
	    try {
	        this.state = 1982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1980;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1981;
	            this.column_def();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_alias() {
	    let localctx = new Column_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SQLiteParser.RULE_column_alias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1984;
	        _la = this._input.LA(1);
	        if(!(_la===SQLiteParser.IDENTIFIER || _la===SQLiteParser.STRING_LITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SQLiteParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1986;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SQLiteParser.ABORT_ - 25)) | (1 << (SQLiteParser.ACTION_ - 25)) | (1 << (SQLiteParser.ADD_ - 25)) | (1 << (SQLiteParser.AFTER_ - 25)) | (1 << (SQLiteParser.ALL_ - 25)) | (1 << (SQLiteParser.ALTER_ - 25)) | (1 << (SQLiteParser.ANALYZE_ - 25)) | (1 << (SQLiteParser.AND_ - 25)) | (1 << (SQLiteParser.AS_ - 25)) | (1 << (SQLiteParser.ASC_ - 25)) | (1 << (SQLiteParser.ATTACH_ - 25)) | (1 << (SQLiteParser.AUTOINCREMENT_ - 25)) | (1 << (SQLiteParser.BEFORE_ - 25)) | (1 << (SQLiteParser.BEGIN_ - 25)) | (1 << (SQLiteParser.BETWEEN_ - 25)) | (1 << (SQLiteParser.BY_ - 25)) | (1 << (SQLiteParser.CASCADE_ - 25)) | (1 << (SQLiteParser.CASE_ - 25)) | (1 << (SQLiteParser.CAST_ - 25)) | (1 << (SQLiteParser.CHECK_ - 25)) | (1 << (SQLiteParser.COLLATE_ - 25)) | (1 << (SQLiteParser.COLUMN_ - 25)) | (1 << (SQLiteParser.COMMIT_ - 25)) | (1 << (SQLiteParser.CONFLICT_ - 25)) | (1 << (SQLiteParser.CONSTRAINT_ - 25)) | (1 << (SQLiteParser.CREATE_ - 25)) | (1 << (SQLiteParser.CROSS_ - 25)) | (1 << (SQLiteParser.CURRENT_DATE_ - 25)) | (1 << (SQLiteParser.CURRENT_TIME_ - 25)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 25)) | (1 << (SQLiteParser.DATABASE_ - 25)) | (1 << (SQLiteParser.DEFAULT_ - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SQLiteParser.DEFERRABLE_ - 57)) | (1 << (SQLiteParser.DEFERRED_ - 57)) | (1 << (SQLiteParser.DELETE_ - 57)) | (1 << (SQLiteParser.DESC_ - 57)) | (1 << (SQLiteParser.DETACH_ - 57)) | (1 << (SQLiteParser.DISTINCT_ - 57)) | (1 << (SQLiteParser.DROP_ - 57)) | (1 << (SQLiteParser.EACH_ - 57)) | (1 << (SQLiteParser.ELSE_ - 57)) | (1 << (SQLiteParser.END_ - 57)) | (1 << (SQLiteParser.ESCAPE_ - 57)) | (1 << (SQLiteParser.EXCEPT_ - 57)) | (1 << (SQLiteParser.EXCLUSIVE_ - 57)) | (1 << (SQLiteParser.EXISTS_ - 57)) | (1 << (SQLiteParser.EXPLAIN_ - 57)) | (1 << (SQLiteParser.FAIL_ - 57)) | (1 << (SQLiteParser.FOR_ - 57)) | (1 << (SQLiteParser.FOREIGN_ - 57)) | (1 << (SQLiteParser.FROM_ - 57)) | (1 << (SQLiteParser.FULL_ - 57)) | (1 << (SQLiteParser.GLOB_ - 57)) | (1 << (SQLiteParser.GROUP_ - 57)) | (1 << (SQLiteParser.HAVING_ - 57)) | (1 << (SQLiteParser.IF_ - 57)) | (1 << (SQLiteParser.IGNORE_ - 57)) | (1 << (SQLiteParser.IMMEDIATE_ - 57)) | (1 << (SQLiteParser.IN_ - 57)) | (1 << (SQLiteParser.INDEX_ - 57)) | (1 << (SQLiteParser.INDEXED_ - 57)) | (1 << (SQLiteParser.INITIALLY_ - 57)) | (1 << (SQLiteParser.INNER_ - 57)) | (1 << (SQLiteParser.INSERT_ - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (SQLiteParser.INSTEAD_ - 89)) | (1 << (SQLiteParser.INTERSECT_ - 89)) | (1 << (SQLiteParser.INTO_ - 89)) | (1 << (SQLiteParser.IS_ - 89)) | (1 << (SQLiteParser.ISNULL_ - 89)) | (1 << (SQLiteParser.JOIN_ - 89)) | (1 << (SQLiteParser.KEY_ - 89)) | (1 << (SQLiteParser.LEFT_ - 89)) | (1 << (SQLiteParser.LIKE_ - 89)) | (1 << (SQLiteParser.LIMIT_ - 89)) | (1 << (SQLiteParser.MATCH_ - 89)) | (1 << (SQLiteParser.NATURAL_ - 89)) | (1 << (SQLiteParser.NO_ - 89)) | (1 << (SQLiteParser.NOT_ - 89)) | (1 << (SQLiteParser.NOTNULL_ - 89)) | (1 << (SQLiteParser.NULL_ - 89)) | (1 << (SQLiteParser.OF_ - 89)) | (1 << (SQLiteParser.OFFSET_ - 89)) | (1 << (SQLiteParser.ON_ - 89)) | (1 << (SQLiteParser.OR_ - 89)) | (1 << (SQLiteParser.ORDER_ - 89)) | (1 << (SQLiteParser.OUTER_ - 89)) | (1 << (SQLiteParser.PLAN_ - 89)) | (1 << (SQLiteParser.PRAGMA_ - 89)) | (1 << (SQLiteParser.PRIMARY_ - 89)) | (1 << (SQLiteParser.QUERY_ - 89)) | (1 << (SQLiteParser.RAISE_ - 89)) | (1 << (SQLiteParser.RECURSIVE_ - 89)) | (1 << (SQLiteParser.REFERENCES_ - 89)) | (1 << (SQLiteParser.REGEXP_ - 89)) | (1 << (SQLiteParser.REINDEX_ - 89)) | (1 << (SQLiteParser.RELEASE_ - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SQLiteParser.RENAME_ - 121)) | (1 << (SQLiteParser.REPLACE_ - 121)) | (1 << (SQLiteParser.RESTRICT_ - 121)) | (1 << (SQLiteParser.RIGHT_ - 121)) | (1 << (SQLiteParser.ROLLBACK_ - 121)) | (1 << (SQLiteParser.ROW_ - 121)) | (1 << (SQLiteParser.ROWS_ - 121)) | (1 << (SQLiteParser.SAVEPOINT_ - 121)) | (1 << (SQLiteParser.SELECT_ - 121)) | (1 << (SQLiteParser.SET_ - 121)) | (1 << (SQLiteParser.TABLE_ - 121)) | (1 << (SQLiteParser.TEMP_ - 121)) | (1 << (SQLiteParser.TEMPORARY_ - 121)) | (1 << (SQLiteParser.THEN_ - 121)) | (1 << (SQLiteParser.TO_ - 121)) | (1 << (SQLiteParser.TRANSACTION_ - 121)) | (1 << (SQLiteParser.TRIGGER_ - 121)) | (1 << (SQLiteParser.UNION_ - 121)) | (1 << (SQLiteParser.UNIQUE_ - 121)) | (1 << (SQLiteParser.UPDATE_ - 121)) | (1 << (SQLiteParser.USING_ - 121)) | (1 << (SQLiteParser.VACUUM_ - 121)) | (1 << (SQLiteParser.VALUES_ - 121)) | (1 << (SQLiteParser.VIEW_ - 121)) | (1 << (SQLiteParser.VIRTUAL_ - 121)) | (1 << (SQLiteParser.WHEN_ - 121)) | (1 << (SQLiteParser.WHERE_ - 121)) | (1 << (SQLiteParser.WITH_ - 121)) | (1 << (SQLiteParser.WITHOUT_ - 121)) | (1 << (SQLiteParser.FIRST_VALUE_ - 121)) | (1 << (SQLiteParser.OVER_ - 121)) | (1 << (SQLiteParser.PARTITION_ - 121)))) !== 0) || ((((_la - 153)) & ~0x1f) == 0 && ((1 << (_la - 153)) & ((1 << (SQLiteParser.RANGE_ - 153)) | (1 << (SQLiteParser.PRECEDING_ - 153)) | (1 << (SQLiteParser.UNBOUNDED_ - 153)) | (1 << (SQLiteParser.CURRENT_ - 153)) | (1 << (SQLiteParser.FOLLOWING_ - 153)) | (1 << (SQLiteParser.CUME_DIST_ - 153)) | (1 << (SQLiteParser.DENSE_RANK_ - 153)) | (1 << (SQLiteParser.LAG_ - 153)) | (1 << (SQLiteParser.LAST_VALUE_ - 153)) | (1 << (SQLiteParser.LEAD_ - 153)) | (1 << (SQLiteParser.NTH_VALUE_ - 153)) | (1 << (SQLiteParser.NTILE_ - 153)) | (1 << (SQLiteParser.PERCENT_RANK_ - 153)) | (1 << (SQLiteParser.RANK_ - 153)) | (1 << (SQLiteParser.ROW_NUMBER_ - 153)) | (1 << (SQLiteParser.GENERATED_ - 153)) | (1 << (SQLiteParser.ALWAYS_ - 153)) | (1 << (SQLiteParser.STORED_ - 153)) | (1 << (SQLiteParser.TRUE_ - 153)) | (1 << (SQLiteParser.FALSE_ - 153)) | (1 << (SQLiteParser.WINDOW_ - 153)) | (1 << (SQLiteParser.NULLS_ - 153)) | (1 << (SQLiteParser.FIRST_ - 153)) | (1 << (SQLiteParser.LAST_ - 153)) | (1 << (SQLiteParser.FILTER_ - 153)) | (1 << (SQLiteParser.GROUPS_ - 153)) | (1 << (SQLiteParser.EXCLUDE_ - 153)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SQLiteParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1988;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SQLiteParser.RULE_function_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1990;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schema_name() {
	    let localctx = new Schema_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SQLiteParser.RULE_schema_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1992;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_name() {
	    let localctx = new Table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SQLiteParser.RULE_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1994;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_index_name() {
	    let localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SQLiteParser.RULE_table_or_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1996;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_table_name() {
	    let localctx = new New_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SQLiteParser.RULE_new_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1998;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SQLiteParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2000;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collation_name() {
	    let localctx = new Collation_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SQLiteParser.RULE_collation_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2002;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_table() {
	    let localctx = new Foreign_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SQLiteParser.RULE_foreign_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2004;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_name() {
	    let localctx = new Index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SQLiteParser.RULE_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2006;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger_name() {
	    let localctx = new Trigger_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SQLiteParser.RULE_trigger_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2008;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_name() {
	    let localctx = new View_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SQLiteParser.RULE_view_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2010;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_name() {
	    let localctx = new Module_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SQLiteParser.RULE_module_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2012;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_name() {
	    let localctx = new Pragma_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SQLiteParser.RULE_pragma_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2014;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_name() {
	    let localctx = new Savepoint_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SQLiteParser.RULE_savepoint_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_alias() {
	    let localctx = new Table_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SQLiteParser.RULE_table_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2018;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_name() {
	    let localctx = new Transaction_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SQLiteParser.RULE_transaction_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2020;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_name() {
	    let localctx = new Window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SQLiteParser.RULE_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2022;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SQLiteParser.RULE_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2024;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filename() {
	    let localctx = new FilenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SQLiteParser.RULE_filename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2026;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_window_name() {
	    let localctx = new Base_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SQLiteParser.RULE_base_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2028;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_func() {
	    let localctx = new Simple_funcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SQLiteParser.RULE_simple_func);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2030;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate_func() {
	    let localctx = new Aggregate_funcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SQLiteParser.RULE_aggregate_func);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2032;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_function_name() {
	    let localctx = new Table_function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SQLiteParser.RULE_table_function_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2034;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_name() {
	    let localctx = new Any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SQLiteParser.RULE_any_name);
	    try {
	        this.state = 2043;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SQLiteParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2036;
	            this.match(SQLiteParser.IDENTIFIER);
	            break;
	        case SQLiteParser.ABORT_:
	        case SQLiteParser.ACTION_:
	        case SQLiteParser.ADD_:
	        case SQLiteParser.AFTER_:
	        case SQLiteParser.ALL_:
	        case SQLiteParser.ALTER_:
	        case SQLiteParser.ANALYZE_:
	        case SQLiteParser.AND_:
	        case SQLiteParser.AS_:
	        case SQLiteParser.ASC_:
	        case SQLiteParser.ATTACH_:
	        case SQLiteParser.AUTOINCREMENT_:
	        case SQLiteParser.BEFORE_:
	        case SQLiteParser.BEGIN_:
	        case SQLiteParser.BETWEEN_:
	        case SQLiteParser.BY_:
	        case SQLiteParser.CASCADE_:
	        case SQLiteParser.CASE_:
	        case SQLiteParser.CAST_:
	        case SQLiteParser.CHECK_:
	        case SQLiteParser.COLLATE_:
	        case SQLiteParser.COLUMN_:
	        case SQLiteParser.COMMIT_:
	        case SQLiteParser.CONFLICT_:
	        case SQLiteParser.CONSTRAINT_:
	        case SQLiteParser.CREATE_:
	        case SQLiteParser.CROSS_:
	        case SQLiteParser.CURRENT_DATE_:
	        case SQLiteParser.CURRENT_TIME_:
	        case SQLiteParser.CURRENT_TIMESTAMP_:
	        case SQLiteParser.DATABASE_:
	        case SQLiteParser.DEFAULT_:
	        case SQLiteParser.DEFERRABLE_:
	        case SQLiteParser.DEFERRED_:
	        case SQLiteParser.DELETE_:
	        case SQLiteParser.DESC_:
	        case SQLiteParser.DETACH_:
	        case SQLiteParser.DISTINCT_:
	        case SQLiteParser.DROP_:
	        case SQLiteParser.EACH_:
	        case SQLiteParser.ELSE_:
	        case SQLiteParser.END_:
	        case SQLiteParser.ESCAPE_:
	        case SQLiteParser.EXCEPT_:
	        case SQLiteParser.EXCLUSIVE_:
	        case SQLiteParser.EXISTS_:
	        case SQLiteParser.EXPLAIN_:
	        case SQLiteParser.FAIL_:
	        case SQLiteParser.FOR_:
	        case SQLiteParser.FOREIGN_:
	        case SQLiteParser.FROM_:
	        case SQLiteParser.FULL_:
	        case SQLiteParser.GLOB_:
	        case SQLiteParser.GROUP_:
	        case SQLiteParser.HAVING_:
	        case SQLiteParser.IF_:
	        case SQLiteParser.IGNORE_:
	        case SQLiteParser.IMMEDIATE_:
	        case SQLiteParser.IN_:
	        case SQLiteParser.INDEX_:
	        case SQLiteParser.INDEXED_:
	        case SQLiteParser.INITIALLY_:
	        case SQLiteParser.INNER_:
	        case SQLiteParser.INSERT_:
	        case SQLiteParser.INSTEAD_:
	        case SQLiteParser.INTERSECT_:
	        case SQLiteParser.INTO_:
	        case SQLiteParser.IS_:
	        case SQLiteParser.ISNULL_:
	        case SQLiteParser.JOIN_:
	        case SQLiteParser.KEY_:
	        case SQLiteParser.LEFT_:
	        case SQLiteParser.LIKE_:
	        case SQLiteParser.LIMIT_:
	        case SQLiteParser.MATCH_:
	        case SQLiteParser.NATURAL_:
	        case SQLiteParser.NO_:
	        case SQLiteParser.NOT_:
	        case SQLiteParser.NOTNULL_:
	        case SQLiteParser.NULL_:
	        case SQLiteParser.OF_:
	        case SQLiteParser.OFFSET_:
	        case SQLiteParser.ON_:
	        case SQLiteParser.OR_:
	        case SQLiteParser.ORDER_:
	        case SQLiteParser.OUTER_:
	        case SQLiteParser.PLAN_:
	        case SQLiteParser.PRAGMA_:
	        case SQLiteParser.PRIMARY_:
	        case SQLiteParser.QUERY_:
	        case SQLiteParser.RAISE_:
	        case SQLiteParser.RECURSIVE_:
	        case SQLiteParser.REFERENCES_:
	        case SQLiteParser.REGEXP_:
	        case SQLiteParser.REINDEX_:
	        case SQLiteParser.RELEASE_:
	        case SQLiteParser.RENAME_:
	        case SQLiteParser.REPLACE_:
	        case SQLiteParser.RESTRICT_:
	        case SQLiteParser.RIGHT_:
	        case SQLiteParser.ROLLBACK_:
	        case SQLiteParser.ROW_:
	        case SQLiteParser.ROWS_:
	        case SQLiteParser.SAVEPOINT_:
	        case SQLiteParser.SELECT_:
	        case SQLiteParser.SET_:
	        case SQLiteParser.TABLE_:
	        case SQLiteParser.TEMP_:
	        case SQLiteParser.TEMPORARY_:
	        case SQLiteParser.THEN_:
	        case SQLiteParser.TO_:
	        case SQLiteParser.TRANSACTION_:
	        case SQLiteParser.TRIGGER_:
	        case SQLiteParser.UNION_:
	        case SQLiteParser.UNIQUE_:
	        case SQLiteParser.UPDATE_:
	        case SQLiteParser.USING_:
	        case SQLiteParser.VACUUM_:
	        case SQLiteParser.VALUES_:
	        case SQLiteParser.VIEW_:
	        case SQLiteParser.VIRTUAL_:
	        case SQLiteParser.WHEN_:
	        case SQLiteParser.WHERE_:
	        case SQLiteParser.WITH_:
	        case SQLiteParser.WITHOUT_:
	        case SQLiteParser.FIRST_VALUE_:
	        case SQLiteParser.OVER_:
	        case SQLiteParser.PARTITION_:
	        case SQLiteParser.RANGE_:
	        case SQLiteParser.PRECEDING_:
	        case SQLiteParser.UNBOUNDED_:
	        case SQLiteParser.CURRENT_:
	        case SQLiteParser.FOLLOWING_:
	        case SQLiteParser.CUME_DIST_:
	        case SQLiteParser.DENSE_RANK_:
	        case SQLiteParser.LAG_:
	        case SQLiteParser.LAST_VALUE_:
	        case SQLiteParser.LEAD_:
	        case SQLiteParser.NTH_VALUE_:
	        case SQLiteParser.NTILE_:
	        case SQLiteParser.PERCENT_RANK_:
	        case SQLiteParser.RANK_:
	        case SQLiteParser.ROW_NUMBER_:
	        case SQLiteParser.GENERATED_:
	        case SQLiteParser.ALWAYS_:
	        case SQLiteParser.STORED_:
	        case SQLiteParser.TRUE_:
	        case SQLiteParser.FALSE_:
	        case SQLiteParser.WINDOW_:
	        case SQLiteParser.NULLS_:
	        case SQLiteParser.FIRST_:
	        case SQLiteParser.LAST_:
	        case SQLiteParser.FILTER_:
	        case SQLiteParser.GROUPS_:
	        case SQLiteParser.EXCLUDE_:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2037;
	            this.keyword();
	            break;
	        case SQLiteParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2038;
	            this.match(SQLiteParser.STRING_LITERAL);
	            break;
	        case SQLiteParser.OPEN_PAR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2039;
	            this.match(SQLiteParser.OPEN_PAR);
	            this.state = 2040;
	            this.any_name();
	            this.state = 2041;
	            this.match(SQLiteParser.CLOSE_PAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SQLiteParser.EOF = antlr4.Token.EOF;
SQLiteParser.SCOL = 1;
SQLiteParser.DOT = 2;
SQLiteParser.OPEN_PAR = 3;
SQLiteParser.CLOSE_PAR = 4;
SQLiteParser.COMMA = 5;
SQLiteParser.ASSIGN = 6;
SQLiteParser.STAR = 7;
SQLiteParser.PLUS = 8;
SQLiteParser.MINUS = 9;
SQLiteParser.TILDE = 10;
SQLiteParser.PIPE2 = 11;
SQLiteParser.DIV = 12;
SQLiteParser.MOD = 13;
SQLiteParser.LT2 = 14;
SQLiteParser.GT2 = 15;
SQLiteParser.AMP = 16;
SQLiteParser.PIPE = 17;
SQLiteParser.LT = 18;
SQLiteParser.LT_EQ = 19;
SQLiteParser.GT = 20;
SQLiteParser.GT_EQ = 21;
SQLiteParser.EQ = 22;
SQLiteParser.NOT_EQ1 = 23;
SQLiteParser.NOT_EQ2 = 24;
SQLiteParser.ABORT_ = 25;
SQLiteParser.ACTION_ = 26;
SQLiteParser.ADD_ = 27;
SQLiteParser.AFTER_ = 28;
SQLiteParser.ALL_ = 29;
SQLiteParser.ALTER_ = 30;
SQLiteParser.ANALYZE_ = 31;
SQLiteParser.AND_ = 32;
SQLiteParser.AS_ = 33;
SQLiteParser.ASC_ = 34;
SQLiteParser.ATTACH_ = 35;
SQLiteParser.AUTOINCREMENT_ = 36;
SQLiteParser.BEFORE_ = 37;
SQLiteParser.BEGIN_ = 38;
SQLiteParser.BETWEEN_ = 39;
SQLiteParser.BY_ = 40;
SQLiteParser.CASCADE_ = 41;
SQLiteParser.CASE_ = 42;
SQLiteParser.CAST_ = 43;
SQLiteParser.CHECK_ = 44;
SQLiteParser.COLLATE_ = 45;
SQLiteParser.COLUMN_ = 46;
SQLiteParser.COMMIT_ = 47;
SQLiteParser.CONFLICT_ = 48;
SQLiteParser.CONSTRAINT_ = 49;
SQLiteParser.CREATE_ = 50;
SQLiteParser.CROSS_ = 51;
SQLiteParser.CURRENT_DATE_ = 52;
SQLiteParser.CURRENT_TIME_ = 53;
SQLiteParser.CURRENT_TIMESTAMP_ = 54;
SQLiteParser.DATABASE_ = 55;
SQLiteParser.DEFAULT_ = 56;
SQLiteParser.DEFERRABLE_ = 57;
SQLiteParser.DEFERRED_ = 58;
SQLiteParser.DELETE_ = 59;
SQLiteParser.DESC_ = 60;
SQLiteParser.DETACH_ = 61;
SQLiteParser.DISTINCT_ = 62;
SQLiteParser.DROP_ = 63;
SQLiteParser.EACH_ = 64;
SQLiteParser.ELSE_ = 65;
SQLiteParser.END_ = 66;
SQLiteParser.ESCAPE_ = 67;
SQLiteParser.EXCEPT_ = 68;
SQLiteParser.EXCLUSIVE_ = 69;
SQLiteParser.EXISTS_ = 70;
SQLiteParser.EXPLAIN_ = 71;
SQLiteParser.FAIL_ = 72;
SQLiteParser.FOR_ = 73;
SQLiteParser.FOREIGN_ = 74;
SQLiteParser.FROM_ = 75;
SQLiteParser.FULL_ = 76;
SQLiteParser.GLOB_ = 77;
SQLiteParser.GROUP_ = 78;
SQLiteParser.HAVING_ = 79;
SQLiteParser.IF_ = 80;
SQLiteParser.IGNORE_ = 81;
SQLiteParser.IMMEDIATE_ = 82;
SQLiteParser.IN_ = 83;
SQLiteParser.INDEX_ = 84;
SQLiteParser.INDEXED_ = 85;
SQLiteParser.INITIALLY_ = 86;
SQLiteParser.INNER_ = 87;
SQLiteParser.INSERT_ = 88;
SQLiteParser.INSTEAD_ = 89;
SQLiteParser.INTERSECT_ = 90;
SQLiteParser.INTO_ = 91;
SQLiteParser.IS_ = 92;
SQLiteParser.ISNULL_ = 93;
SQLiteParser.JOIN_ = 94;
SQLiteParser.KEY_ = 95;
SQLiteParser.LEFT_ = 96;
SQLiteParser.LIKE_ = 97;
SQLiteParser.LIMIT_ = 98;
SQLiteParser.MATCH_ = 99;
SQLiteParser.NATURAL_ = 100;
SQLiteParser.NO_ = 101;
SQLiteParser.NOT_ = 102;
SQLiteParser.NOTNULL_ = 103;
SQLiteParser.NULL_ = 104;
SQLiteParser.OF_ = 105;
SQLiteParser.OFFSET_ = 106;
SQLiteParser.ON_ = 107;
SQLiteParser.OR_ = 108;
SQLiteParser.ORDER_ = 109;
SQLiteParser.OUTER_ = 110;
SQLiteParser.PLAN_ = 111;
SQLiteParser.PRAGMA_ = 112;
SQLiteParser.PRIMARY_ = 113;
SQLiteParser.QUERY_ = 114;
SQLiteParser.RAISE_ = 115;
SQLiteParser.RECURSIVE_ = 116;
SQLiteParser.REFERENCES_ = 117;
SQLiteParser.REGEXP_ = 118;
SQLiteParser.REINDEX_ = 119;
SQLiteParser.RELEASE_ = 120;
SQLiteParser.RENAME_ = 121;
SQLiteParser.REPLACE_ = 122;
SQLiteParser.RESTRICT_ = 123;
SQLiteParser.RIGHT_ = 124;
SQLiteParser.ROLLBACK_ = 125;
SQLiteParser.ROW_ = 126;
SQLiteParser.ROWS_ = 127;
SQLiteParser.SAVEPOINT_ = 128;
SQLiteParser.SELECT_ = 129;
SQLiteParser.SET_ = 130;
SQLiteParser.TABLE_ = 131;
SQLiteParser.TEMP_ = 132;
SQLiteParser.TEMPORARY_ = 133;
SQLiteParser.THEN_ = 134;
SQLiteParser.TO_ = 135;
SQLiteParser.TRANSACTION_ = 136;
SQLiteParser.TRIGGER_ = 137;
SQLiteParser.UNION_ = 138;
SQLiteParser.UNIQUE_ = 139;
SQLiteParser.UPDATE_ = 140;
SQLiteParser.USING_ = 141;
SQLiteParser.VACUUM_ = 142;
SQLiteParser.VALUES_ = 143;
SQLiteParser.VIEW_ = 144;
SQLiteParser.VIRTUAL_ = 145;
SQLiteParser.WHEN_ = 146;
SQLiteParser.WHERE_ = 147;
SQLiteParser.WITH_ = 148;
SQLiteParser.WITHOUT_ = 149;
SQLiteParser.FIRST_VALUE_ = 150;
SQLiteParser.OVER_ = 151;
SQLiteParser.PARTITION_ = 152;
SQLiteParser.RANGE_ = 153;
SQLiteParser.PRECEDING_ = 154;
SQLiteParser.UNBOUNDED_ = 155;
SQLiteParser.CURRENT_ = 156;
SQLiteParser.FOLLOWING_ = 157;
SQLiteParser.CUME_DIST_ = 158;
SQLiteParser.DENSE_RANK_ = 159;
SQLiteParser.LAG_ = 160;
SQLiteParser.LAST_VALUE_ = 161;
SQLiteParser.LEAD_ = 162;
SQLiteParser.NTH_VALUE_ = 163;
SQLiteParser.NTILE_ = 164;
SQLiteParser.PERCENT_RANK_ = 165;
SQLiteParser.RANK_ = 166;
SQLiteParser.ROW_NUMBER_ = 167;
SQLiteParser.GENERATED_ = 168;
SQLiteParser.ALWAYS_ = 169;
SQLiteParser.STORED_ = 170;
SQLiteParser.TRUE_ = 171;
SQLiteParser.FALSE_ = 172;
SQLiteParser.WINDOW_ = 173;
SQLiteParser.NULLS_ = 174;
SQLiteParser.FIRST_ = 175;
SQLiteParser.LAST_ = 176;
SQLiteParser.FILTER_ = 177;
SQLiteParser.GROUPS_ = 178;
SQLiteParser.EXCLUDE_ = 179;
SQLiteParser.TIES_ = 180;
SQLiteParser.OTHERS_ = 181;
SQLiteParser.DO_ = 182;
SQLiteParser.NOTHING_ = 183;
SQLiteParser.IDENTIFIER = 184;
SQLiteParser.NUMERIC_LITERAL = 185;
SQLiteParser.BIND_PARAMETER = 186;
SQLiteParser.STRING_LITERAL = 187;
SQLiteParser.BLOB_LITERAL = 188;
SQLiteParser.SINGLE_LINE_COMMENT = 189;
SQLiteParser.MULTILINE_COMMENT = 190;
SQLiteParser.SPACES = 191;
SQLiteParser.UNEXPECTED_CHAR = 192;

SQLiteParser.RULE_parse = 0;
SQLiteParser.RULE_sql_stmt_list = 1;
SQLiteParser.RULE_sql_stmt = 2;
SQLiteParser.RULE_alter_table_stmt = 3;
SQLiteParser.RULE_analyze_stmt = 4;
SQLiteParser.RULE_attach_stmt = 5;
SQLiteParser.RULE_begin_stmt = 6;
SQLiteParser.RULE_commit_stmt = 7;
SQLiteParser.RULE_rollback_stmt = 8;
SQLiteParser.RULE_savepoint_stmt = 9;
SQLiteParser.RULE_release_stmt = 10;
SQLiteParser.RULE_create_index_stmt = 11;
SQLiteParser.RULE_indexed_column = 12;
SQLiteParser.RULE_create_table_stmt = 13;
SQLiteParser.RULE_column_def = 14;
SQLiteParser.RULE_type_name = 15;
SQLiteParser.RULE_column_constraint = 16;
SQLiteParser.RULE_signed_number = 17;
SQLiteParser.RULE_table_constraint = 18;
SQLiteParser.RULE_foreign_key_clause = 19;
SQLiteParser.RULE_conflict_clause = 20;
SQLiteParser.RULE_create_trigger_stmt = 21;
SQLiteParser.RULE_create_view_stmt = 22;
SQLiteParser.RULE_create_virtual_table_stmt = 23;
SQLiteParser.RULE_with_clause = 24;
SQLiteParser.RULE_cte_table_name = 25;
SQLiteParser.RULE_recursive_cte = 26;
SQLiteParser.RULE_common_table_expression = 27;
SQLiteParser.RULE_delete_stmt = 28;
SQLiteParser.RULE_delete_stmt_limited = 29;
SQLiteParser.RULE_detach_stmt = 30;
SQLiteParser.RULE_drop_stmt = 31;
SQLiteParser.RULE_expr = 32;
SQLiteParser.RULE_raise_function = 33;
SQLiteParser.RULE_literal_value = 34;
SQLiteParser.RULE_insert_stmt = 35;
SQLiteParser.RULE_upsert_clause = 36;
SQLiteParser.RULE_pragma_stmt = 37;
SQLiteParser.RULE_pragma_value = 38;
SQLiteParser.RULE_reindex_stmt = 39;
SQLiteParser.RULE_select_stmt = 40;
SQLiteParser.RULE_join_clause = 41;
SQLiteParser.RULE_select_core = 42;
SQLiteParser.RULE_factored_select_stmt = 43;
SQLiteParser.RULE_simple_select_stmt = 44;
SQLiteParser.RULE_compound_select_stmt = 45;
SQLiteParser.RULE_table_or_subquery = 46;
SQLiteParser.RULE_result_column = 47;
SQLiteParser.RULE_join_operator = 48;
SQLiteParser.RULE_join_constraint = 49;
SQLiteParser.RULE_compound_operator = 50;
SQLiteParser.RULE_update_stmt = 51;
SQLiteParser.RULE_column_name_list = 52;
SQLiteParser.RULE_update_stmt_limited = 53;
SQLiteParser.RULE_qualified_table_name = 54;
SQLiteParser.RULE_vacuum_stmt = 55;
SQLiteParser.RULE_filter_clause = 56;
SQLiteParser.RULE_window_defn = 57;
SQLiteParser.RULE_over_clause = 58;
SQLiteParser.RULE_frame_spec = 59;
SQLiteParser.RULE_frame_clause = 60;
SQLiteParser.RULE_simple_function_invocation = 61;
SQLiteParser.RULE_aggregate_function_invocation = 62;
SQLiteParser.RULE_window_function_invocation = 63;
SQLiteParser.RULE_common_table_stmt = 64;
SQLiteParser.RULE_order_by_stmt = 65;
SQLiteParser.RULE_limit_stmt = 66;
SQLiteParser.RULE_ordering_term = 67;
SQLiteParser.RULE_asc_desc = 68;
SQLiteParser.RULE_frame_left = 69;
SQLiteParser.RULE_frame_right = 70;
SQLiteParser.RULE_frame_single = 71;
SQLiteParser.RULE_window_function = 72;
SQLiteParser.RULE_of_OF_fset = 73;
SQLiteParser.RULE_default_DEFAULT__value = 74;
SQLiteParser.RULE_partition_by = 75;
SQLiteParser.RULE_order_by_expr = 76;
SQLiteParser.RULE_order_by_expr_asc_desc = 77;
SQLiteParser.RULE_expr_asc_desc = 78;
SQLiteParser.RULE_initial_select = 79;
SQLiteParser.RULE_recursive__select = 80;
SQLiteParser.RULE_unary_operator = 81;
SQLiteParser.RULE_error_message = 82;
SQLiteParser.RULE_module_argument = 83;
SQLiteParser.RULE_column_alias = 84;
SQLiteParser.RULE_keyword = 85;
SQLiteParser.RULE_name = 86;
SQLiteParser.RULE_function_name = 87;
SQLiteParser.RULE_schema_name = 88;
SQLiteParser.RULE_table_name = 89;
SQLiteParser.RULE_table_or_index_name = 90;
SQLiteParser.RULE_new_table_name = 91;
SQLiteParser.RULE_column_name = 92;
SQLiteParser.RULE_collation_name = 93;
SQLiteParser.RULE_foreign_table = 94;
SQLiteParser.RULE_index_name = 95;
SQLiteParser.RULE_trigger_name = 96;
SQLiteParser.RULE_view_name = 97;
SQLiteParser.RULE_module_name = 98;
SQLiteParser.RULE_pragma_name = 99;
SQLiteParser.RULE_savepoint_name = 100;
SQLiteParser.RULE_table_alias = 101;
SQLiteParser.RULE_transaction_name = 102;
SQLiteParser.RULE_window_name = 103;
SQLiteParser.RULE_alias = 104;
SQLiteParser.RULE_filename = 105;
SQLiteParser.RULE_base_window_name = 106;
SQLiteParser.RULE_simple_func = 107;
SQLiteParser.RULE_aggregate_func = 108;
SQLiteParser.RULE_table_function_name = 109;
SQLiteParser.RULE_any_name = 110;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_parse;
    }

	EOF() {
	    return this.getToken(SQLiteParser.EOF, 0);
	};

	sql_stmt_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmt_listContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmt_listContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitParse(this);
		}
	}


}



class Sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_sql_stmt_list;
    }

	sql_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmtContext,i);
	    }
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.SCOL);
	    } else {
	        return this.getToken(SQLiteParser.SCOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSql_stmt_list(this);
		}
	}


}



class Sql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_sql_stmt;
    }

	alter_table_stmt() {
	    return this.getTypedRuleContext(Alter_table_stmtContext,0);
	};

	analyze_stmt() {
	    return this.getTypedRuleContext(Analyze_stmtContext,0);
	};

	attach_stmt() {
	    return this.getTypedRuleContext(Attach_stmtContext,0);
	};

	begin_stmt() {
	    return this.getTypedRuleContext(Begin_stmtContext,0);
	};

	commit_stmt() {
	    return this.getTypedRuleContext(Commit_stmtContext,0);
	};

	create_index_stmt() {
	    return this.getTypedRuleContext(Create_index_stmtContext,0);
	};

	create_table_stmt() {
	    return this.getTypedRuleContext(Create_table_stmtContext,0);
	};

	create_trigger_stmt() {
	    return this.getTypedRuleContext(Create_trigger_stmtContext,0);
	};

	create_view_stmt() {
	    return this.getTypedRuleContext(Create_view_stmtContext,0);
	};

	create_virtual_table_stmt() {
	    return this.getTypedRuleContext(Create_virtual_table_stmtContext,0);
	};

	delete_stmt() {
	    return this.getTypedRuleContext(Delete_stmtContext,0);
	};

	delete_stmt_limited() {
	    return this.getTypedRuleContext(Delete_stmt_limitedContext,0);
	};

	detach_stmt() {
	    return this.getTypedRuleContext(Detach_stmtContext,0);
	};

	drop_stmt() {
	    return this.getTypedRuleContext(Drop_stmtContext,0);
	};

	insert_stmt() {
	    return this.getTypedRuleContext(Insert_stmtContext,0);
	};

	pragma_stmt() {
	    return this.getTypedRuleContext(Pragma_stmtContext,0);
	};

	reindex_stmt() {
	    return this.getTypedRuleContext(Reindex_stmtContext,0);
	};

	release_stmt() {
	    return this.getTypedRuleContext(Release_stmtContext,0);
	};

	rollback_stmt() {
	    return this.getTypedRuleContext(Rollback_stmtContext,0);
	};

	savepoint_stmt() {
	    return this.getTypedRuleContext(Savepoint_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	update_stmt() {
	    return this.getTypedRuleContext(Update_stmtContext,0);
	};

	update_stmt_limited() {
	    return this.getTypedRuleContext(Update_stmt_limitedContext,0);
	};

	vacuum_stmt() {
	    return this.getTypedRuleContext(Vacuum_stmtContext,0);
	};

	EXPLAIN_() {
	    return this.getToken(SQLiteParser.EXPLAIN_, 0);
	};

	QUERY_() {
	    return this.getToken(SQLiteParser.QUERY_, 0);
	};

	PLAN_() {
	    return this.getToken(SQLiteParser.PLAN_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSql_stmt(this);
		}
	}


}



class Alter_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_alter_table_stmt;
        this.old_column_name = null; // Column_nameContext
        this.new_column_name = null; // Column_nameContext
    }

	ALTER_() {
	    return this.getToken(SQLiteParser.ALTER_, 0);
	};

	TABLE_() {
	    return this.getToken(SQLiteParser.TABLE_, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	RENAME_() {
	    return this.getToken(SQLiteParser.RENAME_, 0);
	};

	ADD_() {
	    return this.getToken(SQLiteParser.ADD_, 0);
	};

	column_def() {
	    return this.getTypedRuleContext(Column_defContext,0);
	};

	DROP_() {
	    return this.getToken(SQLiteParser.DROP_, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	TO_() {
	    return this.getToken(SQLiteParser.TO_, 0);
	};

	new_table_name() {
	    return this.getTypedRuleContext(New_table_nameContext,0);
	};

	COLUMN_() {
	    return this.getToken(SQLiteParser.COLUMN_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAlter_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAlter_table_stmt(this);
		}
	}


}



class Analyze_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_analyze_stmt;
    }

	ANALYZE_() {
	    return this.getToken(SQLiteParser.ANALYZE_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	table_or_index_name() {
	    return this.getTypedRuleContext(Table_or_index_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAnalyze_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAnalyze_stmt(this);
		}
	}


}



class Attach_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_attach_stmt;
    }

	ATTACH_() {
	    return this.getToken(SQLiteParser.ATTACH_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DATABASE_() {
	    return this.getToken(SQLiteParser.DATABASE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAttach_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAttach_stmt(this);
		}
	}


}



class Begin_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_begin_stmt;
    }

	BEGIN_() {
	    return this.getToken(SQLiteParser.BEGIN_, 0);
	};

	TRANSACTION_() {
	    return this.getToken(SQLiteParser.TRANSACTION_, 0);
	};

	DEFERRED_() {
	    return this.getToken(SQLiteParser.DEFERRED_, 0);
	};

	IMMEDIATE_() {
	    return this.getToken(SQLiteParser.IMMEDIATE_, 0);
	};

	EXCLUSIVE_() {
	    return this.getToken(SQLiteParser.EXCLUSIVE_, 0);
	};

	transaction_name() {
	    return this.getTypedRuleContext(Transaction_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterBegin_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitBegin_stmt(this);
		}
	}


}



class Commit_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_commit_stmt;
    }

	COMMIT_() {
	    return this.getToken(SQLiteParser.COMMIT_, 0);
	};

	END_() {
	    return this.getToken(SQLiteParser.END_, 0);
	};

	TRANSACTION_() {
	    return this.getToken(SQLiteParser.TRANSACTION_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCommit_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCommit_stmt(this);
		}
	}


}



class Rollback_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_rollback_stmt;
    }

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	TRANSACTION_() {
	    return this.getToken(SQLiteParser.TRANSACTION_, 0);
	};

	TO_() {
	    return this.getToken(SQLiteParser.TO_, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	SAVEPOINT_() {
	    return this.getToken(SQLiteParser.SAVEPOINT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterRollback_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitRollback_stmt(this);
		}
	}


}



class Savepoint_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_savepoint_stmt;
    }

	SAVEPOINT_() {
	    return this.getToken(SQLiteParser.SAVEPOINT_, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSavepoint_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSavepoint_stmt(this);
		}
	}


}



class Release_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_release_stmt;
    }

	RELEASE_() {
	    return this.getToken(SQLiteParser.RELEASE_, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	SAVEPOINT_() {
	    return this.getToken(SQLiteParser.SAVEPOINT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterRelease_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitRelease_stmt(this);
		}
	}


}



class Create_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_index_stmt;
    }

	CREATE_() {
	    return this.getToken(SQLiteParser.CREATE_, 0);
	};

	INDEX_() {
	    return this.getToken(SQLiteParser.INDEX_, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	ON_() {
	    return this.getToken(SQLiteParser.ON_, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	UNIQUE_() {
	    return this.getToken(SQLiteParser.UNIQUE_, 0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCreate_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCreate_index_stmt(this);
		}
	}


}



class Indexed_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_indexed_column;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COLLATE_() {
	    return this.getToken(SQLiteParser.COLLATE_, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	asc_desc() {
	    return this.getTypedRuleContext(Asc_descContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterIndexed_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitIndexed_column(this);
		}
	}


}



class Create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_table_stmt;
        this.row_ROW_ID = null; // Token
    }

	CREATE_() {
	    return this.getToken(SQLiteParser.CREATE_, 0);
	};

	TABLE_() {
	    return this.getToken(SQLiteParser.TABLE_, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	column_def = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_defContext);
	    } else {
	        return this.getTypedRuleContext(Column_defContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	TEMP_() {
	    return this.getToken(SQLiteParser.TEMP_, 0);
	};

	TEMPORARY_() {
	    return this.getToken(SQLiteParser.TEMPORARY_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	table_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Table_constraintContext,i);
	    }
	};

	WITHOUT_() {
	    return this.getToken(SQLiteParser.WITHOUT_, 0);
	};

	IDENTIFIER() {
	    return this.getToken(SQLiteParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCreate_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCreate_table_stmt(this);
		}
	}


}



class Column_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_def;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	column_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Column_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterColumn_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitColumn_def(this);
		}
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_type_name;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	signed_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Signed_numberContext);
	    } else {
	        return this.getTypedRuleContext(Signed_numberContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitType_name(this);
		}
	}


}



class Column_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_constraint;
    }

	CHECK_() {
	    return this.getToken(SQLiteParser.CHECK_, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	DEFAULT_() {
	    return this.getToken(SQLiteParser.DEFAULT_, 0);
	};

	COLLATE_() {
	    return this.getToken(SQLiteParser.COLLATE_, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	CONSTRAINT_() {
	    return this.getToken(SQLiteParser.CONSTRAINT_, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	PRIMARY_() {
	    return this.getToken(SQLiteParser.PRIMARY_, 0);
	};

	KEY_() {
	    return this.getToken(SQLiteParser.KEY_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	NULL_() {
	    return this.getToken(SQLiteParser.NULL_, 0);
	};

	UNIQUE_() {
	    return this.getToken(SQLiteParser.UNIQUE_, 0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	GENERATED_() {
	    return this.getToken(SQLiteParser.GENERATED_, 0);
	};

	ALWAYS_() {
	    return this.getToken(SQLiteParser.ALWAYS_, 0);
	};

	STORED_() {
	    return this.getToken(SQLiteParser.STORED_, 0);
	};

	VIRTUAL_() {
	    return this.getToken(SQLiteParser.VIRTUAL_, 0);
	};

	asc_desc() {
	    return this.getTypedRuleContext(Asc_descContext,0);
	};

	AUTOINCREMENT_() {
	    return this.getToken(SQLiteParser.AUTOINCREMENT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterColumn_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitColumn_constraint(this);
		}
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_signed_number;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
	};

	PLUS() {
	    return this.getToken(SQLiteParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLiteParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSigned_number(this);
		}
	}


}



class Table_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_constraint;
    }

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	CHECK_() {
	    return this.getToken(SQLiteParser.CHECK_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	FOREIGN_() {
	    return this.getToken(SQLiteParser.FOREIGN_, 0);
	};

	KEY_() {
	    return this.getToken(SQLiteParser.KEY_, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	CONSTRAINT_() {
	    return this.getToken(SQLiteParser.CONSTRAINT_, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	PRIMARY_() {
	    return this.getToken(SQLiteParser.PRIMARY_, 0);
	};

	UNIQUE_() {
	    return this.getToken(SQLiteParser.UNIQUE_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTable_constraint(this);
		}
	}


}



class Foreign_key_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_foreign_key_clause;
    }

	REFERENCES_() {
	    return this.getToken(SQLiteParser.REFERENCES_, 0);
	};

	foreign_table() {
	    return this.getTypedRuleContext(Foreign_tableContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	ON_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.ON_);
	    } else {
	        return this.getToken(SQLiteParser.ON_, i);
	    }
	};


	MATCH_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.MATCH_);
	    } else {
	        return this.getToken(SQLiteParser.MATCH_, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	DEFERRABLE_() {
	    return this.getToken(SQLiteParser.DEFERRABLE_, 0);
	};

	DELETE_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.DELETE_);
	    } else {
	        return this.getToken(SQLiteParser.DELETE_, i);
	    }
	};


	UPDATE_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.UPDATE_);
	    } else {
	        return this.getToken(SQLiteParser.UPDATE_, i);
	    }
	};


	SET_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.SET_);
	    } else {
	        return this.getToken(SQLiteParser.SET_, i);
	    }
	};


	CASCADE_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.CASCADE_);
	    } else {
	        return this.getToken(SQLiteParser.CASCADE_, i);
	    }
	};


	RESTRICT_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.RESTRICT_);
	    } else {
	        return this.getToken(SQLiteParser.RESTRICT_, i);
	    }
	};


	NO_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.NO_);
	    } else {
	        return this.getToken(SQLiteParser.NO_, i);
	    }
	};


	ACTION_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.ACTION_);
	    } else {
	        return this.getToken(SQLiteParser.ACTION_, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	NULL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.NULL_);
	    } else {
	        return this.getToken(SQLiteParser.NULL_, i);
	    }
	};


	DEFAULT_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.DEFAULT_);
	    } else {
	        return this.getToken(SQLiteParser.DEFAULT_, i);
	    }
	};


	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	INITIALLY_() {
	    return this.getToken(SQLiteParser.INITIALLY_, 0);
	};

	DEFERRED_() {
	    return this.getToken(SQLiteParser.DEFERRED_, 0);
	};

	IMMEDIATE_() {
	    return this.getToken(SQLiteParser.IMMEDIATE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterForeign_key_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitForeign_key_clause(this);
		}
	}


}



class Conflict_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_conflict_clause;
    }

	ON_() {
	    return this.getToken(SQLiteParser.ON_, 0);
	};

	CONFLICT_() {
	    return this.getToken(SQLiteParser.CONFLICT_, 0);
	};

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	ABORT_() {
	    return this.getToken(SQLiteParser.ABORT_, 0);
	};

	FAIL_() {
	    return this.getToken(SQLiteParser.FAIL_, 0);
	};

	IGNORE_() {
	    return this.getToken(SQLiteParser.IGNORE_, 0);
	};

	REPLACE_() {
	    return this.getToken(SQLiteParser.REPLACE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterConflict_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitConflict_clause(this);
		}
	}


}



class Create_trigger_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_trigger_stmt;
    }

	CREATE_() {
	    return this.getToken(SQLiteParser.CREATE_, 0);
	};

	TRIGGER_() {
	    return this.getToken(SQLiteParser.TRIGGER_, 0);
	};

	trigger_name() {
	    return this.getTypedRuleContext(Trigger_nameContext,0);
	};

	ON_() {
	    return this.getToken(SQLiteParser.ON_, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	BEGIN_() {
	    return this.getToken(SQLiteParser.BEGIN_, 0);
	};

	END_() {
	    return this.getToken(SQLiteParser.END_, 0);
	};

	DELETE_() {
	    return this.getToken(SQLiteParser.DELETE_, 0);
	};

	INSERT_() {
	    return this.getToken(SQLiteParser.INSERT_, 0);
	};

	UPDATE_() {
	    return this.getToken(SQLiteParser.UPDATE_, 0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	BEFORE_() {
	    return this.getToken(SQLiteParser.BEFORE_, 0);
	};

	AFTER_() {
	    return this.getToken(SQLiteParser.AFTER_, 0);
	};

	INSTEAD_() {
	    return this.getToken(SQLiteParser.INSTEAD_, 0);
	};

	OF_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.OF_);
	    } else {
	        return this.getToken(SQLiteParser.OF_, i);
	    }
	};


	FOR_() {
	    return this.getToken(SQLiteParser.FOR_, 0);
	};

	EACH_() {
	    return this.getToken(SQLiteParser.EACH_, 0);
	};

	ROW_() {
	    return this.getToken(SQLiteParser.ROW_, 0);
	};

	WHEN_() {
	    return this.getToken(SQLiteParser.WHEN_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.SCOL);
	    } else {
	        return this.getToken(SQLiteParser.SCOL, i);
	    }
	};


	TEMP_() {
	    return this.getToken(SQLiteParser.TEMP_, 0);
	};

	TEMPORARY_() {
	    return this.getToken(SQLiteParser.TEMPORARY_, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	update_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Update_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Update_stmtContext,i);
	    }
	};

	insert_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Insert_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Insert_stmtContext,i);
	    }
	};

	delete_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Delete_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Delete_stmtContext,i);
	    }
	};

	select_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Select_stmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCreate_trigger_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCreate_trigger_stmt(this);
		}
	}


}



class Create_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_view_stmt;
    }

	CREATE_() {
	    return this.getToken(SQLiteParser.CREATE_, 0);
	};

	VIEW_() {
	    return this.getToken(SQLiteParser.VIEW_, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	TEMP_() {
	    return this.getToken(SQLiteParser.TEMP_, 0);
	};

	TEMPORARY_() {
	    return this.getToken(SQLiteParser.TEMPORARY_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCreate_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCreate_view_stmt(this);
		}
	}


}



class Create_virtual_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_virtual_table_stmt;
    }

	CREATE_() {
	    return this.getToken(SQLiteParser.CREATE_, 0);
	};

	VIRTUAL_() {
	    return this.getToken(SQLiteParser.VIRTUAL_, 0);
	};

	TABLE_() {
	    return this.getToken(SQLiteParser.TABLE_, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	USING_() {
	    return this.getToken(SQLiteParser.USING_, 0);
	};

	module_name() {
	    return this.getTypedRuleContext(Module_nameContext,0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	module_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Module_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Module_argumentContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCreate_virtual_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCreate_virtual_table_stmt(this);
		}
	}


}



class With_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_with_clause;
    }

	WITH_() {
	    return this.getToken(SQLiteParser.WITH_, 0);
	};

	cte_table_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cte_table_nameContext);
	    } else {
	        return this.getTypedRuleContext(Cte_table_nameContext,i);
	    }
	};

	AS_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.AS_);
	    } else {
	        return this.getToken(SQLiteParser.AS_, i);
	    }
	};


	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLiteParser.OPEN_PAR, i);
	    }
	};


	select_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Select_stmtContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLiteParser.CLOSE_PAR, i);
	    }
	};


	RECURSIVE_() {
	    return this.getToken(SQLiteParser.RECURSIVE_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterWith_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitWith_clause(this);
		}
	}


}



class Cte_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_cte_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCte_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCte_table_name(this);
		}
	}


}



class Recursive_cteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_recursive_cte;
    }

	cte_table_name() {
	    return this.getTypedRuleContext(Cte_table_nameContext,0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	initial_select() {
	    return this.getTypedRuleContext(Initial_selectContext,0);
	};

	UNION_() {
	    return this.getToken(SQLiteParser.UNION_, 0);
	};

	recursive__select() {
	    return this.getTypedRuleContext(Recursive__selectContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	ALL_() {
	    return this.getToken(SQLiteParser.ALL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterRecursive_cte(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitRecursive_cte(this);
		}
	}


}



class Common_table_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_common_table_expression;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLiteParser.OPEN_PAR, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLiteParser.CLOSE_PAR, i);
	    }
	};


	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCommon_table_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCommon_table_expression(this);
		}
	}


}



class Delete_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_delete_stmt;
    }

	DELETE_() {
	    return this.getToken(SQLiteParser.DELETE_, 0);
	};

	FROM_() {
	    return this.getToken(SQLiteParser.FROM_, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitDelete_stmt(this);
		}
	}


}



class Delete_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_delete_stmt_limited;
    }

	DELETE_() {
	    return this.getToken(SQLiteParser.DELETE_, 0);
	};

	FROM_() {
	    return this.getToken(SQLiteParser.FROM_, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	limit_stmt() {
	    return this.getTypedRuleContext(Limit_stmtContext,0);
	};

	order_by_stmt() {
	    return this.getTypedRuleContext(Order_by_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterDelete_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitDelete_stmt_limited(this);
		}
	}


}



class Detach_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_detach_stmt;
    }

	DETACH_() {
	    return this.getToken(SQLiteParser.DETACH_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DATABASE_() {
	    return this.getToken(SQLiteParser.DATABASE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterDetach_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitDetach_stmt(this);
		}
	}


}



class Drop_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_drop_stmt;
        this.object = null; // Token
    }

	DROP_() {
	    return this.getToken(SQLiteParser.DROP_, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	INDEX_() {
	    return this.getToken(SQLiteParser.INDEX_, 0);
	};

	TABLE_() {
	    return this.getToken(SQLiteParser.TABLE_, 0);
	};

	TRIGGER_() {
	    return this.getToken(SQLiteParser.TRIGGER_, 0);
	};

	VIEW_() {
	    return this.getToken(SQLiteParser.VIEW_, 0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterDrop_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitDrop_stmt(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	BIND_PARAMETER() {
	    return this.getToken(SQLiteParser.BIND_PARAMETER, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.DOT);
	    } else {
	        return this.getToken(SQLiteParser.DOT, i);
	    }
	};


	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	unary_operator() {
	    return this.getTypedRuleContext(Unary_operatorContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	STAR() {
	    return this.getToken(SQLiteParser.STAR, 0);
	};

	filter_clause() {
	    return this.getTypedRuleContext(Filter_clauseContext,0);
	};

	over_clause() {
	    return this.getTypedRuleContext(Over_clauseContext,0);
	};

	DISTINCT_() {
	    return this.getToken(SQLiteParser.DISTINCT_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	CAST_() {
	    return this.getToken(SQLiteParser.CAST_, 0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	CASE_() {
	    return this.getToken(SQLiteParser.CASE_, 0);
	};

	END_() {
	    return this.getToken(SQLiteParser.END_, 0);
	};

	WHEN_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.WHEN_);
	    } else {
	        return this.getToken(SQLiteParser.WHEN_, i);
	    }
	};


	THEN_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.THEN_);
	    } else {
	        return this.getToken(SQLiteParser.THEN_, i);
	    }
	};


	ELSE_() {
	    return this.getToken(SQLiteParser.ELSE_, 0);
	};

	raise_function() {
	    return this.getTypedRuleContext(Raise_functionContext,0);
	};

	PIPE2() {
	    return this.getToken(SQLiteParser.PIPE2, 0);
	};

	DIV() {
	    return this.getToken(SQLiteParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(SQLiteParser.MOD, 0);
	};

	PLUS() {
	    return this.getToken(SQLiteParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLiteParser.MINUS, 0);
	};

	LT2() {
	    return this.getToken(SQLiteParser.LT2, 0);
	};

	GT2() {
	    return this.getToken(SQLiteParser.GT2, 0);
	};

	AMP() {
	    return this.getToken(SQLiteParser.AMP, 0);
	};

	PIPE() {
	    return this.getToken(SQLiteParser.PIPE, 0);
	};

	LT() {
	    return this.getToken(SQLiteParser.LT, 0);
	};

	LT_EQ() {
	    return this.getToken(SQLiteParser.LT_EQ, 0);
	};

	GT() {
	    return this.getToken(SQLiteParser.GT, 0);
	};

	GT_EQ() {
	    return this.getToken(SQLiteParser.GT_EQ, 0);
	};

	ASSIGN() {
	    return this.getToken(SQLiteParser.ASSIGN, 0);
	};

	EQ() {
	    return this.getToken(SQLiteParser.EQ, 0);
	};

	NOT_EQ1() {
	    return this.getToken(SQLiteParser.NOT_EQ1, 0);
	};

	NOT_EQ2() {
	    return this.getToken(SQLiteParser.NOT_EQ2, 0);
	};

	IS_() {
	    return this.getToken(SQLiteParser.IS_, 0);
	};

	IN_() {
	    return this.getToken(SQLiteParser.IN_, 0);
	};

	LIKE_() {
	    return this.getToken(SQLiteParser.LIKE_, 0);
	};

	GLOB_() {
	    return this.getToken(SQLiteParser.GLOB_, 0);
	};

	MATCH_() {
	    return this.getToken(SQLiteParser.MATCH_, 0);
	};

	REGEXP_() {
	    return this.getToken(SQLiteParser.REGEXP_, 0);
	};

	AND_() {
	    return this.getToken(SQLiteParser.AND_, 0);
	};

	OR_() {
	    return this.getToken(SQLiteParser.OR_, 0);
	};

	BETWEEN_() {
	    return this.getToken(SQLiteParser.BETWEEN_, 0);
	};

	COLLATE_() {
	    return this.getToken(SQLiteParser.COLLATE_, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	ESCAPE_() {
	    return this.getToken(SQLiteParser.ESCAPE_, 0);
	};

	ISNULL_() {
	    return this.getToken(SQLiteParser.ISNULL_, 0);
	};

	NOTNULL_() {
	    return this.getToken(SQLiteParser.NOTNULL_, 0);
	};

	NULL_() {
	    return this.getToken(SQLiteParser.NULL_, 0);
	};

	table_function_name() {
	    return this.getTypedRuleContext(Table_function_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Raise_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_raise_function;
    }

	RAISE_() {
	    return this.getToken(SQLiteParser.RAISE_, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	IGNORE_() {
	    return this.getToken(SQLiteParser.IGNORE_, 0);
	};

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	error_message() {
	    return this.getTypedRuleContext(Error_messageContext,0);
	};

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	ABORT_() {
	    return this.getToken(SQLiteParser.ABORT_, 0);
	};

	FAIL_() {
	    return this.getToken(SQLiteParser.FAIL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterRaise_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitRaise_function(this);
		}
	}


}



class Literal_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_literal_value;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	};

	BLOB_LITERAL() {
	    return this.getToken(SQLiteParser.BLOB_LITERAL, 0);
	};

	NULL_() {
	    return this.getToken(SQLiteParser.NULL_, 0);
	};

	TRUE_() {
	    return this.getToken(SQLiteParser.TRUE_, 0);
	};

	FALSE_() {
	    return this.getToken(SQLiteParser.FALSE_, 0);
	};

	CURRENT_TIME_() {
	    return this.getToken(SQLiteParser.CURRENT_TIME_, 0);
	};

	CURRENT_DATE_() {
	    return this.getToken(SQLiteParser.CURRENT_DATE_, 0);
	};

	CURRENT_TIMESTAMP_() {
	    return this.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitLiteral_value(this);
		}
	}


}



class Insert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_insert_stmt;
    }

	INTO_() {
	    return this.getToken(SQLiteParser.INTO_, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	INSERT_() {
	    return this.getToken(SQLiteParser.INSERT_, 0);
	};

	REPLACE_() {
	    return this.getToken(SQLiteParser.REPLACE_, 0);
	};

	OR_() {
	    return this.getToken(SQLiteParser.OR_, 0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	ABORT_() {
	    return this.getToken(SQLiteParser.ABORT_, 0);
	};

	FAIL_() {
	    return this.getToken(SQLiteParser.FAIL_, 0);
	};

	IGNORE_() {
	    return this.getToken(SQLiteParser.IGNORE_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	table_alias() {
	    return this.getTypedRuleContext(Table_aliasContext,0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLiteParser.OPEN_PAR, i);
	    }
	};


	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLiteParser.CLOSE_PAR, i);
	    }
	};


	VALUES_() {
	    return this.getToken(SQLiteParser.VALUES_, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	upsert_clause() {
	    return this.getTypedRuleContext(Upsert_clauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	DEFAULT_() {
	    return this.getToken(SQLiteParser.DEFAULT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterInsert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitInsert_stmt(this);
		}
	}


}



class Upsert_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_upsert_clause;
    }

	ON_() {
	    return this.getToken(SQLiteParser.ON_, 0);
	};

	CONFLICT_() {
	    return this.getToken(SQLiteParser.CONFLICT_, 0);
	};

	DO_() {
	    return this.getToken(SQLiteParser.DO_, 0);
	};

	NOTHING_() {
	    return this.getToken(SQLiteParser.NOTHING_, 0);
	};

	UPDATE_() {
	    return this.getToken(SQLiteParser.UPDATE_, 0);
	};

	SET_() {
	    return this.getToken(SQLiteParser.SET_, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.EQ);
	    } else {
	        return this.getToken(SQLiteParser.EQ, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	WHERE_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.WHERE_);
	    } else {
	        return this.getToken(SQLiteParser.WHERE_, i);
	    }
	};


	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	column_name_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_name_listContext);
	    } else {
	        return this.getTypedRuleContext(Column_name_listContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterUpsert_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitUpsert_clause(this);
		}
	}


}



class Pragma_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_pragma_stmt;
    }

	PRAGMA_() {
	    return this.getToken(SQLiteParser.PRAGMA_, 0);
	};

	pragma_name() {
	    return this.getTypedRuleContext(Pragma_nameContext,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	ASSIGN() {
	    return this.getToken(SQLiteParser.ASSIGN, 0);
	};

	pragma_value() {
	    return this.getTypedRuleContext(Pragma_valueContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterPragma_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitPragma_stmt(this);
		}
	}


}



class Pragma_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_pragma_value;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitPragma_value(this);
		}
	}


}



class Reindex_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_reindex_stmt;
    }

	REINDEX_() {
	    return this.getToken(SQLiteParser.REINDEX_, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterReindex_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitReindex_stmt(this);
		}
	}


}



class Select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_select_stmt;
    }

	select_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_coreContext);
	    } else {
	        return this.getTypedRuleContext(Select_coreContext,i);
	    }
	};

	common_table_stmt() {
	    return this.getTypedRuleContext(Common_table_stmtContext,0);
	};

	compound_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compound_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Compound_operatorContext,i);
	    }
	};

	order_by_stmt() {
	    return this.getTypedRuleContext(Order_by_stmtContext,0);
	};

	limit_stmt() {
	    return this.getTypedRuleContext(Limit_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSelect_stmt(this);
		}
	}


}



class Join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_join_clause;
    }

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Join_operatorContext,i);
	    }
	};

	join_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Join_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterJoin_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitJoin_clause(this);
		}
	}


}



class Select_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_select_core;
    }

	SELECT_() {
	    return this.getToken(SQLiteParser.SELECT_, 0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	FROM_() {
	    return this.getToken(SQLiteParser.FROM_, 0);
	};

	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	GROUP_() {
	    return this.getToken(SQLiteParser.GROUP_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	WINDOW_() {
	    return this.getToken(SQLiteParser.WINDOW_, 0);
	};

	window_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_nameContext);
	    } else {
	        return this.getTypedRuleContext(Window_nameContext,i);
	    }
	};

	AS_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.AS_);
	    } else {
	        return this.getToken(SQLiteParser.AS_, i);
	    }
	};


	window_defn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_defnContext);
	    } else {
	        return this.getTypedRuleContext(Window_defnContext,i);
	    }
	};

	DISTINCT_() {
	    return this.getToken(SQLiteParser.DISTINCT_, 0);
	};

	ALL_() {
	    return this.getToken(SQLiteParser.ALL_, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	HAVING_() {
	    return this.getToken(SQLiteParser.HAVING_, 0);
	};

	VALUES_() {
	    return this.getToken(SQLiteParser.VALUES_, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLiteParser.OPEN_PAR, i);
	    }
	};


	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLiteParser.CLOSE_PAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSelect_core(this);
		}
	}


}



class Factored_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_factored_select_stmt;
    }

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFactored_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFactored_select_stmt(this);
		}
	}


}



class Simple_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_simple_select_stmt;
    }

	select_core() {
	    return this.getTypedRuleContext(Select_coreContext,0);
	};

	common_table_stmt() {
	    return this.getTypedRuleContext(Common_table_stmtContext,0);
	};

	order_by_stmt() {
	    return this.getTypedRuleContext(Order_by_stmtContext,0);
	};

	limit_stmt() {
	    return this.getTypedRuleContext(Limit_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSimple_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSimple_select_stmt(this);
		}
	}


}



class Compound_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_compound_select_stmt;
    }

	select_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_coreContext);
	    } else {
	        return this.getTypedRuleContext(Select_coreContext,i);
	    }
	};

	common_table_stmt() {
	    return this.getTypedRuleContext(Common_table_stmtContext,0);
	};

	order_by_stmt() {
	    return this.getTypedRuleContext(Order_by_stmtContext,0);
	};

	limit_stmt() {
	    return this.getTypedRuleContext(Limit_stmtContext,0);
	};

	UNION_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.UNION_);
	    } else {
	        return this.getToken(SQLiteParser.UNION_, i);
	    }
	};


	INTERSECT_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.INTERSECT_);
	    } else {
	        return this.getToken(SQLiteParser.INTERSECT_, i);
	    }
	};


	EXCEPT_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.EXCEPT_);
	    } else {
	        return this.getToken(SQLiteParser.EXCEPT_, i);
	    }
	};


	ALL_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.ALL_);
	    } else {
	        return this.getToken(SQLiteParser.ALL_, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCompound_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCompound_select_stmt(this);
		}
	}


}



class Table_or_subqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_or_subquery;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	table_alias() {
	    return this.getTypedRuleContext(Table_aliasContext,0);
	};

	INDEXED_() {
	    return this.getToken(SQLiteParser.INDEXED_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	table_function_name() {
	    return this.getTypedRuleContext(Table_function_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTable_or_subquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTable_or_subquery(this);
		}
	}


}



class Result_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_result_column;
    }

	STAR() {
	    return this.getToken(SQLiteParser.STAR, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_alias() {
	    return this.getTypedRuleContext(Column_aliasContext,0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitResult_column(this);
		}
	}


}



class Join_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_join_operator;
    }

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	JOIN_() {
	    return this.getToken(SQLiteParser.JOIN_, 0);
	};

	NATURAL_() {
	    return this.getToken(SQLiteParser.NATURAL_, 0);
	};

	LEFT_() {
	    return this.getToken(SQLiteParser.LEFT_, 0);
	};

	INNER_() {
	    return this.getToken(SQLiteParser.INNER_, 0);
	};

	CROSS_() {
	    return this.getToken(SQLiteParser.CROSS_, 0);
	};

	OUTER_() {
	    return this.getToken(SQLiteParser.OUTER_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterJoin_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitJoin_operator(this);
		}
	}


}



class Join_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_join_constraint;
    }

	ON_() {
	    return this.getToken(SQLiteParser.ON_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING_() {
	    return this.getToken(SQLiteParser.USING_, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitJoin_constraint(this);
		}
	}


}



class Compound_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_compound_operator;
    }

	UNION_() {
	    return this.getToken(SQLiteParser.UNION_, 0);
	};

	ALL_() {
	    return this.getToken(SQLiteParser.ALL_, 0);
	};

	INTERSECT_() {
	    return this.getToken(SQLiteParser.INTERSECT_, 0);
	};

	EXCEPT_() {
	    return this.getToken(SQLiteParser.EXCEPT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCompound_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCompound_operator(this);
		}
	}


}



class Update_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_update_stmt;
    }

	UPDATE_() {
	    return this.getToken(SQLiteParser.UPDATE_, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	SET_() {
	    return this.getToken(SQLiteParser.SET_, 0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.ASSIGN);
	    } else {
	        return this.getToken(SQLiteParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	column_name_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_name_listContext);
	    } else {
	        return this.getTypedRuleContext(Column_name_listContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	OR_() {
	    return this.getToken(SQLiteParser.OR_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	ABORT_() {
	    return this.getToken(SQLiteParser.ABORT_, 0);
	};

	REPLACE_() {
	    return this.getToken(SQLiteParser.REPLACE_, 0);
	};

	FAIL_() {
	    return this.getToken(SQLiteParser.FAIL_, 0);
	};

	IGNORE_() {
	    return this.getToken(SQLiteParser.IGNORE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitUpdate_stmt(this);
		}
	}


}



class Column_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_name_list;
    }

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterColumn_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitColumn_name_list(this);
		}
	}


}



class Update_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_update_stmt_limited;
    }

	UPDATE_() {
	    return this.getToken(SQLiteParser.UPDATE_, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	SET_() {
	    return this.getToken(SQLiteParser.SET_, 0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.ASSIGN);
	    } else {
	        return this.getToken(SQLiteParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	column_name_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_name_listContext);
	    } else {
	        return this.getTypedRuleContext(Column_name_listContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	OR_() {
	    return this.getToken(SQLiteParser.OR_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	limit_stmt() {
	    return this.getTypedRuleContext(Limit_stmtContext,0);
	};

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	ABORT_() {
	    return this.getToken(SQLiteParser.ABORT_, 0);
	};

	REPLACE_() {
	    return this.getToken(SQLiteParser.REPLACE_, 0);
	};

	FAIL_() {
	    return this.getToken(SQLiteParser.FAIL_, 0);
	};

	IGNORE_() {
	    return this.getToken(SQLiteParser.IGNORE_, 0);
	};

	order_by_stmt() {
	    return this.getTypedRuleContext(Order_by_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterUpdate_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitUpdate_stmt_limited(this);
		}
	}


}



class Qualified_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_qualified_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLiteParser.DOT, 0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	INDEXED_() {
	    return this.getToken(SQLiteParser.INDEXED_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterQualified_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitQualified_table_name(this);
		}
	}


}



class Vacuum_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_vacuum_stmt;
    }

	VACUUM_() {
	    return this.getToken(SQLiteParser.VACUUM_, 0);
	};

	schema_name() {
	    return this.getTypedRuleContext(Schema_nameContext,0);
	};

	INTO_() {
	    return this.getToken(SQLiteParser.INTO_, 0);
	};

	filename() {
	    return this.getTypedRuleContext(FilenameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterVacuum_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitVacuum_stmt(this);
		}
	}


}



class Filter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_filter_clause;
    }

	FILTER_() {
	    return this.getToken(SQLiteParser.FILTER_, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFilter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFilter_clause(this);
		}
	}


}



class Window_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_defn;
    }

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	ORDER_() {
	    return this.getToken(SQLiteParser.ORDER_, 0);
	};

	BY_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.BY_);
	    } else {
	        return this.getToken(SQLiteParser.BY_, i);
	    }
	};


	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	base_window_name() {
	    return this.getTypedRuleContext(Base_window_nameContext,0);
	};

	PARTITION_() {
	    return this.getToken(SQLiteParser.PARTITION_, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	frame_spec() {
	    return this.getTypedRuleContext(Frame_specContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterWindow_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitWindow_defn(this);
		}
	}


}



class Over_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_over_clause;
    }

	OVER_() {
	    return this.getToken(SQLiteParser.OVER_, 0);
	};

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	base_window_name() {
	    return this.getTypedRuleContext(Base_window_nameContext,0);
	};

	PARTITION_() {
	    return this.getToken(SQLiteParser.PARTITION_, 0);
	};

	BY_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.BY_);
	    } else {
	        return this.getToken(SQLiteParser.BY_, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	ORDER_() {
	    return this.getToken(SQLiteParser.ORDER_, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	frame_spec() {
	    return this.getTypedRuleContext(Frame_specContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterOver_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitOver_clause(this);
		}
	}


}



class Frame_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_spec;
    }

	frame_clause() {
	    return this.getTypedRuleContext(Frame_clauseContext,0);
	};

	EXCLUDE_() {
	    return this.getToken(SQLiteParser.EXCLUDE_, 0);
	};

	CURRENT_() {
	    return this.getToken(SQLiteParser.CURRENT_, 0);
	};

	ROW_() {
	    return this.getToken(SQLiteParser.ROW_, 0);
	};

	GROUP_() {
	    return this.getToken(SQLiteParser.GROUP_, 0);
	};

	TIES_() {
	    return this.getToken(SQLiteParser.TIES_, 0);
	};

	NO_() {
	    return this.getToken(SQLiteParser.NO_, 0);
	};

	OTHERS_() {
	    return this.getToken(SQLiteParser.OTHERS_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFrame_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFrame_spec(this);
		}
	}


}



class Frame_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_clause;
    }

	RANGE_() {
	    return this.getToken(SQLiteParser.RANGE_, 0);
	};

	ROWS_() {
	    return this.getToken(SQLiteParser.ROWS_, 0);
	};

	GROUPS_() {
	    return this.getToken(SQLiteParser.GROUPS_, 0);
	};

	frame_single() {
	    return this.getTypedRuleContext(Frame_singleContext,0);
	};

	BETWEEN_() {
	    return this.getToken(SQLiteParser.BETWEEN_, 0);
	};

	frame_left() {
	    return this.getTypedRuleContext(Frame_leftContext,0);
	};

	AND_() {
	    return this.getToken(SQLiteParser.AND_, 0);
	};

	frame_right() {
	    return this.getTypedRuleContext(Frame_rightContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFrame_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFrame_clause(this);
		}
	}


}



class Simple_function_invocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_simple_function_invocation;
    }

	simple_func() {
	    return this.getTypedRuleContext(Simple_funcContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	STAR() {
	    return this.getToken(SQLiteParser.STAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSimple_function_invocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSimple_function_invocation(this);
		}
	}


}



class Aggregate_function_invocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_aggregate_function_invocation;
    }

	aggregate_func() {
	    return this.getTypedRuleContext(Aggregate_funcContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	STAR() {
	    return this.getToken(SQLiteParser.STAR, 0);
	};

	filter_clause() {
	    return this.getTypedRuleContext(Filter_clauseContext,0);
	};

	DISTINCT_() {
	    return this.getToken(SQLiteParser.DISTINCT_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAggregate_function_invocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAggregate_function_invocation(this);
		}
	}


}



class Window_function_invocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_function_invocation;
    }

	window_function() {
	    return this.getTypedRuleContext(Window_functionContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	OVER_() {
	    return this.getToken(SQLiteParser.OVER_, 0);
	};

	window_defn() {
	    return this.getTypedRuleContext(Window_defnContext,0);
	};

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	STAR() {
	    return this.getToken(SQLiteParser.STAR, 0);
	};

	filter_clause() {
	    return this.getTypedRuleContext(Filter_clauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterWindow_function_invocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitWindow_function_invocation(this);
		}
	}


}



class Common_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_common_table_stmt;
    }

	WITH_() {
	    return this.getToken(SQLiteParser.WITH_, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	RECURSIVE_() {
	    return this.getToken(SQLiteParser.RECURSIVE_, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCommon_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCommon_table_stmt(this);
		}
	}


}



class Order_by_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_order_by_stmt;
    }

	ORDER_() {
	    return this.getToken(SQLiteParser.ORDER_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterOrder_by_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitOrder_by_stmt(this);
		}
	}


}



class Limit_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_limit_stmt;
    }

	LIMIT_() {
	    return this.getToken(SQLiteParser.LIMIT_, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	OFFSET_() {
	    return this.getToken(SQLiteParser.OFFSET_, 0);
	};

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterLimit_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitLimit_stmt(this);
		}
	}


}



class Ordering_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_ordering_term;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COLLATE_() {
	    return this.getToken(SQLiteParser.COLLATE_, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	asc_desc() {
	    return this.getTypedRuleContext(Asc_descContext,0);
	};

	NULLS_() {
	    return this.getToken(SQLiteParser.NULLS_, 0);
	};

	FIRST_() {
	    return this.getToken(SQLiteParser.FIRST_, 0);
	};

	LAST_() {
	    return this.getToken(SQLiteParser.LAST_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterOrdering_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitOrdering_term(this);
		}
	}


}



class Asc_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_asc_desc;
    }

	ASC_() {
	    return this.getToken(SQLiteParser.ASC_, 0);
	};

	DESC_() {
	    return this.getToken(SQLiteParser.DESC_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAsc_desc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAsc_desc(this);
		}
	}


}



class Frame_leftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_left;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	PRECEDING_() {
	    return this.getToken(SQLiteParser.PRECEDING_, 0);
	};

	FOLLOWING_() {
	    return this.getToken(SQLiteParser.FOLLOWING_, 0);
	};

	CURRENT_() {
	    return this.getToken(SQLiteParser.CURRENT_, 0);
	};

	ROW_() {
	    return this.getToken(SQLiteParser.ROW_, 0);
	};

	UNBOUNDED_() {
	    return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFrame_left(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFrame_left(this);
		}
	}


}



class Frame_rightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_right;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	PRECEDING_() {
	    return this.getToken(SQLiteParser.PRECEDING_, 0);
	};

	FOLLOWING_() {
	    return this.getToken(SQLiteParser.FOLLOWING_, 0);
	};

	CURRENT_() {
	    return this.getToken(SQLiteParser.CURRENT_, 0);
	};

	ROW_() {
	    return this.getToken(SQLiteParser.ROW_, 0);
	};

	UNBOUNDED_() {
	    return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFrame_right(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFrame_right(this);
		}
	}


}



class Frame_singleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_single;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	PRECEDING_() {
	    return this.getToken(SQLiteParser.PRECEDING_, 0);
	};

	UNBOUNDED_() {
	    return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	};

	CURRENT_() {
	    return this.getToken(SQLiteParser.CURRENT_, 0);
	};

	ROW_() {
	    return this.getToken(SQLiteParser.ROW_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFrame_single(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFrame_single(this);
		}
	}


}



class Window_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_function;
    }

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLiteParser.OPEN_PAR, i);
	    }
	};


	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLiteParser.CLOSE_PAR, i);
	    }
	};


	OVER_() {
	    return this.getToken(SQLiteParser.OVER_, 0);
	};

	order_by_expr_asc_desc() {
	    return this.getTypedRuleContext(Order_by_expr_asc_descContext,0);
	};

	FIRST_VALUE_() {
	    return this.getToken(SQLiteParser.FIRST_VALUE_, 0);
	};

	LAST_VALUE_() {
	    return this.getToken(SQLiteParser.LAST_VALUE_, 0);
	};

	partition_by() {
	    return this.getTypedRuleContext(Partition_byContext,0);
	};

	frame_clause() {
	    return this.getTypedRuleContext(Frame_clauseContext,0);
	};

	CUME_DIST_() {
	    return this.getToken(SQLiteParser.CUME_DIST_, 0);
	};

	PERCENT_RANK_() {
	    return this.getToken(SQLiteParser.PERCENT_RANK_, 0);
	};

	order_by_expr() {
	    return this.getTypedRuleContext(Order_by_exprContext,0);
	};

	DENSE_RANK_() {
	    return this.getToken(SQLiteParser.DENSE_RANK_, 0);
	};

	RANK_() {
	    return this.getToken(SQLiteParser.RANK_, 0);
	};

	ROW_NUMBER_() {
	    return this.getToken(SQLiteParser.ROW_NUMBER_, 0);
	};

	LAG_() {
	    return this.getToken(SQLiteParser.LAG_, 0);
	};

	LEAD_() {
	    return this.getToken(SQLiteParser.LEAD_, 0);
	};

	of_OF_fset() {
	    return this.getTypedRuleContext(Of_OF_fsetContext,0);
	};

	default_DEFAULT__value() {
	    return this.getTypedRuleContext(Default_DEFAULT__valueContext,0);
	};

	NTH_VALUE_() {
	    return this.getToken(SQLiteParser.NTH_VALUE_, 0);
	};

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	NTILE_() {
	    return this.getToken(SQLiteParser.NTILE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterWindow_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitWindow_function(this);
		}
	}


}



class Of_OF_fsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_of_OF_fset;
    }

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterOf_OF_fset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitOf_OF_fset(this);
		}
	}


}



class Default_DEFAULT__valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_default_DEFAULT__value;
    }

	COMMA() {
	    return this.getToken(SQLiteParser.COMMA, 0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterDefault_DEFAULT__value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitDefault_DEFAULT__value(this);
		}
	}


}



class Partition_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_partition_by;
    }

	PARTITION_() {
	    return this.getToken(SQLiteParser.PARTITION_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterPartition_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitPartition_by(this);
		}
	}


}



class Order_by_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_order_by_expr;
    }

	ORDER_() {
	    return this.getToken(SQLiteParser.ORDER_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterOrder_by_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitOrder_by_expr(this);
		}
	}


}



class Order_by_expr_asc_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_order_by_expr_asc_desc;
    }

	ORDER_() {
	    return this.getToken(SQLiteParser.ORDER_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	expr_asc_desc() {
	    return this.getTypedRuleContext(Expr_asc_descContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterOrder_by_expr_asc_desc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitOrder_by_expr_asc_desc(this);
		}
	}


}



class Expr_asc_descContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_expr_asc_desc;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	asc_desc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Asc_descContext);
	    } else {
	        return this.getTypedRuleContext(Asc_descContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLiteParser.COMMA);
	    } else {
	        return this.getToken(SQLiteParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterExpr_asc_desc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitExpr_asc_desc(this);
		}
	}


}



class Initial_selectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_initial_select;
    }

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterInitial_select(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitInitial_select(this);
		}
	}


}



class Recursive__selectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_recursive__select;
    }

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterRecursive__select(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitRecursive__select(this);
		}
	}


}



class Unary_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_unary_operator;
    }

	MINUS() {
	    return this.getToken(SQLiteParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SQLiteParser.PLUS, 0);
	};

	TILDE() {
	    return this.getToken(SQLiteParser.TILDE, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterUnary_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitUnary_operator(this);
		}
	}


}



class Error_messageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_error_message;
    }

	STRING_LITERAL() {
	    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterError_message(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitError_message(this);
		}
	}


}



class Module_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_module_argument;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_def() {
	    return this.getTypedRuleContext(Column_defContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterModule_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitModule_argument(this);
		}
	}


}



class Column_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_alias;
    }

	IDENTIFIER() {
	    return this.getToken(SQLiteParser.IDENTIFIER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterColumn_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitColumn_alias(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_keyword;
    }

	ABORT_() {
	    return this.getToken(SQLiteParser.ABORT_, 0);
	};

	ACTION_() {
	    return this.getToken(SQLiteParser.ACTION_, 0);
	};

	ADD_() {
	    return this.getToken(SQLiteParser.ADD_, 0);
	};

	AFTER_() {
	    return this.getToken(SQLiteParser.AFTER_, 0);
	};

	ALL_() {
	    return this.getToken(SQLiteParser.ALL_, 0);
	};

	ALTER_() {
	    return this.getToken(SQLiteParser.ALTER_, 0);
	};

	ANALYZE_() {
	    return this.getToken(SQLiteParser.ANALYZE_, 0);
	};

	AND_() {
	    return this.getToken(SQLiteParser.AND_, 0);
	};

	AS_() {
	    return this.getToken(SQLiteParser.AS_, 0);
	};

	ASC_() {
	    return this.getToken(SQLiteParser.ASC_, 0);
	};

	ATTACH_() {
	    return this.getToken(SQLiteParser.ATTACH_, 0);
	};

	AUTOINCREMENT_() {
	    return this.getToken(SQLiteParser.AUTOINCREMENT_, 0);
	};

	BEFORE_() {
	    return this.getToken(SQLiteParser.BEFORE_, 0);
	};

	BEGIN_() {
	    return this.getToken(SQLiteParser.BEGIN_, 0);
	};

	BETWEEN_() {
	    return this.getToken(SQLiteParser.BETWEEN_, 0);
	};

	BY_() {
	    return this.getToken(SQLiteParser.BY_, 0);
	};

	CASCADE_() {
	    return this.getToken(SQLiteParser.CASCADE_, 0);
	};

	CASE_() {
	    return this.getToken(SQLiteParser.CASE_, 0);
	};

	CAST_() {
	    return this.getToken(SQLiteParser.CAST_, 0);
	};

	CHECK_() {
	    return this.getToken(SQLiteParser.CHECK_, 0);
	};

	COLLATE_() {
	    return this.getToken(SQLiteParser.COLLATE_, 0);
	};

	COLUMN_() {
	    return this.getToken(SQLiteParser.COLUMN_, 0);
	};

	COMMIT_() {
	    return this.getToken(SQLiteParser.COMMIT_, 0);
	};

	CONFLICT_() {
	    return this.getToken(SQLiteParser.CONFLICT_, 0);
	};

	CONSTRAINT_() {
	    return this.getToken(SQLiteParser.CONSTRAINT_, 0);
	};

	CREATE_() {
	    return this.getToken(SQLiteParser.CREATE_, 0);
	};

	CROSS_() {
	    return this.getToken(SQLiteParser.CROSS_, 0);
	};

	CURRENT_DATE_() {
	    return this.getToken(SQLiteParser.CURRENT_DATE_, 0);
	};

	CURRENT_TIME_() {
	    return this.getToken(SQLiteParser.CURRENT_TIME_, 0);
	};

	CURRENT_TIMESTAMP_() {
	    return this.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0);
	};

	DATABASE_() {
	    return this.getToken(SQLiteParser.DATABASE_, 0);
	};

	DEFAULT_() {
	    return this.getToken(SQLiteParser.DEFAULT_, 0);
	};

	DEFERRABLE_() {
	    return this.getToken(SQLiteParser.DEFERRABLE_, 0);
	};

	DEFERRED_() {
	    return this.getToken(SQLiteParser.DEFERRED_, 0);
	};

	DELETE_() {
	    return this.getToken(SQLiteParser.DELETE_, 0);
	};

	DESC_() {
	    return this.getToken(SQLiteParser.DESC_, 0);
	};

	DETACH_() {
	    return this.getToken(SQLiteParser.DETACH_, 0);
	};

	DISTINCT_() {
	    return this.getToken(SQLiteParser.DISTINCT_, 0);
	};

	DROP_() {
	    return this.getToken(SQLiteParser.DROP_, 0);
	};

	EACH_() {
	    return this.getToken(SQLiteParser.EACH_, 0);
	};

	ELSE_() {
	    return this.getToken(SQLiteParser.ELSE_, 0);
	};

	END_() {
	    return this.getToken(SQLiteParser.END_, 0);
	};

	ESCAPE_() {
	    return this.getToken(SQLiteParser.ESCAPE_, 0);
	};

	EXCEPT_() {
	    return this.getToken(SQLiteParser.EXCEPT_, 0);
	};

	EXCLUSIVE_() {
	    return this.getToken(SQLiteParser.EXCLUSIVE_, 0);
	};

	EXISTS_() {
	    return this.getToken(SQLiteParser.EXISTS_, 0);
	};

	EXPLAIN_() {
	    return this.getToken(SQLiteParser.EXPLAIN_, 0);
	};

	FAIL_() {
	    return this.getToken(SQLiteParser.FAIL_, 0);
	};

	FOR_() {
	    return this.getToken(SQLiteParser.FOR_, 0);
	};

	FOREIGN_() {
	    return this.getToken(SQLiteParser.FOREIGN_, 0);
	};

	FROM_() {
	    return this.getToken(SQLiteParser.FROM_, 0);
	};

	FULL_() {
	    return this.getToken(SQLiteParser.FULL_, 0);
	};

	GLOB_() {
	    return this.getToken(SQLiteParser.GLOB_, 0);
	};

	GROUP_() {
	    return this.getToken(SQLiteParser.GROUP_, 0);
	};

	HAVING_() {
	    return this.getToken(SQLiteParser.HAVING_, 0);
	};

	IF_() {
	    return this.getToken(SQLiteParser.IF_, 0);
	};

	IGNORE_() {
	    return this.getToken(SQLiteParser.IGNORE_, 0);
	};

	IMMEDIATE_() {
	    return this.getToken(SQLiteParser.IMMEDIATE_, 0);
	};

	IN_() {
	    return this.getToken(SQLiteParser.IN_, 0);
	};

	INDEX_() {
	    return this.getToken(SQLiteParser.INDEX_, 0);
	};

	INDEXED_() {
	    return this.getToken(SQLiteParser.INDEXED_, 0);
	};

	INITIALLY_() {
	    return this.getToken(SQLiteParser.INITIALLY_, 0);
	};

	INNER_() {
	    return this.getToken(SQLiteParser.INNER_, 0);
	};

	INSERT_() {
	    return this.getToken(SQLiteParser.INSERT_, 0);
	};

	INSTEAD_() {
	    return this.getToken(SQLiteParser.INSTEAD_, 0);
	};

	INTERSECT_() {
	    return this.getToken(SQLiteParser.INTERSECT_, 0);
	};

	INTO_() {
	    return this.getToken(SQLiteParser.INTO_, 0);
	};

	IS_() {
	    return this.getToken(SQLiteParser.IS_, 0);
	};

	ISNULL_() {
	    return this.getToken(SQLiteParser.ISNULL_, 0);
	};

	JOIN_() {
	    return this.getToken(SQLiteParser.JOIN_, 0);
	};

	KEY_() {
	    return this.getToken(SQLiteParser.KEY_, 0);
	};

	LEFT_() {
	    return this.getToken(SQLiteParser.LEFT_, 0);
	};

	LIKE_() {
	    return this.getToken(SQLiteParser.LIKE_, 0);
	};

	LIMIT_() {
	    return this.getToken(SQLiteParser.LIMIT_, 0);
	};

	MATCH_() {
	    return this.getToken(SQLiteParser.MATCH_, 0);
	};

	NATURAL_() {
	    return this.getToken(SQLiteParser.NATURAL_, 0);
	};

	NO_() {
	    return this.getToken(SQLiteParser.NO_, 0);
	};

	NOT_() {
	    return this.getToken(SQLiteParser.NOT_, 0);
	};

	NOTNULL_() {
	    return this.getToken(SQLiteParser.NOTNULL_, 0);
	};

	NULL_() {
	    return this.getToken(SQLiteParser.NULL_, 0);
	};

	OF_() {
	    return this.getToken(SQLiteParser.OF_, 0);
	};

	OFFSET_() {
	    return this.getToken(SQLiteParser.OFFSET_, 0);
	};

	ON_() {
	    return this.getToken(SQLiteParser.ON_, 0);
	};

	OR_() {
	    return this.getToken(SQLiteParser.OR_, 0);
	};

	ORDER_() {
	    return this.getToken(SQLiteParser.ORDER_, 0);
	};

	OUTER_() {
	    return this.getToken(SQLiteParser.OUTER_, 0);
	};

	PLAN_() {
	    return this.getToken(SQLiteParser.PLAN_, 0);
	};

	PRAGMA_() {
	    return this.getToken(SQLiteParser.PRAGMA_, 0);
	};

	PRIMARY_() {
	    return this.getToken(SQLiteParser.PRIMARY_, 0);
	};

	QUERY_() {
	    return this.getToken(SQLiteParser.QUERY_, 0);
	};

	RAISE_() {
	    return this.getToken(SQLiteParser.RAISE_, 0);
	};

	RECURSIVE_() {
	    return this.getToken(SQLiteParser.RECURSIVE_, 0);
	};

	REFERENCES_() {
	    return this.getToken(SQLiteParser.REFERENCES_, 0);
	};

	REGEXP_() {
	    return this.getToken(SQLiteParser.REGEXP_, 0);
	};

	REINDEX_() {
	    return this.getToken(SQLiteParser.REINDEX_, 0);
	};

	RELEASE_() {
	    return this.getToken(SQLiteParser.RELEASE_, 0);
	};

	RENAME_() {
	    return this.getToken(SQLiteParser.RENAME_, 0);
	};

	REPLACE_() {
	    return this.getToken(SQLiteParser.REPLACE_, 0);
	};

	RESTRICT_() {
	    return this.getToken(SQLiteParser.RESTRICT_, 0);
	};

	RIGHT_() {
	    return this.getToken(SQLiteParser.RIGHT_, 0);
	};

	ROLLBACK_() {
	    return this.getToken(SQLiteParser.ROLLBACK_, 0);
	};

	ROW_() {
	    return this.getToken(SQLiteParser.ROW_, 0);
	};

	ROWS_() {
	    return this.getToken(SQLiteParser.ROWS_, 0);
	};

	SAVEPOINT_() {
	    return this.getToken(SQLiteParser.SAVEPOINT_, 0);
	};

	SELECT_() {
	    return this.getToken(SQLiteParser.SELECT_, 0);
	};

	SET_() {
	    return this.getToken(SQLiteParser.SET_, 0);
	};

	TABLE_() {
	    return this.getToken(SQLiteParser.TABLE_, 0);
	};

	TEMP_() {
	    return this.getToken(SQLiteParser.TEMP_, 0);
	};

	TEMPORARY_() {
	    return this.getToken(SQLiteParser.TEMPORARY_, 0);
	};

	THEN_() {
	    return this.getToken(SQLiteParser.THEN_, 0);
	};

	TO_() {
	    return this.getToken(SQLiteParser.TO_, 0);
	};

	TRANSACTION_() {
	    return this.getToken(SQLiteParser.TRANSACTION_, 0);
	};

	TRIGGER_() {
	    return this.getToken(SQLiteParser.TRIGGER_, 0);
	};

	UNION_() {
	    return this.getToken(SQLiteParser.UNION_, 0);
	};

	UNIQUE_() {
	    return this.getToken(SQLiteParser.UNIQUE_, 0);
	};

	UPDATE_() {
	    return this.getToken(SQLiteParser.UPDATE_, 0);
	};

	USING_() {
	    return this.getToken(SQLiteParser.USING_, 0);
	};

	VACUUM_() {
	    return this.getToken(SQLiteParser.VACUUM_, 0);
	};

	VALUES_() {
	    return this.getToken(SQLiteParser.VALUES_, 0);
	};

	VIEW_() {
	    return this.getToken(SQLiteParser.VIEW_, 0);
	};

	VIRTUAL_() {
	    return this.getToken(SQLiteParser.VIRTUAL_, 0);
	};

	WHEN_() {
	    return this.getToken(SQLiteParser.WHEN_, 0);
	};

	WHERE_() {
	    return this.getToken(SQLiteParser.WHERE_, 0);
	};

	WITH_() {
	    return this.getToken(SQLiteParser.WITH_, 0);
	};

	WITHOUT_() {
	    return this.getToken(SQLiteParser.WITHOUT_, 0);
	};

	FIRST_VALUE_() {
	    return this.getToken(SQLiteParser.FIRST_VALUE_, 0);
	};

	OVER_() {
	    return this.getToken(SQLiteParser.OVER_, 0);
	};

	PARTITION_() {
	    return this.getToken(SQLiteParser.PARTITION_, 0);
	};

	RANGE_() {
	    return this.getToken(SQLiteParser.RANGE_, 0);
	};

	PRECEDING_() {
	    return this.getToken(SQLiteParser.PRECEDING_, 0);
	};

	UNBOUNDED_() {
	    return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	};

	CURRENT_() {
	    return this.getToken(SQLiteParser.CURRENT_, 0);
	};

	FOLLOWING_() {
	    return this.getToken(SQLiteParser.FOLLOWING_, 0);
	};

	CUME_DIST_() {
	    return this.getToken(SQLiteParser.CUME_DIST_, 0);
	};

	DENSE_RANK_() {
	    return this.getToken(SQLiteParser.DENSE_RANK_, 0);
	};

	LAG_() {
	    return this.getToken(SQLiteParser.LAG_, 0);
	};

	LAST_VALUE_() {
	    return this.getToken(SQLiteParser.LAST_VALUE_, 0);
	};

	LEAD_() {
	    return this.getToken(SQLiteParser.LEAD_, 0);
	};

	NTH_VALUE_() {
	    return this.getToken(SQLiteParser.NTH_VALUE_, 0);
	};

	NTILE_() {
	    return this.getToken(SQLiteParser.NTILE_, 0);
	};

	PERCENT_RANK_() {
	    return this.getToken(SQLiteParser.PERCENT_RANK_, 0);
	};

	RANK_() {
	    return this.getToken(SQLiteParser.RANK_, 0);
	};

	ROW_NUMBER_() {
	    return this.getToken(SQLiteParser.ROW_NUMBER_, 0);
	};

	GENERATED_() {
	    return this.getToken(SQLiteParser.GENERATED_, 0);
	};

	ALWAYS_() {
	    return this.getToken(SQLiteParser.ALWAYS_, 0);
	};

	STORED_() {
	    return this.getToken(SQLiteParser.STORED_, 0);
	};

	TRUE_() {
	    return this.getToken(SQLiteParser.TRUE_, 0);
	};

	FALSE_() {
	    return this.getToken(SQLiteParser.FALSE_, 0);
	};

	WINDOW_() {
	    return this.getToken(SQLiteParser.WINDOW_, 0);
	};

	NULLS_() {
	    return this.getToken(SQLiteParser.NULLS_, 0);
	};

	FIRST_() {
	    return this.getToken(SQLiteParser.FIRST_, 0);
	};

	LAST_() {
	    return this.getToken(SQLiteParser.LAST_, 0);
	};

	FILTER_() {
	    return this.getToken(SQLiteParser.FILTER_, 0);
	};

	GROUPS_() {
	    return this.getToken(SQLiteParser.GROUPS_, 0);
	};

	EXCLUDE_() {
	    return this.getToken(SQLiteParser.EXCLUDE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitName(this);
		}
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_function_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFunction_name(this);
		}
	}


}



class Schema_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_schema_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSchema_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSchema_name(this);
		}
	}


}



class Table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTable_name(this);
		}
	}


}



class Table_or_index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_or_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTable_or_index_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTable_or_index_name(this);
		}
	}


}



class New_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_new_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterNew_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitNew_table_name(this);
		}
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitColumn_name(this);
		}
	}


}



class Collation_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_collation_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterCollation_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitCollation_name(this);
		}
	}


}



class Foreign_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_foreign_table;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterForeign_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitForeign_table(this);
		}
	}


}



class Index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterIndex_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitIndex_name(this);
		}
	}


}



class Trigger_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_trigger_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTrigger_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTrigger_name(this);
		}
	}


}



class View_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_view_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterView_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitView_name(this);
		}
	}


}



class Module_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_module_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterModule_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitModule_name(this);
		}
	}


}



class Pragma_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_pragma_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterPragma_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitPragma_name(this);
		}
	}


}



class Savepoint_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_savepoint_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSavepoint_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSavepoint_name(this);
		}
	}


}



class Table_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_alias;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTable_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTable_alias(this);
		}
	}


}



class Transaction_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_transaction_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTransaction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTransaction_name(this);
		}
	}


}



class Window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterWindow_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitWindow_name(this);
		}
	}


}



class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_alias;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAlias(this);
		}
	}


}



class FilenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_filename;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterFilename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitFilename(this);
		}
	}


}



class Base_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_base_window_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterBase_window_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitBase_window_name(this);
		}
	}


}



class Simple_funcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_simple_func;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterSimple_func(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitSimple_func(this);
		}
	}


}



class Aggregate_funcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_aggregate_func;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAggregate_func(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAggregate_func(this);
		}
	}


}



class Table_function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_function_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterTable_function_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitTable_function_name(this);
		}
	}


}



class Any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_any_name;
    }

	IDENTIFIER() {
	    return this.getToken(SQLiteParser.IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLiteParser.OPEN_PAR, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.enterAny_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLiteParserListener ) {
	        listener.exitAny_name(this);
		}
	}


}




SQLiteParser.ParseContext = ParseContext; 
SQLiteParser.Sql_stmt_listContext = Sql_stmt_listContext; 
SQLiteParser.Sql_stmtContext = Sql_stmtContext; 
SQLiteParser.Alter_table_stmtContext = Alter_table_stmtContext; 
SQLiteParser.Analyze_stmtContext = Analyze_stmtContext; 
SQLiteParser.Attach_stmtContext = Attach_stmtContext; 
SQLiteParser.Begin_stmtContext = Begin_stmtContext; 
SQLiteParser.Commit_stmtContext = Commit_stmtContext; 
SQLiteParser.Rollback_stmtContext = Rollback_stmtContext; 
SQLiteParser.Savepoint_stmtContext = Savepoint_stmtContext; 
SQLiteParser.Release_stmtContext = Release_stmtContext; 
SQLiteParser.Create_index_stmtContext = Create_index_stmtContext; 
SQLiteParser.Indexed_columnContext = Indexed_columnContext; 
SQLiteParser.Create_table_stmtContext = Create_table_stmtContext; 
SQLiteParser.Column_defContext = Column_defContext; 
SQLiteParser.Type_nameContext = Type_nameContext; 
SQLiteParser.Column_constraintContext = Column_constraintContext; 
SQLiteParser.Signed_numberContext = Signed_numberContext; 
SQLiteParser.Table_constraintContext = Table_constraintContext; 
SQLiteParser.Foreign_key_clauseContext = Foreign_key_clauseContext; 
SQLiteParser.Conflict_clauseContext = Conflict_clauseContext; 
SQLiteParser.Create_trigger_stmtContext = Create_trigger_stmtContext; 
SQLiteParser.Create_view_stmtContext = Create_view_stmtContext; 
SQLiteParser.Create_virtual_table_stmtContext = Create_virtual_table_stmtContext; 
SQLiteParser.With_clauseContext = With_clauseContext; 
SQLiteParser.Cte_table_nameContext = Cte_table_nameContext; 
SQLiteParser.Recursive_cteContext = Recursive_cteContext; 
SQLiteParser.Common_table_expressionContext = Common_table_expressionContext; 
SQLiteParser.Delete_stmtContext = Delete_stmtContext; 
SQLiteParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext; 
SQLiteParser.Detach_stmtContext = Detach_stmtContext; 
SQLiteParser.Drop_stmtContext = Drop_stmtContext; 
SQLiteParser.ExprContext = ExprContext; 
SQLiteParser.Raise_functionContext = Raise_functionContext; 
SQLiteParser.Literal_valueContext = Literal_valueContext; 
SQLiteParser.Insert_stmtContext = Insert_stmtContext; 
SQLiteParser.Upsert_clauseContext = Upsert_clauseContext; 
SQLiteParser.Pragma_stmtContext = Pragma_stmtContext; 
SQLiteParser.Pragma_valueContext = Pragma_valueContext; 
SQLiteParser.Reindex_stmtContext = Reindex_stmtContext; 
SQLiteParser.Select_stmtContext = Select_stmtContext; 
SQLiteParser.Join_clauseContext = Join_clauseContext; 
SQLiteParser.Select_coreContext = Select_coreContext; 
SQLiteParser.Factored_select_stmtContext = Factored_select_stmtContext; 
SQLiteParser.Simple_select_stmtContext = Simple_select_stmtContext; 
SQLiteParser.Compound_select_stmtContext = Compound_select_stmtContext; 
SQLiteParser.Table_or_subqueryContext = Table_or_subqueryContext; 
SQLiteParser.Result_columnContext = Result_columnContext; 
SQLiteParser.Join_operatorContext = Join_operatorContext; 
SQLiteParser.Join_constraintContext = Join_constraintContext; 
SQLiteParser.Compound_operatorContext = Compound_operatorContext; 
SQLiteParser.Update_stmtContext = Update_stmtContext; 
SQLiteParser.Column_name_listContext = Column_name_listContext; 
SQLiteParser.Update_stmt_limitedContext = Update_stmt_limitedContext; 
SQLiteParser.Qualified_table_nameContext = Qualified_table_nameContext; 
SQLiteParser.Vacuum_stmtContext = Vacuum_stmtContext; 
SQLiteParser.Filter_clauseContext = Filter_clauseContext; 
SQLiteParser.Window_defnContext = Window_defnContext; 
SQLiteParser.Over_clauseContext = Over_clauseContext; 
SQLiteParser.Frame_specContext = Frame_specContext; 
SQLiteParser.Frame_clauseContext = Frame_clauseContext; 
SQLiteParser.Simple_function_invocationContext = Simple_function_invocationContext; 
SQLiteParser.Aggregate_function_invocationContext = Aggregate_function_invocationContext; 
SQLiteParser.Window_function_invocationContext = Window_function_invocationContext; 
SQLiteParser.Common_table_stmtContext = Common_table_stmtContext; 
SQLiteParser.Order_by_stmtContext = Order_by_stmtContext; 
SQLiteParser.Limit_stmtContext = Limit_stmtContext; 
SQLiteParser.Ordering_termContext = Ordering_termContext; 
SQLiteParser.Asc_descContext = Asc_descContext; 
SQLiteParser.Frame_leftContext = Frame_leftContext; 
SQLiteParser.Frame_rightContext = Frame_rightContext; 
SQLiteParser.Frame_singleContext = Frame_singleContext; 
SQLiteParser.Window_functionContext = Window_functionContext; 
SQLiteParser.Of_OF_fsetContext = Of_OF_fsetContext; 
SQLiteParser.Default_DEFAULT__valueContext = Default_DEFAULT__valueContext; 
SQLiteParser.Partition_byContext = Partition_byContext; 
SQLiteParser.Order_by_exprContext = Order_by_exprContext; 
SQLiteParser.Order_by_expr_asc_descContext = Order_by_expr_asc_descContext; 
SQLiteParser.Expr_asc_descContext = Expr_asc_descContext; 
SQLiteParser.Initial_selectContext = Initial_selectContext; 
SQLiteParser.Recursive__selectContext = Recursive__selectContext; 
SQLiteParser.Unary_operatorContext = Unary_operatorContext; 
SQLiteParser.Error_messageContext = Error_messageContext; 
SQLiteParser.Module_argumentContext = Module_argumentContext; 
SQLiteParser.Column_aliasContext = Column_aliasContext; 
SQLiteParser.KeywordContext = KeywordContext; 
SQLiteParser.NameContext = NameContext; 
SQLiteParser.Function_nameContext = Function_nameContext; 
SQLiteParser.Schema_nameContext = Schema_nameContext; 
SQLiteParser.Table_nameContext = Table_nameContext; 
SQLiteParser.Table_or_index_nameContext = Table_or_index_nameContext; 
SQLiteParser.New_table_nameContext = New_table_nameContext; 
SQLiteParser.Column_nameContext = Column_nameContext; 
SQLiteParser.Collation_nameContext = Collation_nameContext; 
SQLiteParser.Foreign_tableContext = Foreign_tableContext; 
SQLiteParser.Index_nameContext = Index_nameContext; 
SQLiteParser.Trigger_nameContext = Trigger_nameContext; 
SQLiteParser.View_nameContext = View_nameContext; 
SQLiteParser.Module_nameContext = Module_nameContext; 
SQLiteParser.Pragma_nameContext = Pragma_nameContext; 
SQLiteParser.Savepoint_nameContext = Savepoint_nameContext; 
SQLiteParser.Table_aliasContext = Table_aliasContext; 
SQLiteParser.Transaction_nameContext = Transaction_nameContext; 
SQLiteParser.Window_nameContext = Window_nameContext; 
SQLiteParser.AliasContext = AliasContext; 
SQLiteParser.FilenameContext = FilenameContext; 
SQLiteParser.Base_window_nameContext = Base_window_nameContext; 
SQLiteParser.Simple_funcContext = Simple_funcContext; 
SQLiteParser.Aggregate_funcContext = Aggregate_funcContext; 
SQLiteParser.Table_function_nameContext = Table_function_nameContext; 
SQLiteParser.Any_nameContext = Any_nameContext; 
