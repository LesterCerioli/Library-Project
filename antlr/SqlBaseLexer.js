// Generated from SqlBase.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,39,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,
6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
17,1,17,1,17,1,17,3,17,154,8,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,
1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
27,1,28,1,28,1,28,1,28,5,28,183,8,28,10,28,12,28,186,9,28,1,28,1,28,1,29,
1,29,1,29,1,29,1,29,1,29,1,29,5,29,197,8,29,10,29,12,29,200,9,29,1,29,1,
29,1,30,1,30,1,30,1,30,5,30,208,8,30,10,30,12,30,211,9,30,1,30,1,30,1,31,
4,31,216,8,31,11,31,12,31,217,1,32,4,32,221,8,32,11,32,12,32,222,1,32,1,
32,5,32,227,8,32,10,32,12,32,230,9,32,1,32,1,32,4,32,234,8,32,11,32,12,32,
235,3,32,238,8,32,1,33,1,33,3,33,242,8,33,1,33,1,33,1,33,5,33,247,8,33,10,
33,12,33,250,9,33,1,34,1,34,1,34,1,34,4,34,256,8,34,11,34,12,34,257,1,35,
1,35,1,35,1,35,5,35,264,8,35,10,35,12,35,267,9,35,1,35,1,35,1,36,1,36,1,
36,1,36,5,36,275,8,36,10,36,12,36,278,9,36,1,36,1,36,1,37,1,37,3,37,284,
8,37,1,37,4,37,287,8,37,11,37,12,37,288,1,38,1,38,1,39,1,39,1,40,4,40,296,
8,40,11,40,12,40,297,1,40,1,40,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,
13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
31,63,32,65,33,67,34,69,35,71,36,73,37,75,0,77,0,79,0,81,38,83,39,1,0,8,
1,0,39,39,3,0,58,58,64,64,95,95,1,0,34,34,1,0,96,96,2,0,43,43,45,45,1,0,
48,57,1,0,65,90,3,0,9,10,13,13,32,32,324,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,
7,91,1,0,0,0,9,93,1,0,0,0,11,96,1,0,0,0,13,100,1,0,0,0,15,104,1,0,0,0,17,
108,1,0,0,0,19,113,1,0,0,0,21,119,1,0,0,0,23,124,1,0,0,0,25,128,1,0,0,0,
27,133,1,0,0,0,29,137,1,0,0,0,31,142,1,0,0,0,33,147,1,0,0,0,35,153,1,0,0,
0,37,155,1,0,0,0,39,157,1,0,0,0,41,160,1,0,0,0,43,162,1,0,0,0,45,165,1,0,
0,0,47,167,1,0,0,0,49,169,1,0,0,0,51,171,1,0,0,0,53,173,1,0,0,0,55,175,1,
0,0,0,57,178,1,0,0,0,59,189,1,0,0,0,61,203,1,0,0,0,63,215,1,0,0,0,65,237,
1,0,0,0,67,241,1,0,0,0,69,251,1,0,0,0,71,259,1,0,0,0,73,270,1,0,0,0,75,281,
1,0,0,0,77,290,1,0,0,0,79,292,1,0,0,0,81,295,1,0,0,0,83,301,1,0,0,0,85,86,
5,44,0,0,86,2,1,0,0,0,87,88,5,40,0,0,88,4,1,0,0,0,89,90,5,41,0,0,90,6,1,
0,0,0,91,92,5,46,0,0,92,8,1,0,0,0,93,94,5,61,0,0,94,95,5,62,0,0,95,10,1,
0,0,0,96,97,5,65,0,0,97,98,5,76,0,0,98,99,5,76,0,0,99,12,1,0,0,0,100,101,
5,65,0,0,101,102,5,78,0,0,102,103,5,89,0,0,103,14,1,0,0,0,104,105,5,65,0,
0,105,106,5,83,0,0,106,107,5,67,0,0,107,16,1,0,0,0,108,109,5,68,0,0,109,
110,5,69,0,0,110,111,5,83,0,0,111,112,5,67,0,0,112,18,1,0,0,0,113,114,5,
76,0,0,114,115,5,73,0,0,115,116,5,77,0,0,116,117,5,73,0,0,117,118,5,84,0,
0,118,20,1,0,0,0,119,120,5,78,0,0,120,121,5,65,0,0,121,122,5,77,0,0,122,
123,5,69,0,0,123,22,1,0,0,0,124,125,5,82,0,0,125,126,5,79,0,0,126,127,5,
87,0,0,127,24,1,0,0,0,128,129,5,82,0,0,129,130,5,79,0,0,130,131,5,87,0,0,
131,132,5,83,0,0,132,26,1,0,0,0,133,134,5,83,0,0,134,135,5,81,0,0,135,136,
5,76,0,0,136,28,1,0,0,0,137,138,5,84,0,0,138,139,5,69,0,0,139,140,5,88,0,
0,140,141,5,84,0,0,141,30,1,0,0,0,142,143,5,84,0,0,143,144,5,89,0,0,144,
145,5,80,0,0,145,146,5,69,0,0,146,32,1,0,0,0,147,148,5,61,0,0,148,34,1,0,
0,0,149,150,5,60,0,0,150,154,5,62,0,0,151,152,5,33,0,0,152,154,5,61,0,0,
153,149,1,0,0,0,153,151,1,0,0,0,154,36,1,0,0,0,155,156,5,60,0,0,156,38,1,
0,0,0,157,158,5,60,0,0,158,159,5,61,0,0,159,40,1,0,0,0,160,161,5,62,0,0,
161,42,1,0,0,0,162,163,5,62,0,0,163,164,5,61,0,0,164,44,1,0,0,0,165,166,
5,43,0,0,166,46,1,0,0,0,167,168,5,45,0,0,168,48,1,0,0,0,169,170,5,42,0,0,
170,50,1,0,0,0,171,172,5,47,0,0,172,52,1,0,0,0,173,174,5,37,0,0,174,54,1,
0,0,0,175,176,5,124,0,0,176,177,5,124,0,0,177,56,1,0,0,0,178,184,5,39,0,
0,179,183,8,0,0,0,180,181,5,39,0,0,181,183,5,39,0,0,182,179,1,0,0,0,182,
180,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,
0,0,186,184,1,0,0,0,187,188,5,39,0,0,188,58,1,0,0,0,189,190,5,85,0,0,190,
191,5,38,0,0,191,192,5,39,0,0,192,198,1,0,0,0,193,197,8,0,0,0,194,195,5,
39,0,0,195,197,5,39,0,0,196,193,1,0,0,0,196,194,1,0,0,0,197,200,1,0,0,0,
198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,
5,39,0,0,202,60,1,0,0,0,203,204,5,88,0,0,204,205,5,39,0,0,205,209,1,0,0,
0,206,208,8,0,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,
1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,39,0,0,213,62,1,0,0,0,
214,216,3,77,38,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,
1,0,0,0,218,64,1,0,0,0,219,221,3,77,38,0,220,219,1,0,0,0,221,222,1,0,0,0,
222,220,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,228,5,46,0,0,225,227,
3,77,38,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,
0,229,238,1,0,0,0,230,228,1,0,0,0,231,233,5,46,0,0,232,234,3,77,38,0,233,
232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,
0,0,237,220,1,0,0,0,237,231,1,0,0,0,238,66,1,0,0,0,239,242,3,79,39,0,240,
242,5,95,0,0,241,239,1,0,0,0,241,240,1,0,0,0,242,248,1,0,0,0,243,247,3,79,
39,0,244,247,3,77,38,0,245,247,7,1,0,0,246,243,1,0,0,0,246,244,1,0,0,0,246,
245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,68,1,0,0,
0,250,248,1,0,0,0,251,255,3,77,38,0,252,256,3,79,39,0,253,256,3,77,38,0,
254,256,7,1,0,0,255,252,1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,257,
1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,70,1,0,0,0,259,265,5,34,0,0,
260,264,8,2,0,0,261,262,5,34,0,0,262,264,5,34,0,0,263,260,1,0,0,0,263,261,
1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,
267,265,1,0,0,0,268,269,5,34,0,0,269,72,1,0,0,0,270,276,5,96,0,0,271,275,
8,3,0,0,272,273,5,96,0,0,273,275,5,96,0,0,274,271,1,0,0,0,274,272,1,0,0,
0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,
1,0,0,0,279,280,5,96,0,0,280,74,1,0,0,0,281,283,5,69,0,0,282,284,7,4,0,0,
283,282,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,287,3,77,38,0,286,285,
1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,76,1,0,0,0,290,
291,7,5,0,0,291,78,1,0,0,0,292,293,7,6,0,0,293,80,1,0,0,0,294,296,7,7,0,
0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,299,
1,0,0,0,299,300,6,40,0,0,300,82,1,0,0,0,301,302,9,0,0,0,302,84,1,0,0,0,24,
0,153,182,184,196,198,209,217,222,228,235,237,241,246,248,255,257,263,265,
274,276,283,288,297,1,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SqlBaseLexer extends antlr4.Lexer {

    static grammarFileName = "SqlBase.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "','", "'('", "')'", "'.'", "'=>'", "'ALL'", 
                         "'ANY'", "'ASC'", "'DESC'", "'LIMIT'", "'NAME'", 
                         "'ROW'", "'ROWS'", "'SQL'", "'TEXT'", "'TYPE'", 
                         "'='", null, "'<'", "'<='", "'>'", "'>='", "'+'", 
                         "'-'", "'*'", "'/'", "'%'", "'||'" ];
	static symbolicNames = [ null, null, null, null, null, null, "ALL", "ANY", 
                          "ASC", "DESC", "LIMIT", "NAME", "ROW", "ROWS", 
                          "SQL", "TEXT", "TYPE", "EQ", "NEQ", "LT", "LTE", 
                          "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                          "PERCENT", "CONCAT", "STRING", "UNICODE_STRING", 
                          "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
                          "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
                          "BACKQUOTED_IDENTIFIER", "WS", "UNRECOGNIZED" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "ALL", "ANY", 
                      "ASC", "DESC", "LIMIT", "NAME", "ROW", "ROWS", "SQL", 
                      "TEXT", "TYPE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                      "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", 
                      "STRING", "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "EXPONENT", 
                      "DIGIT", "LETTER", "WS", "UNRECOGNIZED" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

SqlBaseLexer.EOF = antlr4.Token.EOF;
SqlBaseLexer.T__0 = 1;
SqlBaseLexer.T__1 = 2;
SqlBaseLexer.T__2 = 3;
SqlBaseLexer.T__3 = 4;
SqlBaseLexer.T__4 = 5;
SqlBaseLexer.ALL = 6;
SqlBaseLexer.ANY = 7;
SqlBaseLexer.ASC = 8;
SqlBaseLexer.DESC = 9;
SqlBaseLexer.LIMIT = 10;
SqlBaseLexer.NAME = 11;
SqlBaseLexer.ROW = 12;
SqlBaseLexer.ROWS = 13;
SqlBaseLexer.SQL = 14;
SqlBaseLexer.TEXT = 15;
SqlBaseLexer.TYPE = 16;
SqlBaseLexer.EQ = 17;
SqlBaseLexer.NEQ = 18;
SqlBaseLexer.LT = 19;
SqlBaseLexer.LTE = 20;
SqlBaseLexer.GT = 21;
SqlBaseLexer.GTE = 22;
SqlBaseLexer.PLUS = 23;
SqlBaseLexer.MINUS = 24;
SqlBaseLexer.ASTERISK = 25;
SqlBaseLexer.SLASH = 26;
SqlBaseLexer.PERCENT = 27;
SqlBaseLexer.CONCAT = 28;
SqlBaseLexer.STRING = 29;
SqlBaseLexer.UNICODE_STRING = 30;
SqlBaseLexer.BINARY_LITERAL = 31;
SqlBaseLexer.INTEGER_VALUE = 32;
SqlBaseLexer.DECIMAL_VALUE = 33;
SqlBaseLexer.IDENTIFIER = 34;
SqlBaseLexer.DIGIT_IDENTIFIER = 35;
SqlBaseLexer.QUOTED_IDENTIFIER = 36;
SqlBaseLexer.BACKQUOTED_IDENTIFIER = 37;
SqlBaseLexer.WS = 38;
SqlBaseLexer.UNRECOGNIZED = 39;



